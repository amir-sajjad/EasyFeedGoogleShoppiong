import React, { useEffect, ChangeEvent } from "react";
import { useNavigate } from 'react-router-dom';
import { useCallback } from 'react';
import { useState } from 'react';
import { useParams } from "react-router";
import axioshttp from '../../axioshttp';
import JSZip from 'jszip';
import CircularProgress from "@mui/material/CircularProgress";
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import Divider from '@mui/material/Divider';
import CloseIcon from '@mui/icons-material/Close';
import ReportProblemIcon from '@mui/icons-material/ReportProblem';
import { Button } from '@mui/material';
import GppMaybeIcon from '@mui/icons-material/GppMaybe';
import Rating from '@mui/material/Rating';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
// import Box from '@mui/material/Box';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import ErrorIcon from '@mui/icons-material/Error';
import DeleteIcon from '@mui/icons-material/Delete';
import Checkbox from '@mui/material/Checkbox';
import TextField from "@mui/material/TextField";
import Autocomplete from "@mui/material/Autocomplete";
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import TuneIcon from '@mui/icons-material/Tune';
import ViewWeekIcon from '@mui/icons-material/ViewWeek';
import ScoreboardIcon from '@mui/icons-material/Scoreboard';
import PublishIcon from '@mui/icons-material/Publish';
import GetAppIcon from '@mui/icons-material/GetApp';
import Menu from '@mui/material/Menu';
import FormControlLabel from '@mui/material/FormControlLabel';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import TablePagination from '@mui/material/TablePagination';
import Slider from '@mui/material/Slider';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import RemoveCircleIcon from '@mui/icons-material/RemoveCircle';
import Skeleton from '@mui/material/Skeleton';
import Popover from '@mui/material/Popover';
import VideoModal from "../tutorials/VideoModal";
import TextSnippetIcon from '@mui/icons-material/TextSnippet';
import upgradeImg from './upgradeImg.png';
import FactCheckIcon from '@mui/icons-material/FactCheck';
import { get } from "lodash";
import { all } from "axios";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import LinearProgress from '@mui/material/LinearProgress';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ReactGA from "react-ga4";

const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          "&.Mui-disabled": {
            background: "#e0e0e0",
            color: "#b1b1b1"
          }
        }
      }
    }
  }
});

const checkboxArray = ['Varient1', 'Varient2'];
let defalutButtonText = "Upload and continue";
let ContinueToImport = "Import Products";

function valuetext (value) {
  return `${value}Â°C`;
}
const minDistance = 10;

const Products = () => {

  const feedId = useParams();
  const [feed, setFeed] = useState();
  const [feedSyncMessage, setFeedSyncMessage] = useState(false);
  const [merchantAccId, setMerchantAccId] = useState('');
  const [totalAllResults, setTotalAllResults] = useState(0);
  const [totalAppResults, setTotalAppResults] = useState(0);
  const [totalDisappResults, setTotalDisappResults] = useState(0);
  const [totalPendResults, setTotalPendResults] = useState(0);
  const [totalExclResults, setTotalExclResults] = useState(0);
  const [accountErrors, setAccountErrors] = useState([]);
  const [productCategories, setProductCategories] = useState([]);
  const [loadingAccountErrors, setLoadingAccountErrors] = useState(true);
  const [showAccountRequirements, setShowAccountRequirements] = useState(true);
  const [resultsPerPageOptions, setResultsPerPageOptions] = useState([50, 100, 150, 200, 250]);
  const [tabsValue, setTabsValue] = useState("all");

  const [loadingAllProducts, setLoadingAllProducts] = useState(true);
  const [allProducts, setAllProducts] = useState([]);
  const [resultsPerPageLimit, setResultsPerPageLimit] = useState(50);
  const [totalResults, setTotalResults] = useState(0);
  const [currentPage, setCurrentPage] = useState(0);
  const [lastPage, setLastPage] = useState(1);

  const [loadingApprProducts, setLoadingApprProducts] = useState(true);
  const [allApprovedProducts, setAllApprovedProducts] = useState([]);
  const [approvedResultsPerPageLimit, setApprovedResultPerPageLimit] = useState(50);
  const [totalApprovedResults, setTotalApprovedResults] = useState(0);
  const [approvedCurrentPage, setApprovedCurrentPage] = useState(0);
  const [approvedLastPage, setApprovedLastPage] = useState(1);

  const [loadingDisappProducts, setLoadingDisappProducts] = useState(true);
  const [allDisapprovedProducts, setAllDisapprovedProducts] = useState([]);
  const [disapprovedResultsPerPageLimit, setDisapprovedResultPerPageLimit] = useState(50);
  const [totalDisapprovedResults, setTotalDisapprovedResults] = useState(0);
  const [disapprovedCurrentPage, setDisapprovedCurrentPage] = useState(0);
  const [disapprovedLastPage, setDisapprovedLastPage] = useState(1);

  const [loadingPendProducts, setLoadingPendProducts] = useState(true);
  const [allPendingProducts, setAllPendingProducts] = useState([]);
  const [pendingResultsPerPageLimit, setPendingResultPerPageLimit] = useState(50);
  const [totalPendingResults, setTotalPendingResults] = useState(0);
  const [pendingCurrentPage, setPendingCurrentPage] = useState(0);
  const [pendingLastPage, setPendingLastPage] = useState(1);

  const [loadingExclProducts, setLoadingExclProducts] = useState(true);
  const [allExcludedProducts, setAllExcludedProducts] = useState([]);
  const [excludedResultsPerPageLimit, setExcludedResultPerPageLimit] = useState(50);
  const [totalExcludedResults, setTotalExcludedResults] = useState(0);
  const [excludedCurrentPage, setExcludedCurrentPage] = useState(0);
  const [excludedLastPage, setExcludedLastPage] = useState(1);

  const [editRequestProcessing, setEditRequestProcessing] = useState(false);
  const [syncRequestProcessing, setSyncRequestProcessing] = useState(false);
  const [googleSyncRequestProcessing, setGoogleSyncRequestProcessing] = useState(false);
  const [excludeRequestProcessing, setExcludeRequestProcessing] = useState(false);
  const [deleteRequestProcessing, setDeleteRequestProcessing] = useState(false);
  const [includeRequestProcessing, setIncludeRequestProcessing] = useState(false);

  const [checkedColumns, setCheckedColumns] = useState({
    id: false,
    score: true,
    googleStatus: true,
    errorsFromMerchantCenter: true,
    googleProductCategory: false,
    ageGroup: false,
    gender: false,
    productCondition: false,
    brand: false,
    productType: false,
    promotionId: false,
    customLabel0: false,
    customLabel1: false,
    customLabel2: false,
    customLabel3: false,
    customLabel4: false,
  });
  const [selectedResources, setSelectedResources] = useState([]);
  const [showEditProductModal, setShowEditProductModal] = useState(false);
  const [showSyncFromShopifyModel, setShowSyncFromShopifyModel] = useState(false);
  const [showGoogleSyncModel, setShowGoogleSyncModel] = useState(false);
  const [showExcludeModel, setShowExcludeModel] = useState(false);
  const [showIncludeModel, setShowIncludeModel] = useState(false);
  const [showBulkDeleteModel, setShowBulkDeleteModel] = useState(false);
  const [showSingleDeleteModel, setShowSingleDeleteModel] = useState(false);
  const [showUpgradeModel, setShowUpgradeModel] = useState(false);
  const [showAddProductDrawer, setShowAddProductDrawer] = useState(false);
  const [syncFromShopifyInputs, setSyncFromShopifyInputs] = useState({
    metafieldResource: 'none',
    metafields: []
  });
  const [metafieldsActive, setMetafieldsActive] = useState(false);
  const [metafieldsResourceValue, setMetafieldsResourceValue] = useState('none');
  const [metafieldsValues, setMetafieldsValues] = useState(['']);
  const [showMetafieldUpgradeMessage, setShowMetafieldUpgradeMessage] = useState(false);
  const [loadingMetafields, setLoadingMetafields] = useState(true);
  const [selectedResourceMetafields, setSelectedResourceMetafields] = useState([]);
  const [syncFromShopifyErrors, setSyncFromShopifyErrors] = useState([]);
  const [singleDeleteAbleProduct, setSingleDeleteAbleProduct] = useState(null);
  const [loadingDrawerProducts, setLoadingDrawerProducts] = useState(true);
  const [loadingDrawerCollections, setLoadingDrawerCollections] = useState(true);
  const [loadingMoreStoreProducts, setLoadingMoreStoreProducts] = useState(false);
  const [addProductTabsValue, setAddProductTabsValue] = useState('all');
  const [drawerProductsData, setDrawerProductsData] = useState({
    products: [],
    next: false,
    nextLink: null,
  })
  const [allDrawerProductsData, setAllDrawerProductsData] = useState({
    products: [],
    next: false,
    nextLink: null,
  });
  const [addNewDrawerSearchTerm, setAddNewDrawerSearchTerm] = useState('');
  const [storeCollections, setStoreCollections] = useState([]);
  const [selectedDrawerProducts, setSelectedDrawerProducts] = useState([]);
  const [selectedDrawerCollections, setSelectedDrawerCollections] = useState([]);
  const [duplicateBulkOptions, setDuplicateBulkOptions] = useState([1]);
  const [promotionIdsArr, setPromotionIdsArr] = useState([1])
  const [selectedBulkEditOptions, setSelectedBulkEditOptions] = useState({});
  const [editedBulkValues, setEditedBulkValues] = useState({});
  const [shippingValuePriceError, setShippingValuePriceError] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [featuresStatus, setFeaturesStatus] = useState({});
  const [showExcludedProductsModel, setShowExcludedProductsModel] = useState(false);
  const [showExcludedTextAlert, setShowExcludedTextAlert] = useState(null);
  const navigate = useNavigate();
  const detailOnClick = useCallback((id) => navigate(`/detail/${id}/${feedId.feedId}`, { replace: true }), [navigate]);
  const handleGoToMerchantAcc = useCallback(() => { window.open(`https://merchants.google.com/mc/overview?a=${merchantAccId}`) })

  const handleBulkEditClick = () => {
    if (featuresStatus.bulkEdit) {
      setShowEditProductModal(true);
    } else {
      setShowUpgradeModel(true);
    }
  }
  const handleImportClick = () => {
    if (featuresStatus.importExport) {
      if (tabsValue == "excluded") {
        setShowExcludedProductsModel(true);
        setShowExcludedTextAlert("Cannot Import Excluded Products.");
      } else {
        setShowImportProductsModel(true);
      }
    } else {
      setShowUpgradeModel(true);
    }
  }
  const handleExportClick = () => {
    if (featuresStatus.importExport) {
      if (tabsValue == "excluded") {
        setShowExcludedProductsModel(true);
        setShowExcludedTextAlert("Cannot Export Excluded Products.");
      } else {
        setShowExportProductsModel(true);
      }
    } else {
      setShowUpgradeModel(true);
    }
  }
  const handleIncludeClick = () => {
    if (featuresStatus.includeExclude) {
      setShowIncludeModel(true);
    } else {
      setShowUpgradeModel(true);
    }
  }
  const handleExcludeClick = () => {
    if (featuresStatus.includeExclude) {
      setShowExcludeModel(true);
    } else {
      setShowUpgradeModel(true);
    }
  }
  const handleMetafieldsClick = () => {
    if (featuresStatus.metafieldsMapping) {
      setMetafieldsActive(!metafieldsActive);
    } else {
      setShowMetafieldUpgradeMessage(!showMetafieldUpgradeMessage);
    }
  }
  const clearAllSelections = () => {
    setSelectedResources([])
  }
  const fetchFeedData = (id) => {
    const data = { feedId: id }
    axioshttp.post('feed/details', data).then(res => {
      if (res.data.status == true) {
        setFeed(res.data.feed);
        setMerchantAccId(res.data.merchantId)
        if (res.data.older) {
          setFeedSyncMessage(false)
        } else {
          setFeedSyncMessage(true)
        }
      }
    }).catch(error => {
      console.log(error)
    })
  }
  const getStoreProducts = () => {
    axioshttp.get('get/store/products').then(response => {
      if (response.data.status) {
        if (response.data.results.hasOwnProperty('products')) {
          setDrawerProductsData(values => ({ ...values, ['products']: [...values.products, ...response.data.results.products] }))
          setDrawerProductsData(values => ({ ...values, ['next']: response.data.results.next }))
          setDrawerProductsData(values => ({ ...values, ['nextLink']: response.data.results.nextLink }))

          setAllDrawerProductsData(values => ({ ...values, ['products']: [...values.products, ...response.data.results.products] }))
          setAllDrawerProductsData(values => ({ ...values, ['next']: response.data.results.next }))
          setAllDrawerProductsData(values => ({ ...values, ['nextLink']: response.data.results.nextLink }))

        }
        setLoadingDrawerProducts(false);
      }
    }).catch(error => {
      console.log(error);
    })
  }
  const getStoreCollections = () => {
    axioshttp.get('get/feed/settings').then(res => {
      if (res.data.status == true) {
        setStoreCollections(res.data.collections);
        setLoadingDrawerCollections(false);
      }
    }).catch(err => {
      setLoadingDrawerCollections(false);
    })
  }
  const getMoreStoreProducts = () => {
    setLoadingMoreStoreProducts(true);
    axioshttp.get('get/store/products?page_info=' + drawerProductsData.nextLink).then(response => {
      if (response.data.status) {
        if (response.data.results.hasOwnProperty('products')) {
          setDrawerProductsData(values => ({ ...values, ['products']: [...values.products, ...response.data.results.products] }))
          setDrawerProductsData(values => ({ ...values, ['next']: response.data.results.next }))
          setDrawerProductsData(values => ({ ...values, ['nextLink']: response.data.results.nextLink }))

          setAllDrawerProductsData(values => ({ ...values, ['products']: [...values.products, ...response.data.results.products] }))
          setAllDrawerProductsData(values => ({ ...values, ['next']: response.data.results.next }))
          setAllDrawerProductsData(values => ({ ...values, ['nextLink']: response.data.results.nextLink }))

        }
        setLoadingMoreStoreProducts(false);
      }
    }).catch(error => {
      console.log(error);
    })
  }
  const handleAddNewProductsSearch = (e) => {
    if (e.target.value.length > 0) {
      setAddNewDrawerSearchTerm(e.target.value)
    } else {
      setDrawerProductsData(values => ({ ...values, ['products']: allDrawerProductsData.products }))
    }
  }
  const handleAddNewDrawerProductSearch = () => {
    if (addNewDrawerSearchTerm.length > 0) {
      setDrawerProductsData(values => ({ ...values, ['products']: allDrawerProductsData.products.filter((obj => obj.title.toLowerCase().includes(addNewDrawerSearchTerm.toLowerCase()))) }))
    }
  }
  const getAccountLevelIssues = () => {
    setLoadingAccountErrors(true);
    axioshttp.get('account/issues').then(res => {
      if (res.data.status == true) {
        setAccountErrors(res.data.accountIssues)
        setLoadingAccountErrors(false);
        if (res.data.accountIssues.length > 0) {
          setShowAccountRequirements(false);
        }
      }
    }).catch(err => {
      console.log(err)
    })
  }
  const getCounts = () => {
    axioshttp.get(`count/${feedId.feedId}`).then(res => {
      if (res.data.status == true) {
        setTotalResults(res.data.totalCount);
        setTotalApprovedResults(res.data.appCount);
        setTotalDisapprovedResults(res.data.disappCount);
        setTotalPendingResults(res.data.pendCount);
        setTotalExcludedResults(res.data.exclCount);
        setTotalAllResults(res.data.totalCount);
        setTotalAppResults(res.data.appCount);
        setTotalDisappResults(res.data.disappCount);
        setTotalPendResults(res.data.pendCount);
        setTotalExclResults(res.data.exclCount);
      }
    }).catch(error => {
      console.log(error)
    })
  }
  const getCsvDetail = () => {
    axioshttp.get(`uploadedCsvDetail`).then(res => {
      if (res.data.status == true) {
        setCsvJobDispached(true)
        setShortErrorMessage("We're currently importing your products into your store. ");
        setInvalidFieldsName(["This could take some time to complete.Import job already in progress.", "Please wait until current one is finished."])
        setshowCsvAlert(true);
        console.log(res.data);

      }
    }).catch(error => {
      console.log(error)
    })
  }
  const getAllProducts = (value) => {
    setScoreApplied(false);
    if (!value) {
      axioshttp.get(`all/products/${feedId.feedId}`).then(response => {
        if (response.data.status) {
          setCurrentPage(response.data.products.current_page - 1)
          setLastPage(response.data.products.last_page)
          setTotalResults(response.data.products.total)
          setTotalAllResults(response.data.products.total)
          setAllProducts(response.data.products.data)
          setLoadingAllProducts(false);
        } else {
          setLoadingAllProducts(false);
        }
      }).catch(error => {
        setLoadingAllProducts(false);
        console.log(error);
      })
    }
    if (value) {
      axioshttp.get(`all/products/${feedId.feedId}?search=${value}`).then(response => {
        if (response.data.status) {
          setCurrentPage(response.data.products.current_page - 1)
          setLastPage(response.data.products.last_page)
          setTotalResults(response.data.products.total)
          setAllProducts(response.data.products.data)
          setLoadingAllProducts(false);
        } else {
          setLoadingAllProducts(false);
        }
      }).catch(error => {
        setLoadingAllProducts(false);
        console.log(error);
      })
    }
  }
  const getPaginatedProducts = (page, limit) => {
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`all/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setCurrentPage(response.data.products.current_page - 1)
          setLastPage(response.data.products.last_page)
          setTotalResults(response.data.products.total)
          setAllProducts(response.data.products.data)
          setLoadingAllProducts(false);
        } else {
          setLoadingAllProducts(false);
        }
      }).catch(error => {
        setLoadingAllProducts(false);
        console.log(error);
      })
    } else {
      setScoreApplied(false);
      if (queryValue.length > 0) {
        axioshttp.get(`all/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&search=${queryValue}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setCurrentPage(response.data.products.current_page - 1)
            setLastPage(response.data.products.last_page)
            setTotalResults(response.data.products.total)
            setAllProducts(response.data.products.data)
            setLoadingAllProducts(false);
          } else {
            setLoadingAllProducts(false);
          }
        }).catch(error => {
          setLoadingAllProducts(false);
          console.log(error);
        })
      } else {
        axioshttp.get(`all/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setCurrentPage(response.data.products.current_page - 1)
            setLastPage(response.data.products.last_page)
            setTotalResults(response.data.products.total)
            setAllProducts(response.data.products.data)
            setLoadingAllProducts(false);
          } else {
            setLoadingAllProducts(false);
          }
        }).catch(error => {
          setLoadingAllProducts(false);
          console.log(error);
        })
      }
    }
  }
  const handleResultsPerPageChange = (event, value) => {
    setResultsPerPageLimit(value.props.value)
    setCurrentPage(0)
    getPaginatedProducts(0, value.props.value)
  }
  const handleCurrentPageChange = (event, value) => {
    setCurrentPage(value)
    getPaginatedProducts(value, resultsPerPageLimit)
  }
  const getApprovedProducts = (value) => {
    setScoreApplied(false);
    if (!value) {
      axioshttp.get(`approved/products/${feedId.feedId}`).then(response => {
        if (response.data.status) {
          setApprovedCurrentPage(response.data.products.current_page - 1)
          setApprovedLastPage(response.data.products.last_page)
          setTotalApprovedResults(response.data.products.total)
          setTotalAppResults(response.data.products.total)
          setAllApprovedProducts(response.data.products.data)
          setLoadingApprProducts(false);
        } else {
          setLoadingApprProducts(false);
        }
      }).catch(error => {
        setLoadingApprProducts(false);
        console.log(error);
      })
    } else {
      axioshttp.get(`approved/products/${feedId.feedId}?search=${value}`).then(response => {
        if (response.data.status) {
          setApprovedCurrentPage(response.data.products.current_page - 1)
          setApprovedLastPage(response.data.products.last_page)
          setTotalApprovedResults(response.data.products.total)
          setAllApprovedProducts(response.data.products.data)
          setLoadingApprProducts(false);
        } else {
          setLoadingApprProducts(false);
        }
      }).catch(error => {
        setLoadingApprProducts(false);
        console.log(error);
      })
    }
  }
  const getApprovedPaginatedProducts = (page, limit) => {
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`approved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setApprovedCurrentPage(response.data.products.current_page - 1)
          setApprovedLastPage(response.data.products.last_page)
          setTotalApprovedResults(response.data.products.total)
          setAllApprovedProducts(response.data.products.data)
          setLoadingApprProducts(false);
        } else {
          setLoadingApprProducts(false);
        }
      }).catch(error => {
        setLoadingApprProducts(false);
        console.log(error);
      })
    } else {
      setScoreApplied(false);
      if (queryValue.length > 0) {
        axioshttp.get(`approved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&search=${queryValue}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setApprovedCurrentPage(response.data.products.current_page - 1)
            setApprovedLastPage(response.data.products.last_page)
            setTotalApprovedResults(response.data.products.total)
            setAllApprovedProducts(response.data.products.data)
            setLoadingApprProducts(false);
          } else {
            setLoadingApprProducts(false);
          }
        }).catch(error => {
          setLoadingApprProducts(false);
          console.log(error);
        })
      } else {
        axioshttp.get(`approved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setApprovedCurrentPage(response.data.products.current_page - 1)
            setApprovedLastPage(response.data.products.last_page)
            setTotalApprovedResults(response.data.products.total)
            setAllApprovedProducts(response.data.products.data)
            setLoadingApprProducts(false);
          } else {
            setLoadingApprProducts(false);
          }
        }).catch(error => {
          setLoadingApprProducts(false);
          console.log(error);
        })
      }
    }
  }
  const handleAppResultsPerPageChange = (event, value) => {
    setApprovedResultPerPageLimit(value.props.value)
    setApprovedCurrentPage(0)
    getApprovedPaginatedProducts(0, value.props.value)
  }
  const handleAppCurrentPageChange = (event, value) => {
    setApprovedCurrentPage(value)
    getApprovedPaginatedProducts(value, approvedResultsPerPageLimit)
  }
  const getDisapprovedProducts = (value) => {
    setScoreApplied(false);
    if (!value) {
      axioshttp.get(`disapproved/products/${feedId.feedId}`).then(response => {
        if (response.data.status) {
          setDisapprovedCurrentPage(response.data.products.current_page - 1)
          setDisapprovedLastPage(response.data.products.last_page)
          setTotalDisapprovedResults(response.data.products.total)
          setTotalDisappResults(response.data.products.total)
          setAllDisapprovedProducts(response.data.products.data)
          setLoadingDisappProducts(false);
        } else {
          setLoadingDisappProducts(false);
        }
      }).catch(error => {
        setLoadingDisappProducts(false);
        console.log(error);
      })
    } else {
      axioshttp.get(`disapproved/products/${feedId.feedId}?search=${value}`).then(response => {
        if (response.data.status) {
          setDisapprovedCurrentPage(response.data.products.current_page - 1)
          setDisapprovedLastPage(response.data.products.last_page)
          setTotalDisapprovedResults(response.data.products.total)
          setAllDisapprovedProducts(response.data.products.data)
          setLoadingDisappProducts(false);
        } else {
          setLoadingDisappProducts(false);
        }
      }).catch(error => {
        setLoadingDisappProducts(false);
        console.log(error);
      })
    }
  }
  const getDisapprovedPaginatedProducts = (page, limit) => {
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`disapproved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setDisapprovedCurrentPage(response.data.products.current_page - 1)
          setDisapprovedLastPage(response.data.products.last_page)
          setTotalDisapprovedResults(response.data.products.total)
          setAllDisapprovedProducts(response.data.products.data)
          setLoadingDisappProducts(false);
        } else {
          setLoadingDisappProducts(false);
        }
      }).catch(error => {
        setLoadingDisappProducts(false);
        console.log(error);
      })
    } else {
      setScoreApplied(false);
      if (queryValue.length <= 0) {
        axioshttp.get(`disapproved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setDisapprovedCurrentPage(response.data.products.current_page - 1)
            setDisapprovedLastPage(response.data.products.last_page)
            setTotalDisapprovedResults(response.data.products.total)
            setAllDisapprovedProducts(response.data.products.data)
            setLoadingDisappProducts(false);
          } else {
            setLoadingDisappProducts(false);
          }
        }).catch(error => {
          setLoadingDisappProducts(false);
          console.log(error);
        })
      } else {
        axioshttp.get(`disapproved/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&search=${queryValue}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setDisapprovedCurrentPage(response.data.products.current_page - 1)
            setDisapprovedLastPage(response.data.products.last_page)
            setTotalDisapprovedResults(response.data.products.total)
            setAllDisapprovedProducts(response.data.products.data)
            setLoadingDisappProducts(false);
          } else {
            setLoadingDisappProducts(false);
          }
        }).catch(error => {
          setLoadingDisappProducts(false);
          console.log(error);
        })
      }
    }
  }
  const handleDisappResultsPerPageChange = (event, value) => {
    setDisapprovedResultPerPageLimit(value.props.value)
    setDisapprovedCurrentPage(0)
    getDisapprovedPaginatedProducts(0, value.props.value)
  }
  const handleDisappCurrentPageChange = (event, value) => {
    setDisapprovedCurrentPage(value)
    getDisapprovedPaginatedProducts(value, disapprovedResultsPerPageLimit)
  }
  const getPendingProducts = (value) => {
    setScoreApplied(false);
    if (!value) {
      axioshttp.get(`pending/products/${feedId.feedId}`).then(response => {
        if (response.data.status) {
          setPendingCurrentPage(response.data.products.current_page - 1)
          setPendingLastPage(response.data.products.last_page)
          setTotalPendingResults(response.data.products.total)
          setTotalPendResults(response.data.products.total)
          setAllPendingProducts(response.data.products.data)
          setLoadingPendProducts(false);
        } else {
          setLoadingPendProducts(false);
        }
      }).catch(error => {
        setLoadingPendProducts(false);
        console.log(error);
      })
    } else {
      axioshttp.get(`pending/products/${feedId.feedId}?search=${value}`).then(response => {
        if (response.data.status) {
          setPendingCurrentPage(response.data.products.current_page - 1)
          setPendingLastPage(response.data.products.last_page)
          setTotalPendingResults(response.data.products.total)
          setAllPendingProducts(response.data.products.data)
          setLoadingPendProducts(false);
        } else {
          setLoadingPendProducts(false);
        }
      }).catch(error => {
        setLoadingPendProducts(false);
        console.log(error);
      })
    }
  }
  const getPendingPaginatedProducts = (page, limit) => {
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`pending/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setPendingCurrentPage(response.data.products.current_page - 1)
          setPendingLastPage(response.data.products.last_page)
          setTotalPendingResults(response.data.products.total)
          setAllPendingProducts(response.data.products.data)
          setLoadingPendProducts(false);
        } else {
          setLoadingPendProducts(false);
        }
      }).catch(error => {
        setLoadingPendProducts(false);
        console.log(error);
      })
    } else {
      setScoreApplied(false);
      if (queryValue.length <= 0) {
        axioshttp.get(`pending/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setPendingCurrentPage(response.data.products.current_page - 1)
            setPendingLastPage(response.data.products.last_page)
            setTotalPendingResults(response.data.products.total)
            setAllPendingProducts(response.data.products.data)
            setLoadingPendProducts(false);
          } else {
            setLoadingPendProducts(false);
          }
        }).catch(error => {
          setLoadingPendProducts(false);
          console.log(error);
        })
      } else {
        axioshttp.get(`pending/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&search=${queryValue}`).then(response => {
          if (response.data.status) {
            clearAllSelections();
            setPendingCurrentPage(response.data.products.current_page - 1)
            setPendingLastPage(response.data.products.last_page)
            setTotalPendingResults(response.data.products.total)
            setAllPendingProducts(response.data.products.data)
            setLoadingPendProducts(false);
          } else {
            setLoadingPendProducts(false);
          }
        }).catch(error => {
          setLoadingPendProducts(false);
          console.log(error);
        })
      }
    }
  }
  const handlePendResultsPerPageChange = (event, value) => {
    setPendingResultPerPageLimit(value.props.value)
    setPendingCurrentPage(0)
    getPendingPaginatedProducts(0, value.props.value)
  }
  const handlePendCurrentPageChange = (event, value) => {
    setPendingCurrentPage(value)
    getPendingPaginatedProducts(value, pendingResultsPerPageLimit)
  }
  const getExcludedProducts = (value) => {
    if (!value) {
      axioshttp.get(`excluded/products/${feedId.feedId}`).then(response => {
        if (response.data.status) {
          setExcludedCurrentPage(response.data.products.current_page - 1)
          setExcludedLastPage(response.data.products.last_page)
          setTotalExcludedResults(response.data.products.total)
          setTotalExclResults(response.data.products.total)
          setAllExcludedProducts(response.data.products.data)
          setLoadingExclProducts(false);
        } else {
          setLoadingExclProducts(false);
        }
      }).catch(error => {
        setLoadingExclProducts(false);
        console.log(error);
      })
    } else {
      axioshttp.get(`excluded/products/${feedId.feedId}?search=${value}`).then(response => {
        if (response.data.status) {
          setExcludedCurrentPage(response.data.products.current_page - 1)
          setExcludedLastPage(response.data.products.last_page)
          setTotalExcludedResults(response.data.products.total)
          setAllExcludedProducts(response.data.products.data)
          setLoadingExclProducts(false);
        } else {
          setLoadingExclProducts(false);
        }
      }).catch(error => {
        setLoadingExclProducts(false);
        console.log(error);
      })
    }
  }
  const getExcludedPaginatedProducts = (page, limit) => {
    if (queryValue.length <= 0) {
      axioshttp.get(`excluded/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setExcludedCurrentPage(response.data.products.current_page - 1)
          setExcludedLastPage(response.data.products.last_page)
          setTotalExcludedResults(response.data.products.total)
          setAllExcludedProducts(response.data.products.data)
          setLoadingExclProducts(false);
        } else {
          setLoadingExclProducts(false);
        }
      }).catch(error => {
        setLoadingExclProducts(false);
        console.log(error);
      })
    } else {
      axioshttp.get(`excluded/products/${feedId.feedId}?page=${+page + +1}&limit=${limit}&search=${queryValue}`).then(response => {
        if (response.data.status) {
          clearAllSelections();
          setExcludedCurrentPage(response.data.products.current_page - 1)
          setExcludedLastPage(response.data.products.last_page)
          setTotalExcludedResults(response.data.products.total)
          setAllExcludedProducts(response.data.products.data)
          setLoadingExclProducts(false);
        } else {
          setLoadingExclProducts(false);
        }
      }).catch(error => {
        setLoadingExclProducts(false);
        console.log(error);
      })
    }
  }
  const handleExclResultsPerPageChange = (event, value) => {
    setExcludedResultPerPageLimit(value.props.value)
    setExcludedCurrentPage(0)
    getExcludedPaginatedProducts(0, value.props.value)
  }
  const handleExclCurrentPageChange = (event, value) => {
    setExcludedCurrentPage(value)
    getExcludedPaginatedProducts(value, excludedResultsPerPageLimit)
  }
  const handleTabsChange = (event, value) => {
    clearAllSelections();
    setTabsValue(value);
    // const getFunction = {
    //   "all" : () => getAllProducts(),
    //   "approved" : () => getApprovedProducts(),
    //   "disapproved" : () => getApprovedProducts(),
    //   "pending" : () => getApprovedProducts(),
    //   "excluded" : () => getApprovedProducts(),
    // }
    // if(getFunction.hasOwnProperty(value))
    // {
    //   getFunction[value];
    // }
    if (value == 'approved') {
      getApprovedProducts();
    } else if (value == 'disapproved') {
      getDisapprovedProducts();
    } else if (value == 'pending') {
      getPendingProducts();
    } else if (value == 'excluded') {
      getExcludedProducts();
    } else {
      getAllProducts();
    }
  }
  const handleDefaultColumnsChange = (e) => {
    setCheckedColumns(values => ({ ...values, [e.target.name]: e.target.checked }));
  }
  const handleProductSelect = (e) => {
    if (e.target.checked) {
      setSelectedResources(values => ([...values, parseInt(e.target.name)]))
    }
    else {
      const index = selectedResources.indexOf(parseInt(e.target.name));
      if (index > -1) {
        setSelectedResources((current) => current.filter((value, ind) => ind != index))
      }
    }
  }
  const handleProductSelectAll = (e) => {
    if (e.target.checked) {
      if (tabsValue == "all") {
        setSelectedResources(allProducts.map((value, index) => {
          return value.id
        }))
      } else if (tabsValue == "approved") {
        setSelectedResources(allApprovedProducts.map((value, index) => {
          return value.id
        }))
      } else if (tabsValue == "disapproved") {
        setSelectedResources(allDisapprovedProducts.map((value, index) => {
          return value.id
        }))
      } else if (tabsValue == "pending") {
        setSelectedResources(allPendingProducts.map((value, index) => {
          return value.id
        }))
      } else if (tabsValue == "excluded") {
        setSelectedResources(allExcludedProducts.map((value, index) => {
          return value.id
        }))
      }
    }
    else {
      clearAllSelections();
    }
  }
  const handleSelectAllProducts = () => {
    setSelectedResources("all");
    // axioshttp.get(`getData/${feedId.feedId}/${tabsValue}`).then(response => {
    //   console.log(response);
    //   if(response.data.status){
    //     setSelectedResources(response.data.allProducts);
    //   }
    // }).catch(error => {
    //   console.log(error);
    // })
  }
  const handleShopifySyncInputs = (e) => {
    setSyncFromShopifyInputs(values => ({ ...values, [e.target.name]: e.target.checked }))
  }
  const handleMetafieldsResourceChange = (event, value) => {
    setLoadingMetafields(true);
    setMetafieldsValues([''])
    setMetafieldsResourceValue(value)
    setSyncFromShopifyInputs(values => ({ ...values, ['metafieldResource']: value }))
    setSyncFromShopifyInputs(values => ({ ...values, ['metafields']: [] }))
    if (metafieldsActive) {
      if (value != 'none') {
        const metafieldsData = { resourceType: value }
        axioshttp.post('get/metafields', metafieldsData).then(response => {
          if (response.data.status) {
            setSelectedResourceMetafields(response.data.metafields)
            setLoadingMetafields(false);
          }
          else {
            setLoadingMetafields(false)
          }
        }).catch(error => {
          setLoadingMetafields(false)
          console.log(error);
        })
      }
    }
  }
  const handleMetafieldsInput = (e) => {
    console.log(e.target.id, e.target.name, e.target.value)
    const newIndex = parseInt(e.target.name)
    if (e.target.id == 'metafields') {
      setSyncFromShopifyInputs(values => ({
        ...values,
        ['metafields']: [
          ...values.metafields.slice(0, newIndex),
          { ...values.metafields[newIndex], key: e.target.value },
          ...values.metafields.slice(newIndex + 1)
        ]
      }))
    }
    else {
      setSyncFromShopifyInputs(values => ({
        ...values,
        ['metafields']: [
          ...values.metafields.slice(0, newIndex),
          { ...values.metafields[newIndex], target: e.target.value },
          ...values.metafields.slice(newIndex + 1)
        ]
      }))
    }
  }
  const handleSyncShopifyCancel = () => {
    setShowSyncFromShopifyModel(false);
    setSyncFromShopifyInputs({
      metafieldResource: 'none',
      metafields: []
    });
    setMetafieldsActive(false);
    setMetafieldsResourceValue('none');
    setMetafieldsValues(['']);
    setShowMetafieldUpgradeMessage(false);
    clearAllSelections();
  }
  const syncDataFromShopify = () => {
    const { title, description, productImages, productPrice, seoTitle, seoDescription, variantImage, pAdditionalImages, metafields } = syncFromShopifyInputs;
    if (title || description || productImages || productPrice || seoTitle || seoDescription || variantImage || pAdditionalImages || metafields.length > 0) {
      setSyncRequestProcessing(true);
      setSyncFromShopifyErrors([]);
      var data = { ids: selectedResources, feedId: feedId.feedId, inputData: syncFromShopifyInputs, tabValue: tabsValue }
      if (scoreApplied) {
        const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
        data = { ids: selectedResources, feedId: feedId.feedId, inputData: syncFromShopifyInputs, tabValue: tabsValue, scoreRange: scoreRange }
      } else {
        if (queryValue.length > 0) {
          data = { ids: selectedResources, feedId: feedId.feedId, inputData: syncFromShopifyInputs, tabValue: tabsValue, search: queryValue }
        } else {
          data = { ids: selectedResources, feedId: feedId.feedId, inputData: syncFromShopifyInputs, tabValue: tabsValue }
        }
      }
      axioshttp.post('sync/shopify', data).then(response => {
        if (response.data.status) {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleSyncShopifyCancel();
          setSyncRequestProcessing(false);
        }
        else {
          setSyncFromShopifyErrors([response.data.message])
          setSyncRequestProcessing(false);
        }
      }).catch(error => {
        setSyncRequestProcessing(false);
        if (error.response.data.hasOwnProperty('errors')) {
          var allErrors = error.response.data.errors;
          for (const error in allErrors) {
            setSyncFromShopifyErrors(values => ([...values, allErrors[error][0]]))
          }
        }
      })
    }
    else {
      setSyncFromShopifyErrors(['Please Select A Field To Sync']);
    }
  }
  const handleGoogleSyncCancel = () => {
    setShowGoogleSyncModel(false);
    clearAllSelections();
  }
  const dispatchSyncStatusJob = () => {
    setGoogleSyncRequestProcessing(true);
    const data = { feedId: feedId.feedId };
    axioshttp.post('sync/google', data).then(response => {
      if (response.data.status == true) {
        setToastMessage(response.data.message);
        setShowToast(true);
        handleGoogleSyncCancel();
        setGoogleSyncRequestProcessing(false);
      } else {
        setToastMessage(response.data.message);
        setShowToast(true);
        handleGoogleSyncCancel();
        setGoogleSyncRequestProcessing(false);
      }
    }).catch(error => {
      setToastMessage('Something Went Wrong');
      setShowToast(true);
      handleGoogleSyncCancel();
      setGoogleSyncRequestProcessing(false);
    });
  }
  const handleIncludeCancel = () => {
    setShowIncludeModel(false);
    clearAllSelections();
  }
  const includeProducts = () => {
    setIncludeRequestProcessing(true);
    var productIds = { ids: selectedResources, feedid: feedId.feedId }
    if (queryValue.length > 0) {
      productIds = { ids: selectedResources, feedid: feedId.feedId, search: queryValue }
    } else {
      productIds = { ids: selectedResources, feedid: feedId.feedId }
    }
    axioshttp.post('include/products', productIds).then(response => {
      if (response.data.status == true) {
        setToastMessage(response.data.message);
        setShowToast(true);
        handleIncludeCancel();
        setIncludeRequestProcessing(false);
      } else {
        if (response.data.hasOwnProperty('limit')) {
          handleIncludeCancel();
          setShowUpgradeModel(true);
          setIncludeRequestProcessing(false);
        } else {
          handleIncludeCancel();
          setToastMessage(response.data.message);
          setShowToast(true);
          setIncludeRequestProcessing(false);
        }
      }
    }).catch(error => {
      setToastMessage('Something Went Wrong');
      setShowToast(true);
      handleIncludeCancel();
      setIncludeRequestProcessing(false);
    })
  }
  const handleExcludeCancel = () => {
    setShowExcludeModel(false);
    clearAllSelections();
  }
  const excludeProducts = () => {
    setExcludeRequestProcessing(true);
    var productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue }
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue, scoreRange: scoreRange }
    } else {
      if (queryValue.length > 0) {
        productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue, search: queryValue }
      } else {
        productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue }
      }
    }
    axioshttp.post('exclude/products', productIds).then(response => {
      if (response.data.status == true) {
        setToastMessage(response.data.message);
        setShowToast(true);
        handleExcludeCancel();
        setExcludeRequestProcessing(false);
      } else {
        setToastMessage(response.data.message);
        setShowToast(true);
        handleExcludeCancel();
        setExcludeRequestProcessing(false);
      }
    }).catch(error => {
      setToastMessage('Something Went Wrong');
      setShowToast(true);
      handleExcludeCancel();
      setExcludeRequestProcessing(false);
    })
  }
  const handleDeleteCancel = () => {
    setShowBulkDeleteModel(false);
    clearAllSelections();
  }
  const DeleteBulkProducts = () => {
    setDeleteRequestProcessing(true);
    var productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue }
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue, scoreRange: scoreRange }
    } else {
      if (queryValue.length > 0) {
        productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue, search: queryValue }
      } else {
        productIds = { ids: selectedResources, feedid: feedId.feedId, tabValue: tabsValue }
      }
    }
    if (tabsValue == 'excluded') {
      axioshttp.post('delete/bulk/excluded', productIds).then(response => {
        if (response.data.status == true) {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleDeleteCancel();
          setDeleteRequestProcessing(false);
        } else {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleDeleteCancel();
          setDeleteRequestProcessing(false);
        }
      }).catch(error => {
        setToastMessage('Something Went Wrong');
        setShowToast(true);
        handleDeleteCancel();
        setDeleteRequestProcessing(false);
      })
    } else {
      axioshttp.post('delete/bulk', productIds).then(response => {
        if (response.data.status == true) {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleDeleteCancel();
          setDeleteRequestProcessing(false);
        } else {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleDeleteCancel();
          setDeleteRequestProcessing(false);
        }
      }).catch(error => {
        setToastMessage('Something Went Wrong');
        setShowToast(true);
        handleDeleteCancel();
        setDeleteRequestProcessing(false);
      })
    }
  }
  const handleSingleDeleteCancel = () => {
    setShowSingleDeleteModel(false);
    setSingleDeleteAbleProduct(null);
  }
  const DeleteSingleProduct = () => {
    const productId = { id: singleDeleteAbleProduct }
    if (tabsValue == 'excluded') {
      axioshttp.post('delete/single/excluded', productId).then(response => {
        if (response.data.status == true) {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleSingleDeleteCancel();
        } else {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleSingleDeleteCancel();
        }
      }).catch(error => {
        setToastMessage('Something Went Wrong');
        setShowToast(true);
        handleSingleDeleteCancel();
      })
    } else {
      axioshttp.post('delete/single', productId).then(response => {
        if (response.data.status == true) {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleSingleDeleteCancel();
        } else {
          setToastMessage(response.data.message);
          setShowToast(true);
          handleSingleDeleteCancel();
        }
      }).catch(error => {
        setToastMessage('Something Went Wrong');
        setShowToast(true);
        handleSingleDeleteCancel();
      })
    }
  }
  const handleAddProductDrawer = () => {
    if (drawerProductsData.products.length <= 0) {
      getStoreProducts();
    }
    if (storeCollections.length <= 0) {
      getStoreCollections()
    }
    setShowAddProductDrawer(true);
  }
  const handleAddProductTabs = (event, value) => {
    setSelectedDrawerCollections([]);
    setSelectedDrawerProducts([]);
    setAddProductTabsValue(value);
  }
  const clearDrawerProductSelections = () => {
    setSelectedDrawerProducts([]);
  }
  const handleDrawerProductsSelection = (e) => {
    if (e.target.checked) {
      var allVariantIds = drawerProductsData.products
        .filter(value => value.id === parseInt(e.target.name))
        .map(value => value.variants.map(element => element.id))
        .flat();
      setSelectedDrawerProducts(values => ({ ...values, [parseInt(e.target.name)]: allVariantIds }))
    }
    else {
      const target = parseInt(e.target.name);
      if (target in selectedDrawerProducts) {
        delete selectedDrawerProducts[target];
        const remaining = Object.entries(selectedDrawerProducts).reduce((acc, [key, value]) => {
          acc[key] = value;
          return acc;
        }, {});
        setSelectedDrawerProducts(remaining)
      }
    }
  }
  const handleDrawerProductVariantSelection = (e) => {
    if (e.target.checked) {
      var productId = parseInt(e.target.id);
      setSelectedDrawerProducts(values => {
        return {
          ...values,
          [productId]: [
            ...(values[productId] || []),
            parseInt(e.target.name)
          ]
        };
      });
    }
    else {
      var newTarget = parseInt(e.target.id);
      if (newTarget in selectedDrawerProducts) {
        const index = selectedDrawerProducts[newTarget].indexOf(parseInt(e.target.name));
        if (index > -1) {
          var newArray = selectedDrawerProducts[newTarget].filter((value, ind) => ind != index)
          if (newArray.length > 0) {
            setSelectedDrawerProducts(values => ({ ...values, [newTarget]: newArray }))
          }
          else {
            delete selectedDrawerProducts[newTarget];
            const remaining = Object.entries(selectedDrawerProducts).reduce((acc, [key, value]) => {
              acc[key] = value;
              return acc;
            }, {});
            setSelectedDrawerProducts(remaining)
          }
        }
      }
    }
  }
  const handleDrawerProductsSelectionAll = (e) => {
    if (e.target.checked) {
      drawerProductsData.products.forEach((value, index) => {
        setSelectedDrawerProducts(values => ({ ...values, [value.id]: value.variants.map((element) => element.id) }))
      })
    }
    else {
      clearDrawerProductSelections();
    }
  }
  const handleDrawerCollectionSelection = (e) => {
    if (e.target.checked) {
      setSelectedDrawerCollections(values => ([...values, parseInt(e.target.name)]))
    } else {
      setSelectedDrawerCollections(values => values.filter((element) => element != parseInt(e.target.name)))
    }
  }
  const handleAddNewProductsDrawerCancel = () => {
    setShowAddProductDrawer(false);
    setAddProductTabsValue('all');
    setSelectedDrawerProducts([]);
    setSelectedDrawerCollections([]);
  }
  const handleAddNewProducts = () => {
    if (addProductTabsValue == 'all') {
      var addProductsData = { id: feedId.feedId, whichProducts: addProductTabsValue, resources: selectedDrawerProducts }
    }
    else {
      var addProductsData = { id: feedId.feedId, whichProducts: addProductTabsValue, resources: selectedDrawerCollections }
    }
    axioshttp.post('add/products', addProductsData).then(response => {
      if (response.data.status) {
        handleAddNewProductsDrawerCancel();
        setTimeout(() => {
          setToastMessage(response.data.message);
          setShowToast(true);
        }, 300);
      } else {
        if (response.data.hasOwnProperty('limit')) {
          handleAddNewProductsDrawerCancel();
          setShowUpgradeModel(true);
        } else {
          handleAddNewProductsDrawerCancel();
          setTimeout(() => {
            setToastMessage(response.data.message);
            setShowToast(true);
          }, 300);
        }
      }
    }).catch(error => {
      handleAddNewProductsDrawerCancel();
      setTimeout(() => {
        setToastMessage("Something went wrong");
        setShowToast(true);
      }, 300);
      console.log(error);
    })
  }
  const handleBulkEditCancel = () => {
    setShowEditProductModal(false);
    setDuplicateBulkOptions([1]);
    setPromotionIdsArr([1]);
    setSelectedBulkEditOptions({});
    setEditedBulkValues({});
    clearAllSelections();
  }
  const handleBulkEditOptionsChange = (event) => {
    if (Object.values(selectedBulkEditOptions).includes(event.target.value)) {
      const foundKey = Object.keys(selectedBulkEditOptions).find(key => selectedBulkEditOptions[key] === event.target.value);
      setDuplicateBulkOptions((current) => current.filter((val, ind) => val != foundKey));
      delete selectedBulkEditOptions[foundKey]
    }
    setSelectedBulkEditOptions(values => ({ ...values, [parseInt(event.target.name)]: event.target.value }))
  }
  const handlePromotionIdsChange = (e) => {
    setEditedBulkValues(values => ({ ...values, ['promotionIds']: { ...values.promotionIds, [parseInt(e.target.name)]: e.target.value } }))
  }
  const handleBulkEditValueChange = (event) => {
    setEditedBulkValues(values => ({ ...values, [event.target.name]: event.target.value }))
  }
  const handleBulkEditApply = () => {
    setEditRequestProcessing(true);
    const select = (arr, obj) => Object.values(arr).reduce((r, e) => Object.assign(r, obj[e] ? { [e]: obj[e] } : null), {});
    const output = select(selectedBulkEditOptions, editedBulkValues);
    if (output.hasOwnProperty('shipping')) {
      if (Object.keys(output.shipping).length > 0) {
        if (!output.shipping.hasOwnProperty('price')) {
          setShippingValuePriceError(true);
          setEditRequestProcessing(false);
          return
        } else {
          setEditRequestProcessing(true);
          setShippingValuePriceError(false);
        }
      } else {
        setEditRequestProcessing(true);
        setShippingValuePriceError(false);
      }
    }
    var data = { ids: selectedResources, feedId: feedId.feedId, bulkFields: output, tabValue: tabsValue }
    if (scoreApplied) {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      data = { ids: selectedResources, feedId: feedId.feedId, bulkFields: output, tabValue: tabsValue, scoreRange: scoreRange }
    } else {
      if (queryValue.length > 0) {
        data = { ids: selectedResources, feedId: feedId.feedId, bulkFields: output, tabValue: tabsValue, search: queryValue }
      } else {
        data = { ids: selectedResources, feedId: feedId.feedId, bulkFields: output, tabValue: tabsValue }
      }
    }
    axioshttp.post('bulk/edit', data).then(response => {
      setToastMessage(response.data.message);
      setShowToast(true);
      handleBulkEditCancel();
      setEditRequestProcessing(false);
    }).catch(error => {
      setToastMessage("Something went wrong");
      setShowToast(true);
      handleBulkEditCancel();
      setEditRequestProcessing(false);
    })
  }
  const handleUpgradeModelCancel = () => {
    setShowUpgradeModel(false);
  }
  const fetchFeaturesStatus = () => {
    axioshttp.get('get/features/status').then(response => {
      if (response.data.status == true) {
        setFeaturesStatus(response.data.features)
      }
    }).catch(error => {
      console.log(error);
    })
  }
  const handleUpgradeNow = useCallback(() => navigate(`/pricing`, { replace: true }), [navigate]);
  useEffect(() => {
    if (!metafieldsActive) {
      setMetafieldsValues([''])
      setMetafieldsResourceValue('none')
      setSyncFromShopifyInputs(values => ({ ...values, ['metafieldResource']: 'none' }))
      setSyncFromShopifyInputs(values => ({ ...values, ['metafields']: [] }))
    }
  }, [metafieldsActive])
  useEffect(() => {
    ReactGA.send({ hitType: "pageview", page: "/products", title: "Products" });
    fetchFeaturesStatus();
    getCsvDetail();
    getCounts();
    getAllProducts();
    fetchFeedData(feedId.feedId);
    getAccountLevelIssues();
    applyfilterProduct();
    if (document.getElementById('productCategories')) {
      var categories = document.getElementById('productCategories').getAttribute('data');
      categories = JSON.parse(categories);
      setProductCategories(categories);
    }
  }, [])

  const allProductsRows = allProducts.length > 0 ? allProducts.map((value, index) => (
    <tr className='hover:bg-gray-100 cursor-pointer w-screen' key={index}>
      <td className="py-1 pl-4">
        <div className="flex items-center h-5">
          <Checkbox
            name={value.id}
            onChange={handleProductSelect}
            checked={selectedResources != "all" ? (selectedResources.indexOf(value.id) !== -1 ? true : false) : true}
            style={{ color: '#008060' }}
          />
        </div>
      </td>
      <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm font-medium text-gray-800 whitespace-nowrap">
        <div className="flex items-center">
          <img className='w-10 mr-2' src={value.image} />
          <p className="text-sm font-medium text-gray-800">{value.title}</p>
        </div>

      </td>
      {checkedColumns.id && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.variantId}
      </td>}
      {checkedColumns.score && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm whitespace-nowrap">
        <div class="text-xs px-3 py-[3px] bg-teal-100 text-black rounded-full">{value.score}</div>
      </td>}
      {checkedColumns.googleStatus && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-black whitespace-nowrap">
        {value.status && value.status == "Approved" ? <div className="text-xs text-center px-3 py-3 bg-green-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Disapproved" ? <div className="text-xs text-center px-3 py-3 bg-pink-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Pending" ? <div className="text-xs text-center px-3 py-3 bg-yellow-200 rounded-full">{value.status}</div> : null}
      </td>}
      {checkedColumns.errorsFromMerchantCenter && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-[#d72c0d] whitespace-nowrap">
        {(value.merchantErrors != '' && value.merchantErrors != null) && JSON.parse(value.merchantErrors).map((val, index) => (
          <div>
            <ErrorIcon style={{ color: '#d72c0d', fontSize: '22px', marginRight: '5px' }} />{val}
          </div>
        ))}
      </td>}
      {checkedColumns.googleProductCategory && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.category && value.category.name ? value.category.name : ''}
      </td>}
      {checkedColumns.ageGroup && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.ageGroup}
      </td>}
      {checkedColumns.gender && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.gender}
      </td>}
      {checkedColumns.productCondition && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productCondition}
      </td>}
      {checkedColumns.brand && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.brand}
      </td>}
      {checkedColumns.productType && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productTypes}
      </td>}
      {checkedColumns.promotionId && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.edited_product != null ? value.edited_product.promotionIds : ''}
      </td>}
      {checkedColumns.customLabel0 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel0 : ''}
      </td>}
      {checkedColumns.customLabel1 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel1 : ''}
      </td>}
      {checkedColumns.customLabel2 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel2 : ''}
      </td>}
      {checkedColumns.customLabel3 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel3 : ''}
      </td>}
      {checkedColumns.customLabel4 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel4 : ''}
      </td>}
      <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        <div class="rounded-md" role="group">
          <button onClick={() => { detailOnClick(value.id) }} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-white text-black">
            <EditIcon style={{ fontSize: '20px', marginRight: '2px', color: '#5c5f62' }} />
            Edit
          </button>
          <button onClick={() => { setShowSingleDeleteModel(!showSingleDeleteModel); setSingleDeleteAbleProduct(value.id) }}
            type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-white text-black">
            <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#5c5f62' }} />
            Delete
          </button>
        </div>
      </td>
    </tr>
  )) : <tr className='hover:bg-gray-100 cursor-pointer w-screen'>
    <td className="py-1 pl-4">No Record Found</td>
  </tr>;

  const allApprovedProductRows = allApprovedProducts.length > 0 ? allApprovedProducts.map((value, index) => (
    <tr className='hover:bg-gray-100 cursor-pointer w-screen' key={index}>
      <td className="py-1 pl-4">
        <div className="flex items-center h-5">
          <Checkbox
            name={value.id}
            onChange={handleProductSelect}
            checked={selectedResources != "all" ? (selectedResources.indexOf(value.id) !== -1 ? true : false) : true}
            style={{ color: '#008060' }}
          />
        </div>
      </td>
      <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm font-medium text-gray-800 whitespace-nowrap">
        <div className="flex items-center">
          <img className='w-10 mr-2' src={value.image} />
          <p className="text-sm font-medium text-gray-800">{value.title}</p>
        </div>

      </td>
      {checkedColumns.id && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.variantId}
      </td>}
      {checkedColumns.score && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm whitespace-nowrap">
        <div class="text-xs px-3 py-[3px] bg-teal-100 text-black rounded-full">{value.score}</div>
      </td>}
      {checkedColumns.googleStatus && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-black whitespace-nowrap">
        {value.status && value.status == "Approved" ? <div className="text-xs text-center px-3 py-3 bg-green-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Disapproved" ? <div className="text-xs text-center px-3 py-3 bg-pink-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Pending" ? <div className="text-xs text-center px-3 py-3 bg-yellow-200 rounded-full">{value.status}</div> : null}
      </td>}
      {checkedColumns.errorsFromMerchantCenter && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-[#d72c0d] whitespace-nowrap">
        {(value.merchantErrors != '' && value.merchantErrors != null) && JSON.parse(value.merchantErrors).map((val, index) => (
          <div>
            <ErrorIcon style={{ color: '#d72c0d', fontSize: '22px', marginRight: '5px' }} />{val}
          </div>
        ))}
      </td>}
      {checkedColumns.googleProductCategory && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.category && value.category.name ? value.category.name : ''}
      </td>}
      {checkedColumns.ageGroup && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.ageGroup}
      </td>}
      {checkedColumns.gender && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.gender}
      </td>}
      {checkedColumns.productCondition && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productCondition}
      </td>}
      {checkedColumns.brand && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.brand}
      </td>}
      {checkedColumns.productType && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productTypes}
      </td>}
      {checkedColumns.promotionId && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.edited_product != null ? value.edited_product.promotionIds : ''}
      </td>}
      {checkedColumns.customLabel0 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel0 : ''}
      </td>}
      {checkedColumns.customLabel1 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel1 : ''}
      </td>}
      {checkedColumns.customLabel2 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel2 : ''}
      </td>}
      {checkedColumns.customLabel3 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel3 : ''}
      </td>}
      {checkedColumns.customLabel4 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel4 : ''}
      </td>}
      <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        <div class="rounded-md" role="group">
          <button onClick={() => { detailOnClick(value.id) }} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-white text-black">
            <EditIcon style={{ fontSize: '20px', marginRight: '2px', color: '#5c5f62' }} />
            Edit
          </button>
          <button onClick={() => { setShowSingleDeleteModel(!showSingleDeleteModel); setSingleDeleteAbleProduct(value.id) }}
            type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-white text-black">
            <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#5c5f62' }} />
            Delete
          </button>
        </div>
      </td>
    </tr>
  )) : <tr className='hover:bg-gray-100 cursor-pointer w-screen'>
    <td className="py-1 pl-4">No Record Found</td>
  </tr>;

  const allDisapprovedProductRows = allDisapprovedProducts.length > 0 ? allDisapprovedProducts.map((value, index) => (
    <tr className='hover:bg-gray-100 cursor-pointer w-screen' key={index}>
      <td className="py-1 pl-4">
        <div className="flex items-center h-5">
          <Checkbox
            name={value.id}
            onChange={handleProductSelect}
            checked={selectedResources != "all" ? (selectedResources.indexOf(value.id) !== -1 ? true : false) : true}
            style={{ color: '#008060' }}
          />
        </div>
      </td>
      <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm font-medium text-gray-800 whitespace-nowrap">
        <div className="flex items-center">
          <img className='w-10 mr-2' src={value.image} />
          <p className="text-sm font-medium text-gray-800">{value.title}</p>
        </div>

      </td>
      {checkedColumns.id && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.variantId}
      </td>}
      {checkedColumns.score && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm whitespace-nowrap">
        <div class="text-xs px-3 py-[3px] bg-teal-100 text-black rounded-full">{value.score}</div>
      </td>}
      {checkedColumns.googleStatus && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-black whitespace-nowrap">
        {value.status && value.status == "Approved" ? <div className="text-xs text-center px-3 py-3 bg-green-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Disapproved" ? <div className="text-xs text-center px-3 py-3 bg-pink-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Pending" ? <div className="text-xs text-center px-3 py-3 bg-yellow-200 rounded-full">{value.status}</div> : null}
      </td>}
      {checkedColumns.errorsFromMerchantCenter && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-[#d72c0d] whitespace-nowrap">
        {(value.merchantErrors != '' && value.merchantErrors != null) && JSON.parse(value.merchantErrors).map((val, index) => (
          <div>
            <ErrorIcon style={{ color: '#d72c0d', fontSize: '22px', marginRight: '5px' }} />{val}
          </div>
        ))}
      </td>}
      {checkedColumns.googleProductCategory && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.category && value.category.name ? value.category.name : ''}
      </td>}
      {checkedColumns.ageGroup && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.ageGroup}
      </td>}
      {checkedColumns.gender && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.gender}
      </td>}
      {checkedColumns.productCondition && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productCondition}
      </td>}
      {checkedColumns.brand && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.brand}
      </td>}
      {checkedColumns.productType && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productTypes}
      </td>}
      {checkedColumns.promotionId && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.edited_product != null ? value.edited_product.promotionIds : ''}
      </td>}
      {checkedColumns.customLabel0 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel0 : ''}
      </td>}
      {checkedColumns.customLabel1 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel1 : ''}
      </td>}
      {checkedColumns.customLabel2 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel2 : ''}
      </td>}
      {checkedColumns.customLabel3 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel3 : ''}
      </td>}
      {checkedColumns.customLabel4 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel4 : ''}
      </td>}
      <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        <div class="rounded-md" role="group">
          <button onClick={() => { detailOnClick(value.id) }} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-white text-black">
            <EditIcon style={{ fontSize: '20px', marginRight: '2px', color: '#5c5f62' }} />
            Edit
          </button>
          <button onClick={() => { setShowSingleDeleteModel(!showSingleDeleteModel); setSingleDeleteAbleProduct(value.id) }}
            type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-white text-black">
            <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#5c5f62' }} />
            Delete
          </button>
        </div>
      </td>
    </tr>
  )) : <tr className='hover:bg-gray-100 cursor-pointer w-screen'>
    <td className="py-1 pl-4">No Record Found</td>
  </tr>;

  const allPendingProductRows = allPendingProducts.length > 0 ? allPendingProducts.map((value, index) => (
    <tr className='hover:bg-gray-100 cursor-pointer w-screen' key={index}>
      <td className="py-1 pl-4">
        <div className="flex items-center h-5">
          <Checkbox
            name={value.id}
            onChange={handleProductSelect}
            checked={selectedResources != "all" ? (selectedResources.indexOf(value.id) !== -1 ? true : false) : true}
            style={{ color: '#008060' }}
          />
        </div>
      </td>
      <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm font-medium text-gray-800 whitespace-nowrap">
        <div className="flex items-center">
          <img className='w-10 mr-2' src={value.image} />
          <p className="text-sm font-medium text-gray-800">{value.title}</p>
        </div>

      </td>
      {checkedColumns.id && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.variantId}
      </td>}
      {checkedColumns.score && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm whitespace-nowrap">
        <div class="text-xs px-3 py-[3px] bg-teal-100 text-black rounded-full">{value.score}</div>
      </td>}
      {checkedColumns.googleStatus && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-black whitespace-nowrap">
        {value.status && value.status == "Approved" ? <div className="text-xs text-center px-3 py-3 bg-green-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Disapproved" ? <div className="text-xs text-center px-3 py-3 bg-pink-200 rounded-full">{value.status}</div> : null}
        {value.status && value.status == "Pending" ? <div className="text-xs text-center px-3 py-3 bg-yellow-200 rounded-full">{value.status}</div> : null}
      </td>}
      {checkedColumns.errorsFromMerchantCenter && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-[#d72c0d] whitespace-nowrap">
        {(value.merchantErrors != '' && value.merchantErrors != null) && JSON.parse(value.merchantErrors).map((val, index) => (
          <div>
            <ErrorIcon style={{ color: '#d72c0d', fontSize: '22px', marginRight: '5px' }} />{val}
          </div>
        ))}
      </td>}
      {checkedColumns.googleProductCategory && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.category && value.category.name ? value.category.name : ''}
      </td>}
      {checkedColumns.ageGroup && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.ageGroup}
      </td>}
      {checkedColumns.gender && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.gender}
      </td>}
      {checkedColumns.productCondition && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productCondition}
      </td>}
      {checkedColumns.brand && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.brand}
      </td>}
      {checkedColumns.productType && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.productTypes}
      </td>}
      {checkedColumns.promotionId && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.edited_product != null ? value.edited_product.promotionIds : ''}
      </td>}
      {checkedColumns.customLabel0 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel0 : ''}
      </td>}
      {checkedColumns.customLabel1 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel1 : ''}
      </td>}
      {checkedColumns.customLabel2 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel2 : ''}
      </td>}
      {checkedColumns.customLabel3 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel3 : ''}
      </td>}
      {checkedColumns.customLabel4 && <td onClick={() => { detailOnClick(value.id) }} className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.product_label != null ? value.product_label.customLabel4 : ''}
      </td>}
      <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        <div class="rounded-md" role="group">
          <button onClick={() => { detailOnClick(value.id) }} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-white text-black">
            <EditIcon style={{ fontSize: '20px', marginRight: '2px', color: '#5c5f62' }} />
            Edit
          </button>
          <button onClick={() => { setShowSingleDeleteModel(!showSingleDeleteModel); setSingleDeleteAbleProduct(value.id) }}
            type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-white text-black">
            <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#5c5f62' }} />
            Delete
          </button>
        </div>
      </td>
    </tr>
  )) : <tr className='hover:bg-gray-100 cursor-pointer w-screen'>
    <td className="py-1 pl-4">No Record Found</td>
  </tr>;

  const allExcludedProductRows = allExcludedProducts.length > 0 ? allExcludedProducts.map((value, index) => (
    <tr className='hover:bg-gray-100 w-screen' key={index}>
      <td className="py-1 pl-4">
        <div className="flex items-center h-5">
          <Checkbox
            name={value.id}
            onChange={handleProductSelect}
            checked={selectedResources != "all" ? (selectedResources.indexOf(value.id) !== -1 ? true : false) : true}
            style={{ color: '#008060' }}
          />
        </div>
      </td>
      <td className="px-6 py-2 text-sm font-medium text-gray-800 whitespace-nowrap">
        <div className="flex items-center">
          <img className='w-10 mr-2' src={value.image} />
          <p className="text-sm font-medium text-gray-800">{value.title}</p>
        </div>

      </td>
      {checkedColumns.id && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        {value.variantId}
      </td>}
      {/* {checkedColumns.score && <td className="px-6 py-2 text-sm whitespace-nowrap">
          <div class="text-xs px-3 py-[3px] bg-teal-100 text-black rounded-full">{value.score}</div>
        </td>} */}
      {/* {checkedColumns.googleStatus && <td className="px-6 py-2 text-sm text-black whitespace-nowrap">
          <div class="text-xs px-3 py-[3px] bg-[#fbcfe8] rounded-full">{value.status}</div>
        </td>} */}
      {/* {checkedColumns.errorsFromMerchantCenter && <td className="px-6 py-2 text-sm text-[#d72c0d] whitespace-nowrap">
          {(value.merchantErrors != '' && value.merchantErrors != null) && JSON.parse(value.merchantErrors).map((val, index) => (
            <div>
              <ErrorIcon style={{ color: '#d72c0d', fontSize: '22px', marginRight: '5px' }} />{val}
            </div>
          ))}
        </td>} */}
      {/* {checkedColumns.googleProductCategory && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.category && value.category.name ? value.category.name : ''}
        </td>} */}
      {/* {checkedColumns.ageGroup && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.ageGroup}
        </td>} */}
      {/* {checkedColumns.gender && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.gender}
        </td>} */}
      {/* {checkedColumns.productCondition && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.productCondition}
        </td>} */}
      {/* {checkedColumns.brand && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.brand}
        </td>} */}
      {/* {checkedColumns.productType && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.productTypes}
        </td>} */}
      {/* {checkedColumns.promotionId && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.edited_product != null ? value.edited_product.promotionIds : ''}
        </td>} */}
      {/* {checkedColumns.customLabel0 && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.product_label != null ? value.product_label.customLabel0 : ''}
        </td>}
        {checkedColumns.customLabel1 && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.product_label != null ? value.product_label.customLabel1 : ''}
        </td>}
        {checkedColumns.customLabel2 && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.product_label != null ? value.product_label.customLabel2 : ''}
        </td>}
        {checkedColumns.customLabel3 && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.product_label != null ? value.product_label.customLabel3 : ''}
        </td>}
        {checkedColumns.customLabel4 && <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
          {value.product_label != null ? value.product_label.customLabel4 : ''}
        </td>} */}
      <td className="px-6 py-2 text-sm text-gray-800 whitespace-nowrap">
        <div class="rounded-md" role="group">
          {/* <button onClick={detailOnClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-white text-black">
            <EditIcon style={{ fontSize: '20px', marginRight: '2px', color: '#5c5f62' }} />
            Edit
          </button> */}
          <button onClick={() => { setShowSingleDeleteModel(!showSingleDeleteModel); setSingleDeleteAbleProduct(value.id) }}
            type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-white text-black">
            <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#5c5f62' }} />
            Delete
          </button>
        </div>
      </td>
    </tr>
  )) : <tr className='hover:bg-gray-100 cursor-pointer w-screen'>
    <td className="py-1 pl-4">No Record Found</td>
  </tr>;

  const bulkEditOptionsArray = [
    { label: 'Ads Grouping', value: 'adsGrouping' },
    { label: 'Ads Labels', value: 'adsLabels' },
    { label: 'Adult-Orianted Products', value: 'adult' },
    { label: 'Age Group', value: 'ageGroup' },
    { label: 'Condition', value: 'condition' },
    { label: 'Color - Assigned For Feed', value: 'color' },
    { label: 'Custom Cost Of Goods Sold', value: 'costOfGoodsSold' },
    { label: 'Custom Label 0', value: 'customLabel0' },
    { label: 'Custom Label 1', value: 'customLabel1' },
    { label: 'Custom Label 2', value: 'customLabel2' },
    { label: 'Custom Label 3', value: 'customLabel3' },
    { label: 'Custom Label 4', value: 'customLabel4' },
    { label: 'Gender', value: 'gender' },
    { label: 'Google Product Categories', value: 'product_category_id' },
    { label: 'Material - Assigned For Feed', value: 'material' },
    { label: 'Pattern - Assigned For Feed', value: 'pattern' },
    { label: 'Product Identifiers Control', value: 'identifierExists' },
    { label: 'Product Type', value: 'productTypes' },
    { label: 'Promotion Id', value: 'promotionIds' },
    { label: 'Return Policy Label', value: 'return_policy_label' },
    { label: 'Shipping Label', value: 'shippingLabel' },
    { label: 'Size - Assigned For Feed', value: 'sizes' },
    { label: 'Size System', value: 'sizeSystem' },
    { label: 'Size Type', value: 'sizeType' },
    { label: 'Tax Category', value: 'taxCategory' },
    { label: 'Unit Pricing Measure', value: 'unitPricingMeasure' },
    { label: 'Unit Pricing Base Measure', value: 'unitPricingBaseMeasure' },
    { label: 'Vendor (Brand)', value: 'brand' },
    { label: 'Availability Date', value: 'availabilityDate' },
    { label: 'Availability', value: 'availability' },
    { label: 'Energy Efficiency Class', value: 'energyEfficiencyClass' },
    { label: 'Expiration Date', value: 'expirationDate' },
    { label: 'Installment', value: 'installment' },
    { label: 'Is Bundle?', value: 'isBundle' },
    { label: 'Loyalty Points', value: 'loyaltyPoints' },
    { label: 'Max Energy Efficiency Class', value: 'maxEnergyEfficiencyClass' },
    { label: 'Max Handling Time', value: 'maxHandlingTime' },
    { label: 'Min Energy Efficiency Class', value: 'minEnergyEfficiencyClass' },
    { label: 'Min Handling Time', value: 'minHandlingTime' },
    { label: 'Multipack', value: 'multipack' },
    { label: 'Shipping', value: 'shipping' },
    { label: 'Shipping Height', value: 'shippingHeight' },
    { label: 'Shipping Length', value: 'shippingLength' },
    { label: 'Shipping Weight', value: 'shippingWeight' },
    { label: 'Shipping Width', value: 'shippingWidth' },
    { label: 'Product Height', value: 'productHeight' },
    { label: 'Product Length', value: 'productLength' },
    { label: 'Product Weight', value: 'productWeight' },
    { label: 'Product Width', value: 'productWidth' },
    { label: 'Transit Time Label', value: 'transitTimeLabel' },
    { label: 'Pause', value: 'pause' },
    { label: 'Sale Price Effective Date', value: 'salePriceEffectiveDate' },
    { label: 'Subscription Cost', value: 'subscriptionCost' }
  ];

  //*************************************************************************//
  // Product Search Code Start
  //************************************************************************//
  const [queryValue, setQueryValue] = useState("");
  const handleFiltersQueryChange = (event) => {
    if (event.target.value.length > 0) {
      setQueryValue(event.target.value);
      if (tabsValue == 'approved') {
        getApprovedProducts(event.target.value);
      } else if (tabsValue == 'disapproved') {
        console.log("ggggggggggg")
        getDisapprovedProducts(event.target.value);
      } else if (tabsValue == 'pending') {
        getPendingProducts(event.target.value);
      } else if (tabsValue == 'excluded') {
        getExcludedProducts(event.target.value);
      } else {
        getAllProducts(event.target.value);
      }
    } else {
      setQueryValue("");
      if (tabsValue == 'approved') {
        getApprovedProducts();
      } else if (tabsValue == 'disapproved') {
        getDisapprovedProducts();
      } else if (tabsValue == 'pending') {
        getPendingProducts();
      } else if (tabsValue == 'excluded') {
        getExcludedProducts();
      } else {
        getAllProducts();
      }
    }
  }
  //*************************************************************************//
  // Product Search Code End
  //************************************************************************//

  //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

  //*************************************************************************//
  // Product Filters Search Code Start
  //************************************************************************//

  const [productFilterFromDb, setProductFilterFromDb] = useState('');
  const [productFilters, setProductFilters] = useState([]);
  const [inputVal5, setInputVal5] = useState('');
  const [message, setMessage] = useState('');
  const [tags, setTags] = useState([]);
  const [variatFilter, setVariatFilter] = useState(null);
  const [editedFilter, setEditedFilter] = useState(null);
  const [labelsFilter, setLabelsFilter] = useState(null);
  const [filterApplied, setFilterApplied] = useState(false);

  //  add new Filters 
  const addNewFilters = () => {

    setProductFilters(values => ([...values, '']));

    if (message === '') {

      return;
    }
    if (message == "") {

      return;
    }

    // cannot add duplicate tags
    if (tags.includes(message)) {
      return;
    }
    // cannot store already values in the array
    if (tags.includes(message)) {
      return;
    }
    // add all tags to the array


    setMessage('');

  }
  const applyfilterProduct = () => {
    const ddData = { id: feedId.feedId }
    axioshttp.post("apply/filter", ddData).then((response) => {
      setVariatFilter(response.data[0]);
      setEditedFilter(response.data[1]);
      setLabelsFilter(response.data[2]);
    }).catch((error) => {
      console.log(error);
    });
  }
  // for filter values 
  const getProductsFromDbByfilters = (filter) => {
    var data = {
      feedID: feedId.feedId,
      filters: filter,
    }
    if (JSON.stringify(filter) !== '{}') {
      if (tabsValue == 'approved') {
        axioshttp.post("apply/filter/values/approved", data).then((response) => {
          if (response.data.status) {
            setAllApprovedProducts(response.data.products);
          }
        });
      } else if (tabsValue == 'disapproved') {
        axioshttp.post("apply/filter/values/disapproved", data).then((response) => {
          if (response.data.status) {
            setAllDisapprovedProducts(response.data.products);
          }
        });
      } else if (tabsValue == 'pending') {
        axioshttp.post("apply/filter/values/pending", data).then((response) => {
          if (response.data.status) {
            setAllPendingProducts(response.data.products);
          }
        });
      } else if (tabsValue == 'excluded') {
        console.log('ddd');
        // getExcludedProducts(event.target.value);
      } else {
        axioshttp.post("apply/filter/values", data).then((response) => {
          if (response.data.status) {
            setAllProducts(response.data.products);
          }
        });
      }
    }
    else {
      if (tabsValue == 'approved') {
        getApprovedProducts();
      } else if (tabsValue == 'disapproved') {
        getDisapprovedProducts();
      } else if (tabsValue == 'pending') {
        getPendingProducts();
      } else if (tabsValue == 'excluded') {
        getExcludedProducts();
      } else {
        getAllProducts();
      }
    }
  }
  // for  filtervalues apply in filter
  async function handleApplyFilter () {
    setFilterApplied(true);
    setAnchorEl2(null)
    // e.preventDefault();
    setProductFilters([]);
    setInputVal5('');
    let filterArray = {};
    var contfil = 0;
    await Object.keys(productFilterFromDb).map((keyName, i) => {
      if (typeof productFilterFromDb[keyName]['value'] !== 'undefined') {
        setProductFilters(values => ([...values, '']));
        filterArray[contfil] = {
          name: productFilterFromDb[keyName]['name'],
          value: productFilterFromDb[keyName]['value']
        };
        contfil++;
      }
    });
    await Object.keys(filterArray).map((keyName, i) => {
      setInputVal5(values => ({ ...values, [i]: filterArray[keyName]['name'] }));
    });
    setProductFilterFromDb(filterArray);
    getProductsFromDbByfilters(filterArray);
    setTags('');
    if (productFilterFromDb != '') {
      Object.keys(productFilterFromDb).map((keyName, i) => {
        if (typeof productFilterFromDb[keyName]['value'] !== 'undefined') {
          setTags(current => [...current, productFilterFromDb[keyName]['name'] + ":" + productFilterFromDb[keyName]['value']]);
        }
      });
      setMessage('');
    } else if (tags.includes(message)) {
      setTags([...tags, message]);
      setMessage('');
    }
  };
  // delete tag
  const deleteTag = (index) => {
    // delete the state data tags
    const newTags = [...tags];
    newTags.splice(index, 1);
    setTags(newTags);
    // delete the state data productFilters
    const newrow = [...productFilters];
    newrow.splice(index, 1);
    setProductFilters(newrow);
    // delete inputValue5 state object and rearange
    setInputVal5(current => {
      const copy = { ...current };
      delete copy[index];
      // rearaning object
      var arr = {};
      var count = 0;
      Object.keys(copy).map((keyName, i) => {
        arr = { ...arr, [count]: copy[keyName] };
        count++;
      });
      return arr;
    });
    // delete the state data ProductFilterFromDb
    setProductFilterFromDb(current => {
      const copy = { ...current };
      delete copy[index];
      // rearaning object
      var arr = {};
      var count = 0;
      Object.keys(copy).map((keyName, i) => {
        arr = { ...arr, [count]: copy[keyName] };
        count++;
      });
      // function calling with rearranging object data
      getProductsFromDbByfilters(arr);
      return arr;
    });
  }
  // for google Category
  // if (document.getElementById('productCategories')){
  //   var product_catgeory = document.getElementById('productCategories').getAttribute('data');
  //   var product_categoryes = JSON.parse(product_catgeory);
  // }
  // for Value options
  const handleChangeInput = (e) => {
    var name = e.target.name;
    var valu = e.target.value;
    var id = e.target.id;
    setProductFilterFromDb(values => ({ ...values, [name]: { ...values[name], 'value': valu } }));
    const { value } = e.target;
    setMessage(id + ":" + valu);

  };
  // handle for filterStateValue
  const handlefilterState = (event) => {
    var name = event.target.name;
    var value = event.target.value;
    setInputVal5(values => ({ ...values, [name]: value }));
    setProductFilterFromDb(values => ({ ...values, [name]: { ...values[name], 'name': value } }));
  }
  // delete filter  in filter dropdown
  const deleteFilters = (index) => {
    // delete the state data from productFilters
    const newrow = [...productFilters];
    newrow.splice(index, 1);
    setProductFilters(newrow);
    // delete inputVal5 state and rearange
    setInputVal5(current => {
      const copy = { ...current };
      delete copy[index];
      // rearaning object
      var arr = {};
      var count = 0;
      Object.keys(copy).map((keyName, i) => {
        arr = { ...arr, [count]: copy[keyName] };
        count++;
      });
      return arr;
    });
    // delete the state data  ProductFilterFromDb 
    setProductFilterFromDb(current => {
      const copy = { ...current };
      delete copy[index];
      // rearaning object
      var arr = {};
      var count = 0;
      Object.keys(copy).map((keyName, i) => {
        arr = { ...arr, [count]: copy[keyName] };
        count++;
      });
      // function calling with rearranging object data 
      if (tags.length != 0) {
        getProductsFromDbByfilters(arr);
      }

      return arr;

    });
    // delete the tags state index 
    const newTags = [...tags];
    newTags.splice(index, 1);
    setTags(newTags);
  }

  useEffect(() => {
    if (tags.length == 0) {
      setFilterApplied(false)
    }
  }, [tags]);

  //*************************************************************************//
  // Product Filters Search Code End
  //************************************************************************//

  //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

  //*************************************************************************//
  // Product Score Search Code Start
  //************************************************************************//

  const [value1, setValue1] = React.useState('');
  const [value2, setValue2] = React.useState('');
  const [scoreApplied, setScoreApplied] = useState(false);
  const [scoredata, setScoredata] = useState({
    scores: {
      start: null,
      end: null
    },
    feedId: feedId.feedId,
    paginate: resultsPerPageLimit,
  });
  const handleInputChange = (event) => {
    setValue1(event.target.value);
    if (event.target.value.length > 0) {
      setScoredata(values => ({ ...values, ['scores']: { ...values['scores'], 'start': event.target.value } }));
    } else {
      setScoredata(values => ({ ...values, ['scores']: { ...values['scores'], 'start': null } }));
    }

  };
  const handleInputChange1 = (event) => {
    setValue2(event.target.value);
    if (event.target.value.length > 0) {
      if (event.target.value > 100) {
        setScoredata(values => ({ ...values, ['scores']: { ...values['scores'], 'end': 100 } }));
      } else {
        setScoredata(values => ({ ...values, ['scores']: { ...values['scores'], 'end': event.target.value } }));
      }
    } else {
      setScoredata(values => ({ ...values, ['scores']: { ...values['scores'], 'end': null } }));
    }
  };
  const scorValue = () => {
    setScoreApplied(true);
    if (tabsValue == 'approved') {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`approved/products/${feedId.feedId}?scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          setApprovedCurrentPage(response.data.products.current_page - 1)
          setApprovedLastPage(response.data.products.last_page)
          setTotalApprovedResults(response.data.products.total)
          setAllApprovedProducts(response.data.products.data)
          setLoadingApprProducts(false);
        } else {
          setLoadingApprProducts(false);
        }
      }).catch(error => {
        setLoadingApprProducts(false);
        console.log(error);
      })
    } else if (tabsValue == 'disapproved') {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`disapproved/products/${feedId.feedId}?scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          setDisapprovedCurrentPage(response.data.products.current_page - 1)
          setDisapprovedLastPage(response.data.products.last_page)
          setTotalDisapprovedResults(response.data.products.total)
          setAllDisapprovedProducts(response.data.products.data)
          setLoadingDisappProducts(false);
        } else {
          setLoadingDisappProducts(false);
        }
      }).catch(error => {
        setLoadingDisappProducts(false);
        console.log(error);
      })
    } else if (tabsValue == 'pending') {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`pending/products/${feedId.feedId}?scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          setPendingCurrentPage(response.data.products.current_page - 1)
          setPendingLastPage(response.data.products.last_page)
          setTotalPendingResults(response.data.products.total)
          setAllPendingProducts(response.data.products.data)
          setLoadingPendProducts(false);
        } else {
          setLoadingPendProducts(false);
        }
      }).catch(error => {
        setLoadingPendProducts(false);
        console.log(error);
      })
    } else if (tabsValue == 'excluded') {
      // getExcludedProducts(event.target.value);
      console.log('kkkk');
    } else {
      const scoreRange = scoredata.scores.start + "-" + scoredata.scores.end;
      axioshttp.get(`all/products/${feedId.feedId}?scoreRange=${scoreRange}`).then(response => {
        if (response.data.status) {
          setCurrentPage(response.data.products.current_page - 1)
          setLastPage(response.data.products.last_page)
          setTotalResults(response.data.products.total)
          setAllProducts(response.data.products.data)
          setLoadingAllProducts(false);
        } else {
          setLoadingAllProducts(false);
        }
      }).catch(error => {
        setLoadingAllProducts(false);
        console.log(error);
      })
    }
  };

  //*************************************************************************//
  // Product Score Search Code End
  //************************************************************************//

  const [inputVal4, setInputVal4] = useState(false)
  const [value, setValue] = React.useState('1');
  var isChecked = (item) =>
    checked.includes(item) ? "checked-item" : "not-checked-item";

  const [anchorEl2, setAnchorEl2] = React.useState(null);
  const open2 = Boolean(anchorEl2);
  const handleClick2 = (event) => {
    setAnchorEl2(event.currentTarget);
  };
  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  const [anchorEl3, setAnchorEl3] = React.useState(null);
  const open3 = Boolean(anchorEl3);
  const handleClick3 = (event) => {
    setAnchorEl3(event.currentTarget);
  };
  const handleClose3 = () => {
    setAnchorEl3(null);
  };

  const handleChange1 = (event, newValue, activeThumb) => {

    if (!Array.isArray(newValue)) {
      return;
    }
    if (activeThumb === 0) {
      setValue1([Math.min(newValue[0], value1[1] - minDistance), value1[1]]);
    } else {
      setValue1([value1[0], Math.max(newValue[1], value1[0] + minDistance)]);
    }

  };

  const handleBlur = () => {
    if (value < 0) {
      setValue1[0](0);
    } else if (value > 50) {
      setValue1[0](50);
    }
  };

  const handleBlur1 = () => {
    if (value < 50) {
      setValue1[1](50);
    } else if (value > 100) {
      setValue1[1](100);
    }
  };
  const [checkedAll, setCheckedAll] = useState(false);
  const [checked1, setChecked1] = useState({
    Varient1: false,
    Varient2: false
  });
  useEffect(() => {
    let allChecked = true;
    for (const inputName in checked1) {
      if (checked1[inputName] === false) {
        allChecked = false;
      }
    }
    if (allChecked) {
      setCheckedAll(true);
    } else {
      setCheckedAll(false);
    }
  }, [checked1]);
  const [persons, setPerson] = useState([<div key={0} className="flex mt-2 justify-between items-center">
    <div className='mr-2 w-[40%]'>
      <select
        id="countries"
        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
      >
        <option disabled selected value>
          - - select - -
        </option>
        <option value="US">United States</option>
        <option value="CA">Canada</option>
        <option value="FR">France</option>
        <option value="DE">Germany</option>
      </select>
    </div>
    <div className='w-[40%]'>
      <select
        id="countries"
        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
      >
        <option disabled selected value>
          - - select - -
        </option>
        <option value="US">United States</option>
        <option value="CA">Canada</option>
        <option value="FR">France</option>
        <option value="DE">Germany</option>
      </select>
    </div>
  </div>]);
  const handleClick = (e) => {
    setAnchorEl2(null)
    // e.preventDefault();
    if (message) {
      setTags([...tags, message]);
      setMessage('');
    } else if (tags.includes(message)) {
      setTags([...tags, message]);
      setMessage('');
    }


  };

  const [persons2, setPerson2] = useState([
    <div key={0} className='flex justify-between items-center p-4'>
      <div className='mr-2'>
        <select onChange={e => setInputVal5(e.target.value)}
          id="countries"
          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
        >
          <option disabled selected value>
            - - select - -
          </option>
          <option value="UdfgS">United States</option>
          <option value="CdfgA">Canada</option>
          <option value="FdfgR">France</option>
          <option value="DdfgE">Germany</option>
        </select>
      </div>
      <div className='mr-2'>
        <select onChange={handleChangeInput}

          id="countries"
          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
        >
          <option value='selected' >
            - - select - -
          </option>
          <option value="US">United States</option>
          <option value="CA">Canada</option>
          <option value="FR">France</option>
          <option value="DE">Germany</option>
        </select>
      </div>
    </div>
  ]);

  let handleAddPerson2 = (e) => {

    // e.preventDefault()
    // add all tags to the array
    setTags([...tags, message]);

    // cannot add empty tags
    if (message === '') {
      return;
    }
    // cannot add duplicate tags
    if (tags.includes(message)) {
      return;
    }
    // cannot store already values in the array
    if (tags.includes(message)) {
      return;
    }
    // add all tags to the array

    setMessage('');
    setInputVal5('');
    setPerson2([...persons2,
    <div key={persons.length} className='flex justify-between items-center p-4'>
      <div className='mr-2'>
        <select onChange={e => setInputVal5(e.target.value)}
          id="countries"
          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
        >
          <option disabled selected value>
            - - select - -
          </option>
          <option value="UdfgS">United States</option>
          <option value="CdfgA">Canada</option>
          <option value="FdfgR">France</option>
          <option value="DdfgE">Germany</option>
        </select>
      </div>
      <div className='mr-2'>
        <select onChange={handleChangeInput}

          selected={message}
          id="countries"
          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
        >
          <option value='selected' >
            - - select - -
          </option>
          <option value="US">United States</option>
          <option value="CA">Canada</option>
          <option value="FR">France</option>
          <option value="DE">Germany</option>
        </select>
      </div>
      <div>
        <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize', }} onClick={() => deleteInput()}><RemoveCircleIcon style={{ color: '#d72c0d', marginRight: '5px' }} /></Button>
      </div>
    </div>
    ]);

    // is message value is already in the array, then don't add it to the array
    // if (tags.includes(message)) {
    //   alert('already in the array')
    //   setTags([...tags, message]);
    //   setMessage('');
    // }

  }

  let deleteInput = (index) => {
    if (persons2.length > 1) {
      const newPersons = [...persons2];
      newPersons.splice(index, 1);
      setPerson2(newPersons);
    }
    else {
      setPerson2([]);
    }
    const newTags = [...tags];
    newTags.splice(index, 1);
    setTags(newTags);
  }

  const [loading, setLoading] = useState(true);
  useEffect(() => {
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  }, []);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const handleClickColumn = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleCloseColumn = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const id = open ? 'simple-popover' : undefined;
  const [upgradeModal, setupgradeModal] = useState(false);

  //*************************************************************************/
  // Import Export Code start
  //************************************************************************/

  const [Uuid, setUuid] = useState(null);
  const [csvJobDispached, setCsvJobDispached] = useState(false);
  const [zipFile, setZipFile] = useState(null);
  const [zipFileName, setZipFileName] = useState(null);
  const [showCsvAlert, setshowCsvAlert] = useState(false);
  const [showFile, setShowFile] = useState(true);
  const [fileOutput, setFileOutput] = useState(false);
  const [file, setFile] = useState(null);
  const [buttonDisabled, setButtonDisabled] = useState(true)
  const [showExportProductsModel, setShowExportProductsModel] = useState(false);
  const [showImportProductsModel, setShowImportProductsModel] = useState(false);

  const [selectedFields, setSelectedFields] = useState("Custom Fields");
  const [buttonText, setButtonText] = useState(defalutButtonText);
  const [loadingButton, setLoadingButton] = useState(false);
  const [bgLoader, setBgLoader] = useState(false);
  const [importNow, setImportNow] = useState(false);
  const [shortErrorMessage, setShortErrorMessage] = useState("File type must be .csv");
  const [invalidFieldsName, setInvalidFieldsName] = useState(null);
  const [allowImport, setAllowImport] = useState(false);
  const [validateFile, setValidateFile] = useState(true);
  const [showEmailInput, setShowEmailInput] = useState(true);
  const [storeEmailNew, setStoreEmailNew] = useState(storeEmail);
  const [storeEmailError, setStoreEmailError] = useState(false);

  const [status, setStatus] = React.useState(2)
  const radioHandler = (status) => {
    const checkboxStatus = status.target.value == 'All Fields' ? 1 : 2;
    setSelectedFields(status.target.value);
    setStatus(checkboxStatus);
    if (status.target.value === 'All Fields') {
      setChecked([
        "Feed Id",
        "Product Id",
        "Variant Id",
        "Title",
        "Description",
        "Score",
        "Product Type",
        "Brand",
        "Condition",
        "Age Group",
        "Gender",
        "Product Category",
        "GTIN",
        "Sku",
      ]);
    }

  };
  // State with list of all checked item
  const checkList = ['Description', 'Score', 'Product Type', 'Brand', 'Condition', 'Age Group', 'Gender', 'Product Category', 'GTIN', 'Sku', "Ads Grouping", "Ads Labels", "Adult-Orianted Products", "Color", "Cost Of Goods Sold", "Custom Label 0", "Custom Label 1", "Custom Label 2", "Custom Label 3", "Custom Label 4", "Material", "Pattern", "Identifier Exists", "Promotion Id", "Shipping Label", "Size", "Size System", "Size Type", "Tax Category", "Unit Pricing Measure", "Unit Pricing Base Measure", "Energy Efficiency Class", "Expiration Date", "Installment", "Is Bundle", /*"Loyality Points",*/"Loyalty Points", "Max Energy Efficiency Class", "Max Handling Time", "Min Energy Efficiency Class", "Min Handling Time", "Multipack", "Shipping", "Shipping Height", "Shipping Length", "Shipping Weight", "Shipping Width", "Product Height", "Product Length", "Product Weight", "Product Width", "Transit Time Label", "Pause", "Sale Price Effective Date", "Subscription Cost", 'Product Highlights (1,2,3,4,5,6)', 'Featured Image', 'Additional Image Links 0', 'Additional Image Links 1', 'Additional Image Links 2', 'Additional Image Links 3', 'Additional Image Links 4', 'Additional Image Links 5', 'Additional Image Links 6', 'Additional Image Links 7', 'Additional Image Links 8', 'Additional Image Links 9'];

  const [checked, setChecked] = useState(['Feed Id', 'Product Id', 'Variant Id', 'Title']);

  const defalutValue = ['Feed Id', 'Product Id', 'Variant Id', 'Title'];

  // Add/Remove checked item from list
  const handleCheck = (event) => {
    var updatedList = [...checked];
    if (event.target.checked) {
      updatedList = [...checked, event.target.value];
    } else {
      updatedList.splice(checked.indexOf(event.target.value), 1);
    }
    setChecked(updatedList);
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files.length === 1) {
      if (e.target.files[0].type === 'text/csv') {

        // if (e.target.files[0].size > 2 * 1024 && e.target.files[0].size <= 100000 * 1024) {
        if (e.target.files[0].size <= 100000 * 1024) {
          setFile(e.target.files[0]);
          console.log();
          setshowCsvAlert(false)
          setShowFile(false)
          setFileOutput(true)
          setButtonDisabled(false);
        } else {
          setShortErrorMessage("CSV File Size Must Be Less Than 100 MB");
          setshowCsvAlert(true)
        }

      } else {
        setshowCsvAlert(true)
        setShortErrorMessage("File type must be .csv");
        setFile(null);
        // setInputVal4(false);
        setButtonText(defalutButtonText);
        setShowFile(true)
        setFileOutput(false)
        setInvalidFieldsName(null);
        setButtonDisabled(true);
      }


    }
    if (e.target.files.length === null || e.target.files.length === 0) {
      setShowFile(true)
      setFileOutput(false)
      setButtonDisabled(true);
    }
    if (file !== null) {
      setShowFile(false)
      setFileOutput(true)
      setButtonDisabled(false);
    }

  };

  const handleUploadClick = () => {

    if (!file || file === null) {
      setshowCsvAlert(true)
      setShortErrorMessage("Please add a file to upload");
      setButtonDisabled(true);
      return;
    }
    if (file !== null && file !== undefined) {
      setLoadingButton(true);
      setBgLoader(true);
      importCsv();

    }
  };

  const handleUploadFile = () => {
    if (allowImport === true && file !== null) {
      setLoadingButton(true);
      importCsvComplete();
    }
  }

  const exportCsv = async () => {
    await axioshttp
      .post(
        `createCsv`,
        {
          tabsValue: tabsValue,
          fieldsToExport: selectedFields,
          selectedIds: selectedResources,
          feedSettingId: feedId.feedId,
          selectedFields:
            selectedFields === "Custom Fields"
              ? checked
              : null,
        },
        { responseType: "blob" }
      )
      .then((response) => {
        let fileName =
          response.headers["content-disposition"].split(
            "filename="
          )[1];
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
          // IE variant
          window.navigator.msSaveOrOpenBlob(
            new Blob([response.data], {
              type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
              encoding: "UTF-8",
            }),
            fileName
          );
        } else {
          const url = window.URL.createObjectURL(
            new Blob([response.data], {
              type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
              encoding: "UTF-8",
            })
          );
          const link = document.createElement("a");
          link.href = url;
          link.setAttribute(
            "download",
            response.headers["content-disposition"].split(
              "filename="
            )[1]
          );
          document.body.appendChild(link);
          link.click();
          link.remove(); //
        }

      })
      .catch((error) => {
        if (error.response.data.status === false) {
          setToastMessage(error.response.data.message);
          setShowToast(true);
        }
        console.log(error)
      });
  };

  const exportZip = async () => {
    await axioshttp
      .post(
        `createZip`,
        {
          storeEmail: storeEmailNew,
          tabsValue: tabsValue,
          fieldsToExport: selectedFields,
          feedSettingId: feedId.feedId,
          selectedFields:
            selectedFields === "Custom Fields"
              ? checked
              : null,
        },
      )
      .then((response) => {
        setShowToast(true);
        setToastMessage(response.data.message);
        console.log(response.data);
      })
      .catch((error) => {
        setShowToast(true);
        setToastMessage(error.response.data.message);
        console.log(error)
      });
  };

  const isValidEmail = (email) => {
    // Regular expression pattern for email validation
    var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    // var emailPattern = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;

    return emailPattern.test(email);
  }

  const handleEmailChange = (e) => {
    setStoreEmailNew(e.target.value)
    setStoreEmailError(false)
  }

  const handleExports = () => {

    const isValid = isValidEmail(storeEmailNew);
    if (!isValid) {
      setStoreEmailError(true)
    } else {
      setShowExportProductsModel(false);
      let maxResult = null;

      if (tabsValue == 'all') {
        maxResult = totalAllResults
      } else if (tabsValue == 'approved') {
        maxResult = totalAppResults;
      } else if (tabsValue == 'disapproved') {
        maxResult = totalDisappResults;
      } else if (tabsValue == 'pending') {
        maxResult = totalPendResults;
      }
      // console.log(selectedResources.length, selectedResources, totalResults, maxResult);

      if ((selectedResources.length > 0 && selectedResources !== 'all') || maxResult <= 300) {
        setToastMessage("Your Products will be downloaded shortly");
        setShowToast(true);
        exportCsv();

      } else {
        exportZip();
      }
      setChecked(defalutValue);

    }
  }

  function createZip (file) {
    const zip = new JSZip();
    zip.file(file.name, file, { compression: "DEFLATE" });
    return zip.generateAsync({ type: 'blob', compressionOptions: { level: 9 } });
  }

  const importCsv = async () => {
    try {
      setCsvJobDispached(false);
      let invalidFieldsName = null;
      setButtonDisabled(true);
      createZip(file).then((blob) => {
        const fileData = new FormData();
        const filename = file.name;
        const newFilename = filename.replace('.csv', '.zip');
        setZipFile(blob);
        setZipFileName(setZipFileName);
        fileData.append('file', blob, newFilename);
        return axioshttp.post('/readCsv', fileData)
          .then((response) => {
            setLoadingButton(false);
            if (response.data.status === "success") {

              setBgLoader(true);
              setImportNow(true);
              setUuid(response.data.uuid);
              setButtonText(ContinueToImport);
              setValidateFile(false);
              setAllowImport(true);
              setButtonDisabled(false);

            }
          })
          .catch((error) => {
            if (error.response.data.status === "error" && error.response.data.hasOwnProperty("message")) {
              let str = error.response.data.message;
              if (error.response.data.hasOwnProperty("error")) {
                invalidFieldsName = error.response.data.error;
              }
              setInvalidFieldsName(invalidFieldsName);
              setShortErrorMessage(str);
              setshowCsvAlert(true);
              setLoadingButton(false);
              setBgLoader(false);
              setButtonText(defalutButtonText);

            }
            setAllowImport(false);
            setButtonDisabled(true);
            setValidateFile(true);
            setUuid(null);



          });
      });

    } catch (error) {
      console.log(error);
    }

  };

  const importCsvComplete = async () => {
    try {
      // setLoader(true);
      setBgLoader(true);
      setImportNow(true);
      setButtonDisabled(true);

      const formDataObj = new FormData();
      // Append file to the formData object h
      formDataObj.append("file", zipFile, zipFileName);
      formDataObj.append("uuid", Uuid);
      await axioshttp
        .post(`uploadCompleteCsv`, formDataObj, {
          headers: { "Content-Type": "multipart/form-data" },
        })
        .then((response) => {
          if (response.data.status === "success") {
            handleCancelButton();
            setToastMessage(response.data.message);
            setShowToast(true);
            setCsvJobDispached(true);
            setShortErrorMessage("We're currently importing your products into your store. ");
            setInvalidFieldsName(["This could take some time to complete.Import job already in progress.", "Please wait until current one is finished."])
            setshowCsvAlert(true);
            setImportNow(false);
          }
        })
        .catch((error) => {
          handleCancelButton();
          setAllowImport(false);
          if (error.response.data.status === "error") {
            setShortErrorMessage(error.response.data.message);
            setToastMessage(error.response.data.message);
            setshowCsvAlert(true);
            setShowToast(true);
            setCsvJobDispached(false);
          }
        });
    } catch (error) {
      console.log(error);
    }
  };

  const handleCancelButton = () => {
    // setInputVal4(false);
    setAllowImport(false);
    setButtonText(defalutButtonText);
    setFile(null);
    setBgLoader(false);
    setButtonDisabled(true);
    setshowCsvAlert(false);
    setInvalidFieldsName(null);
    setShowFile(true);
    setFileOutput(false);
    setBgLoader(false);
    setLoadingButton(false);
    setShowImportProductsModel(false);
    setValidateFile(true);
    setZipFile(null);
    setZipFileName(null);

  }

  useEffect(() => {
    setTimeout(function () {
      setShowToast(false);
    }, 5000)
  }, [showToast])
  //*************************************************************************/
  // Import Export Code end
  //************************************************************************/

  return (
    <>
      <ThemeProvider theme={theme}>
        <div className='p-2'>

          {/* {showAccountRequirements ? (
            <>
              {loadingAccountErrors ? (
                <Skeleton variant="rounded" style={{ width: '100%', height: '30vh', marginTop: '10px' }} />
                // <LinearProgress color="success" />
              ) : (
                <div className="text-black px-6 w-[100%] py-4 rounded relative mb-4 border border-green-700 bg-[#f1f8f5]">
                  <span className="inline-block font-medium align-middle mr-8">
                    <FactCheckIcon style={{ color: '#008060', marginRight: '10px' }} />
                    Before your products can be approved or desapproved in Google Merchant, you need to make sure that you meet the following requirements:
                  </span>
                  <ul className='pt-2'>
                    <li className='text-sm pl-8'>1- Add contact information to your store</li>
                    <li className='text-sm pl-8'>2- Add a refund and terms of service policies to your store</li>
                    <li className='text-sm pl-8'>3- Remove the password from your store</li>
                    <li className='text-sm pl-8'>4- Configure tax and shipping information</li>
                    <li className='text-sm pl-8'>5- Add a valid payment methods</li>
                  </ul>
                  <button className="absolute flex items-center bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-3 mr-6 outline-none focus:outline-none">
                    <div className='mr-8 flex items-center'>
                    </div>
                    <span onClick={() => { setShowAccountRequirements(false) }} className='text-3xl font-medium hover:text-red-700'>Ã</span>
                  </button>
                  <div className='mt-4'>
                    <Button variant="outlined" target='_blank' href="https://support.google.com/merchants/answer/6363310?hl=en">Learn More</Button>
                  </div>
                </div>)}
            </>
          ) : null} */}
          <>
            {loadingAccountErrors ? (
              <>
                <div className="text-black px-6 w-[100%] py-4 rounded relative mb-4">
                  <span className="font-medium inline-block align-middle mr-8 w-[55%]">
                    <Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} />
                  </span>
                  <ul className='p-2'>
                    {/* {accountErrors.map((value, index) => ( */}
                    <li className='text-sm pl-12 mb-2 w-[60%]'><Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} /></li>
                    <li className='text-sm pl-12 mb-2 w-[60%]'><Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} /></li>
                    <li className='text-sm pl-12 mb-2 w-[60%]'><Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} /></li>
                    <li className='text-sm pl-12 mb-2 w-[60%]'><Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} /></li>
                    {/* ))} */}
                  </ul>
                  <p className='text-sm p-2'><Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} /></p>
                  <div className='flex'>
                    <Skeleton variant="rounded" style={{ width: '100%', height: 'fitContent' }} />
                  </div>
                </div>
              </>
            ) : (
              <>
                {accountErrors.length > 0 && <div className="text-black px-6 w-[100%] py-4 rounded relative mb-4 border border-[#e0b3b2] bg-[#fff4f4]">
                  <span className="text-xl inline-block mr-2 align-middle">
                    <GppMaybeIcon style={{ color: '#d72c0d' }} />
                  </span>
                  <span className="inline-block font-medium align-middle mr-8">
                    Google Merchant Center Account suspended
                  </span>
                  <ul className='p-2'>
                    {accountErrors.map((value, index) => (
                      <li className='text-sm pl-12'>{value}</li>
                    ))}
                  </ul>
                  <p className='text-sm p-2'>If you've received a policy violation notice in your GMC account, it's important to take action to resolve the issue promptly. <br />While installing EasyFeed can help ensure compliance with Google's policies, it's possible that a violation occurred before the feed was installed.</p>
                  <div className='flex'>
                    {/* <Button style={{ marginRight: '10px' }} variant="outlined">Watch Help Video</Button> */}
                    <VideoModal margin='0 10px 0 0' title='Watch Help Video' videoSrc='https://www.youtube.com/embed/xB2i16XG8rA' />
                    <Button style={{ marginRight: '10px' }} onClick={handleGoToMerchantAcc} variant="outlined">Go To Merchant Center</Button>
                    <Button onClick={getAccountLevelIssues}>Refresh Account Status</Button>
                  </div>
                  <button className="absolute flex items-center bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-3 mr-6 outline-none focus:outline-none">
                    <div className='mr-8 flex items-center'>
                    </div>
                    <span onClick={() => { setAccountErrors([]) }} className='text-3xl font-medium hover:text-red-700'>Ã</span>
                  </button>
                </div>}
              </>)}
          </>
          {feedSyncMessage && <div className="text-black px-6 w-[100%] py-4 rounded relative mb-4 border border-[#50DCA9] bg-[#E0F8EE]">
            <span className="inline-block font-normal align-middle mr-8">
              <FactCheckIcon style={{ color: '#008060', marginRight: '10px' }} />
              Please note that it may take some time for your product feed to be listed in Merchant Center.Typically, this process takes up to 10 hours.
            </span>
            <button className="absolute flex items-center bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-3 mr-6 outline-none focus:outline-none">
              <div className='mr-8 flex items-center'>
              </div>
              <span onClick={() => { setFeedSyncMessage(false) }} className='text-3xl font-medium hover:text-red-700'>Ã</span>
            </button>
          </div>}

          <>
            <>
              {/* {loading ? (
                <Skeleton variant="rounded" style={{ width: '100%', height: '50vh', marginTop: '10px', marginBottom: '10px' }} />
                // <LinearProgress color="success" />
              ) : ( */}
              <TabContext value={tabsValue}>
                <VideoModal margin='0 0 10px 0' title='Complete Introduction' videoSrc='https://www.youtube.com/embed/D_szKJrA_HU' />
                <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                  <TabList onChange={handleTabsChange} aria-label="lab API tabs example">
                    <Tab label=
                      {loadingAllProducts ? <Skeleton variant="rounded" style={{ width: '100%', height: '5vh' }} /> : <button type="button" class="inline-flex relative items-center p-3 text-sm font-medium text-center">
                        All Products
                        <div class="inline-flex ml-1 justify-center items-center w-fit px-2 h-5 text-xs font-bold text-black bg-gray-300 rounded-xl ">{totalAllResults}</div>
                      </button>}
                      value="all" />
                    <Tab label=
                      {loadingAllProducts ? <Skeleton variant="rounded" style={{ width: '100%', height: '5vh' }} /> : <button type="button" class="inline-flex relative items-center p-3 text-sm font-medium text-center">
                        Approved
                        <div class="inline-flex ml-1 justify-center items-center w-fit px-2 text-xs font-bold text-black bg-green-200 rounded-xl ">{totalAppResults}</div>
                      </button>}
                      value="approved" />
                    <Tab label=
                      {loadingAllProducts ? <Skeleton variant="rounded" style={{ width: '100%', height: '5vh' }} /> : <button type="button" class="inline-flex relative items-center p-3 text-sm font-medium text-center">
                        Disapproved
                        <div class="inline-flex ml-1 justify-center items-center w-fit px-2 text-xs font-bold text-black bg-pink-200 rounded-xl ">{totalDisappResults}</div>
                      </button>}
                      value="disapproved" />
                    <Tab label=
                      {loadingAllProducts ? <Skeleton variant="rounded" style={{ width: '100%', height: '5vh' }} /> : <button type="button" class="inline-flex relative items-center p-3 text-sm font-medium text-center">
                        Pending
                        <div class="inline-flex ml-1 justify-center items-center w-fit px-2 text-xs font-bold text-black bg-yellow-200 rounded-xl ">{totalPendResults}</div>
                      </button>}
                      value="pending" />
                    <Tab label=
                      {loadingAllProducts ? <Skeleton variant="rounded" style={{ width: '100%', height: '5vh' }} /> : <button type="button" class="inline-flex relative items-center p-3 text-sm font-medium text-center">
                        Excluded
                        <div class="inline-flex ml-1 justify-center items-center w-fit px-2 text-xs font-bold text-black bg-[#ff330e] rounded-xl ">{totalExclResults}</div>
                      </button>}
                      value="excluded" />
                  </TabList>
                </div>
                <TabPanel value="all">
                  {loadingAllProducts ? (
                    <>
                      <div className="flex flex-col mt-2">
                        <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                          <div className="py-3 w-full pl-2 flex justify-between">
                            <div className="w-[35%] relative">
                              <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                            </div>
                            <div className="w-[60%] flex items-center relative">
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                            </div>
                          </div>
                          <div className="w-full inline-block align-middle overflow-x-scroll">
                            <div className="rounded-lg overflow-x w-fit">
                              <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                                <thead className="overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '4vh' }} />
                                    </div>
                                  </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (<div className="flex flex-col mt-2">
                    <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                      <div className="py-3 pl-2 lg:flex xl:flex 2xl:flex justify-between">
                        <div className="relative w-full lg:w-[25%] xl:w-[40%] 2xl:w-[50%]">
                          <label htmlFor="hs-table-search" className="sr-only">
                            Search
                          </label>
                          <input
                            type="text"
                            onChange={handleFiltersQueryChange}
                            name="hs-table-search"
                            id="hs-table-search"
                            className="block w-full p-2 mt-[10px] pl-10 text-sm border border-[#babfc3] rounded-md focus:border-blue-500 focus:ring-blue-500 "
                            placeholder="Search by name"
                          />
                          <div className="flex items-center flex-wrap w-[90vw]">
                            {tags.length != 0 ? tags.map((tag, index) => (

                              <span id="badge-dismiss-dark"
                                class=" content-center mt-2 inline-flex items-center py-1 px-2 mr-2 text-sm font-medium text-gray-800 bg-gray-100 rounded ">
                                {tag}
                                <button onClick={() => deleteTag(index)} type="button" class="inline-flex items-center p-0.5 ml-2 text-sm text-gray-400 bg-transparent rounded-sm hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-300 dark:hover:text-gray-900" data-dismiss-target="#badge-dismiss-dark" aria-label="Remove">

                                  <svg aria-hidden="true" class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                </button>
                              </span>
                            )) : " "}
                          </div>
                        </div>
                        <div style={{ alignItems: 'baseline' }} className="flex flex-wrap mt-2 lg:m-0 xl:m-0 2xl:m-0 items-center space-x-2 align-baseline">
                          <div className="relative">
                            <button onClick={handleExportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <PublishIcon style={{ color: '#5c5f62' }} />
                                Export
                              </span>
                            </button>
                            <button onClick={handleImportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <GetAppIcon style={{ color: '#5c5f62' }} />
                                Import
                              </span>
                            </button>
                            <button aria-controls={open2 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open2 ? 'true' : undefined} onClick={handleClick2} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <TuneIcon style={{ color: '#5c5f62' }} />
                                Filters
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl2}
                              open={open2}
                              onClose={handleClose2}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              {/* All Filter Model */}
                              <>
                                <div className='pt-2 pb-2 pr-4 pl-4'>
                                  <p>Search By Filters</p>
                                  <Divider />
                                </div>
                                {productFilters.map((val, index) => (
                                  <>
                                    <div value={index} className='flex justify-between items-center p-4'>
                                      <div className='mr-2'>
                                        <select
                                          onChange={handlefilterState}
                                          id="countries"
                                          name={index}
                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                        >
                                          <option disabled selected value>
                                            - - select - -
                                          </option>
                                          <option value="adsGrouping" selected={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ? productFilterFromDb[index]['name'] == "adsGrouping" ? true : false : false : false}>Ads Grouping</option>
                                          <option value="adsLabels" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adsLabels" ? true : false : false : false
                                          }>Ads Labels</option>
                                          <option value="shippingLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLabel" ? true : false : false : false
                                          }>Shipping Label</option>
                                          <option value="adult" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adult" ? true : false : false : false
                                          }>Product is Adult-oriented</option>
                                          <option value="ageGroup" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "ageGroup" ? true : false : false : false
                                          }>Age Group</option>
                                          <option value="productCondition" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productCondition" ? true : false : false : false
                                          }>Condition</option>
                                          <option value="merchantErrors" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "merchantErrors" ? true : false : false : false
                                          }>Merchant Errors</option>
                                          <option value="color" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "color" ? true : false : false : false
                                          }>Color - Assigned For Feed</option>
                                          <option value="costOfGoodsSold" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "costOfGoodsSold" ? true : false : false : false
                                          }>Cost Of Goods Sold</option>
                                          <option value="customLabel0" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel0" ? true : false : false : false
                                          }>Custom Label 0</option>
                                          <option value="customLabel1" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel1" ? true : false : false : false
                                          }>Custom Label 1</option>
                                          <option value="customLabel2" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel2" ? true : false : false
                                          }>Custom Label 2</option>
                                          <option value="customLabel3" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel3" ? true : false : false : false
                                          }>Custom Label 3</option>
                                          <option value="customLabel4" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel4" ? true : false : false : false
                                          }> Custom Label 4</option>
                                          <option value="product_category_id" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "product_category_id" ? true : false : false : false

                                          }>Google Product Categories</option>
                                          <option value="material" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "material" ? true : false : false : false

                                          }>Material - Assigned For Feed</option>
                                          <option value="pattern" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pattern" ? true : false : false : false
                                          }>Pattern - Assigned For Feed</option>
                                          <option value="subscriptionCost" selected={

                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "subscriptionCost" ? true : false : false : false
                                          }
                                          >Subscription cost </option>
                                          <option value="identifierExists" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "identifierExists" ? true : false : false : false
                                          }>Product Identifier Exists</option>
                                          <option value="productTypes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productTypes" ? true : false : false : false
                                          }>Product Type</option>
                                          <option value="promotionIds" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "promotionIds " ? true : false : false : false
                                          }>Promotion Id</option>
                                          <option value="return_policy_label" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "return_policy_label" ? true : false : false : false
                                          }>Return Policy Label</option>
                                          <option value="sizes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizes" ? true : false : false : false
                                          }>Size - Assigned For Feed</option>
                                          <option value="sizeSystem" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeSystem" ? true : false : false : false
                                          }>Size System</option>
                                          <option value="sizeType" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeType" ? true : false : false : false
                                          }>Size Type</option>
                                          <option value="taxCategory" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "taxCategory" ? true : false : false : false
                                          }>Tax Category</option>
                                          <option value="unitPricingMeasure" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "unitPricingMeasure" ? true : false : false : false
                                          }
                                          >Unit Pricing Measure</option>
                                          <option value="unitPricingBaseMeasure"
                                            selected={
                                              productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                                productFilterFromDb[index]['name'] ==
                                                  "unitPricingBaseMeasure" ? true : false : false : false
                                            }
                                          >Unit Pricing Base Measure</option>
                                          <option value="availability" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "avaibility" ? true : false : false : false
                                          }>Availability</option>
                                          <option value="isBundle" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "isBundle" ? true : false : false : false
                                          }>Is it bundle</option>
                                          <option value="loyaltyPoints" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "loyaltyPoints" ? true : false : false : false
                                          }>Loyalty Points</option>
                                          <option value="energyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "energyEfficiencyClass" ? true : false : false : false
                                          }>Energy Efficiency Class</option>
                                          <option value="maxEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxEnergyEfficiencyClass" ? true : false : false : false
                                          }>Max Energy Efficiency Class</option>
                                          <option value="minEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minEnergyEfficiencyClass" ? true : false : false : false
                                          }>Min Energy Efficiency Class</option>
                                          <option value="maxHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxHandlingTime" ? true : false : false : false
                                          }>Max Handling Time</option>
                                          <option value="minHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minHandlingTime" ? true : false : false : false
                                          }>Min Handling Time</option>
                                          <option value="multipack" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "multipack" ? true : false : false : false
                                          }>Multipack</option>
                                          <option value="shippingHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingHeight" ? true : false : false : false
                                          }>Shipping Height</option>
                                          <option value="shippingLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLength" ? true : false : false : false
                                          }>Shipping Length</option>
                                          <option value="shippingWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWeight" ? true : false : false : false
                                          }>Shipping Weight</option>
                                          <option value="shippingWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWidth" ? true : false : false : false
                                          }>Shipping Width</option>
                                          <option value="transitTimeLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "transitTimeLabel " ? true : false : false : false
                                          }>Transit Time Label</option>
                                          <option value="productHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productHeight" ? true : false : false : false
                                          }>Product Height</option>
                                          <option value="productLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productLength" ? true : false : false
                                          }>Product Length</option>
                                          <option value="productWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWidth" ? true : false : false : false
                                          }>Product Weight</option>
                                          <option value="productWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWeight" ? true : false : false : false
                                          }>Product Width</option>
                                          <option value="installment" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "installment" ? true : false : false : false
                                          }>Installment</option>
                                          <option value="pause" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pause" ? true : false : false : false
                                          }> Product Pause</option>
                                        </select>
                                      </div>
                                      <div className='mr-2'>
                                        {
                                          inputVal5[index] == "adsGrouping" ?
                                            labelsFilter != null ?
                                              labelsFilter.length != 0 ?
                                                [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()][0] == "" ?
                                                  <p>No Value Exist</p> :
                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                    productFilterFromDb[index]['value'] : " "
                                                    : " "}
                                                    id={inputVal5[index]}
                                                    name={index}
                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                  >

                                                    <option value='selected' >
                                                      - - select - -
                                                    </option>
                                                    {
                                                      [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()]
                                                        .map((label, i) =>
                                                        (
                                                          label != "" ?
                                                            <option value={label}>{label}</option> : ""))
                                                    }
                                                  </select> :
                                                <p>No Value Exist</p> : "....Loading" :
                                            inputVal5[index] == "adsLabels" ?
                                              labelsFilter != null ?
                                                labelsFilter.length != 0 ?
                                                  [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()][0] == "" ?
                                                    <p>No Value Exist</p> :
                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                      productFilterFromDb[index]['value'] : " "
                                                      : " "}
                                                      id={inputVal5[index]}
                                                      name={index}
                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                    >

                                                      <option value='selected' >
                                                        - - select - -
                                                      </option>
                                                      {
                                                        [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()]
                                                          .map((label, index) =>
                                                          (
                                                            label != "" ?
                                                              <option value={label}>{label}</option> : ""))
                                                      }
                                                    </select> :
                                                  <p>No Value Exist</p> : "...Loading" :
                                              inputVal5[index] == "shippingLabel" ?
                                                labelsFilter != null ?
                                                  labelsFilter.length != 0 ?
                                                    [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()].length == 1 && [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()][0] != "" ? <p>No Value Exist</p>
                                                      :
                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                        productFilterFromDb[index]['value'] : " "
                                                        : " "}
                                                        id={inputVal5[index]}
                                                        name={index}
                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                      >

                                                        <option value='selected' >
                                                          - - select - -
                                                        </option>
                                                        {
                                                          [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()]
                                                            .map((label, index) =>
                                                            (
                                                              label != "" ?
                                                                <option value={label}>{label}</option> : ""))
                                                        }
                                                      </select>
                                                    : <p>No Value Exist</p> : "...Loading"
                                                : inputVal5[index] == "adult" ?
                                                  editedFilter != null ?
                                                    editedFilter.length != 0 ?
                                                      [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()].length != 0 ?
                                                        <p>No Value Exist</p> :
                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                          productFilterFromDb[index]['value'] : " "
                                                          : " "}
                                                          id={inputVal5[index]}
                                                          name={index}
                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                        >

                                                          <option value='selected' >
                                                            - - select - -
                                                          </option>
                                                          {
                                                            [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()]
                                                              .map((adult, index) =>
                                                              (
                                                                adult != "" ?
                                                                  <option value={adult}>{adult}</option> : ""))
                                                          }
                                                        </select>
                                                      : <p>No Value Exist</p> : "...Loading"
                                                  : inputVal5[index] == "ageGroup" ?
                                                    variatFilter != null ?
                                                      variatFilter.length != 0 ?
                                                        [...new Map(variatFilter.map(({
                                                          ageGroup }) => [ageGroup, ageGroup])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                            ageGroup }) => [ageGroup, ageGroup])).values()][0] == "" ?
                                                          <p>No Value Exist</p> :
                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                            productFilterFromDb[index]['value'] : " "
                                                            : " "}
                                                            id={inputVal5[index]}
                                                            name={index}
                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                          >
                                                            <option value='selected' >
                                                              - - select - -
                                                            </option>
                                                            {
                                                              [...new Map(variatFilter.map(({
                                                                ageGroup }) => [ageGroup, ageGroup])).values()].map((age, index) => (
                                                                  <option value={age}> {age} </option>
                                                                ))
                                                            }
                                                          </select> :
                                                        <p>No Value Exist</p> : "...Loading" :
                                                    inputVal5[index] == "productCondition" ?
                                                      variatFilter != null ?
                                                        variatFilter.length != 0 ?
                                                          [...new Map(variatFilter
                                                            .map(({ productCondition }) => [productCondition, productCondition])).values()].length == 1 && [...new Map(variatFilter
                                                              .map(({ productCondition }) => [productCondition, productCondition])).values()][0] == "" ? <p>No Value Exist</p> :
                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                              productFilterFromDb[index]['value'] : " "
                                                              : " "}
                                                              id={inputVal5[index]}
                                                              name={index}
                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                            >

                                                              <option value='selected' >
                                                                - - select - -
                                                              </option>
                                                              {
                                                                [...new Map(variatFilter
                                                                  .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                    <option value={condition}> {condition} </option>
                                                                  ))
                                                              }
                                                            </select> :
                                                          <p>No Value Exist</p> : "...Loading" :

                                                      inputVal5[index] == "merchantErrors" ?
                                                        variatFilter != null ?
                                                          variatFilter.length != 0 ?
                                                            [...new Map(variatFilter
                                                              .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].length == 1 && [...new Map(variatFilter
                                                                .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()][0] == "" ? <p>No Value Exist</p> :
                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                productFilterFromDb[index]['value'] : " "
                                                                : " "}
                                                                id={inputVal5[index]}
                                                                name={index}
                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                              >

                                                                <option value='selected' >
                                                                  - - select - -
                                                                </option>
                                                                {
                                                                  [...new Map(variatFilter
                                                                    .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].map((error, index) => (
                                                                      <option value={error}> {error} </option>
                                                                    ))
                                                                }
                                                              </select> :
                                                            <p>No Value Exist</p> : "...Loading" :

                                                        inputVal5[index] == "color" ?
                                                          editedFilter != null ?
                                                            editedFilter.length != 0 ?
                                                              [...new Map(editedFilter.map(({ color }) => [color, color])).values()].length == 1 && [...new Map(editedFilter.map(({ color }) => [color, color])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                <select onChange={handleChangeInput} value={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ? productFilterFromDb[index]['value'] : " " : " "}
                                                                  id={inputVal5[index]}
                                                                  name={index}
                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                >
                                                                  <option value='selected' >
                                                                    - - select - -
                                                                  </option>
                                                                  {
                                                                    [...new Map(editedFilter.map(({ color }) => [color, color])).values()]
                                                                      .map((colr, index) =>
                                                                      (
                                                                        colr != "" ?
                                                                          <option value={colr}>{colr}</option> : ""))
                                                                  }
                                                                </select> :
                                                              <p>No Value Exist</p> : "...Loading" :
                                                          inputVal5[index] == "costOfGoodsSold" ?
                                                            editedFilter != null ?
                                                              editedFilter.length != 0 ?

                                                                [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                  .length == 1 && [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()][0] == "" ?
                                                                  <p>No Value Exist</p> :
                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                    && productFilterFromDb[index] ?
                                                                    productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                    : " "}
                                                                    id={inputVal5[index]}
                                                                    name={index}
                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                  >

                                                                    <option value='selected' >
                                                                      - - select - -
                                                                    </option>
                                                                    {
                                                                      [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                        .map((cost, index) =>
                                                                        (
                                                                          cost != "" ?
                                                                            <option value={cost}>{cost}</option> : ""))
                                                                    }
                                                                  </select> :
                                                                <p>No Value Exist</p> : "...Loading" :
                                                            inputVal5[index] == "customLabel0" ?
                                                              labelsFilter != null ?
                                                                labelsFilter.length != 0 ?
                                                                  [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()][0] == "" ?
                                                                    <p>No Value Exist</p> :
                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                      : " "}
                                                                      id={inputVal5[index]}
                                                                      name={index}
                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                    >

                                                                      <option value='selected' >
                                                                        - - select - -
                                                                      </option>
                                                                      {
                                                                        [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()]
                                                                          .map((label0, index) =>
                                                                          (
                                                                            label0 != "" ?
                                                                              <option value={label0}>{label0}</option> : ""))
                                                                      }
                                                                    </select> :
                                                                  <p>No Value Exist</p> : "...Loading" :
                                                              inputVal5[index] == "customLabel1" ?
                                                                labelsFilter != null ?
                                                                  labelsFilter.length != 0 ?
                                                                    [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                        productFilterFromDb[index]['value'] : " "
                                                                        : " "}
                                                                        id={inputVal5[index]}
                                                                        name={index}
                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                      >

                                                                        <option value='selected' >
                                                                          - - select - -
                                                                        </option>
                                                                        {
                                                                          [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()]
                                                                            .map((label1, index) =>
                                                                            (
                                                                              label1 != "" ?
                                                                                <option value={label1}>{label1}</option> : ""))
                                                                        }
                                                                      </select> :
                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                inputVal5[index] == "customLabel2" ?
                                                                  labelsFilter != null ?
                                                                    labelsFilter.length != 0 ?
                                                                      [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()][0] == "" ?
                                                                        <p>No Value Exist</p> :
                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                          productFilterFromDb[index]['value'] : " "
                                                                          : " "}
                                                                          id={inputVal5[index]}
                                                                          name={index}
                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                        >

                                                                          <option value='selected' >
                                                                            - - select - -
                                                                          </option>
                                                                          {
                                                                            [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].map((label2, index) =>
                                                                            (
                                                                              label2 != "" ?
                                                                                <option value={label2}>{label2}</option> : ""))
                                                                          }
                                                                        </select>
                                                                      : <p>No Value Exist</p> : "...Loading" :
                                                                  inputVal5[index] == "customLabel3" ?
                                                                    labelsFilter != null ?
                                                                      labelsFilter.length != 0 ?
                                                                        [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                            productFilterFromDb[index]['value'] : " "
                                                                            : " "}
                                                                            id={inputVal5[index]}
                                                                            name={index}
                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                          >

                                                                            <option value='selected' >
                                                                              - - select - -
                                                                            </option>
                                                                            {
                                                                              [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()]
                                                                                .map((label3, index) =>
                                                                                (
                                                                                  label3 != "" ?
                                                                                    <option value={label3}>{label3}</option> : ""))
                                                                            }
                                                                          </select> :
                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                    inputVal5[index] == "customLabel4" ?
                                                                      labelsFilter != null ?
                                                                        labelsFilter.length != 0 ?

                                                                          [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()]
                                                                                  .map((label4, index) =>
                                                                                  (
                                                                                    label4 != "" ?
                                                                                      <option value={label4}>{label4}</option> : ""))
                                                                              }
                                                                            </select> :
                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                      inputVal5[index] == "product_category_id" ?
                                                                        variatFilter != null ?
                                                                          [...new Map(variatFilter.map(({
                                                                            product_category_id }) => [product_category_id, product_category_id])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                                              product_category_id }) => [product_category_id, product_category_id])).values()][0] != "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                productCategories.map((category, index) => (
                                                                                  variatFilter != "" &&
                                                                                    variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({
                                                                                      product_category_id }) => [product_category_id, product_category_id])).values()].map((id, index) => (
                                                                                        id == category.id ?
                                                                                          <option value={category.id}>{category.name}</option> : " "
                                                                                      )) : ""
                                                                                ))
                                                                              }
                                                                            </select> : "....Loading" :
                                                                        inputVal5[index] == "material" ?
                                                                          editedFilter != null ?
                                                                            editedFilter.length != 0 ?
                                                                              [...new Map(editedFilter.map(({ material }) => [material, material])).values()].length == 1 && [...new Map(editedFilter.map(({ material }) => [material, material])).values()][0] == "" ?
                                                                                <p>No Value Exist</p> :
                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                  : " "}
                                                                                  id={inputVal5[index]}
                                                                                  name={index}
                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                >

                                                                                  <option value='selected' >
                                                                                    - - select - -
                                                                                  </option>
                                                                                  {
                                                                                    [...new Map(editedFilter.map(({ material }) => [material, material])).values()]
                                                                                      .map((materl, index) =>
                                                                                      (
                                                                                        materl != "" ?
                                                                                          <option value={materl}>{materl}</option> : ""))
                                                                                  }
                                                                                </select> :
                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                          inputVal5[index] == "pattern" ?
                                                                            editedFilter != null ?
                                                                              editedFilter.length != 0 ?
                                                                                [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()].length == 1 && [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()][0] == "" ?
                                                                                  <p>No Value Exist</p> :
                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                    : " "}
                                                                                    id={inputVal5[index]}
                                                                                    name={index}
                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                  >

                                                                                    <option value='selected' >
                                                                                      - - select - -
                                                                                    </option>
                                                                                    {
                                                                                      [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()]
                                                                                        .map((pattrn, index) =>
                                                                                        (
                                                                                          pattrn != "" ?
                                                                                            <option value={pattrn}>{pattrn}</option> : ""))
                                                                                    }
                                                                                  </select> :
                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                            inputVal5[index] == "identifierExists" ?
                                                                              editedFilter != null ?
                                                                                editedFilter.length != 0 ?
                                                                                  [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()].length == 1 && [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()][0] == "" ?
                                                                                    <p>No Value Exist</p> :
                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                      : " "}
                                                                                      id={inputVal5[index]}
                                                                                      name={index}
                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                    >

                                                                                      <option value='selected' >
                                                                                        - - select - -
                                                                                      </option>
                                                                                      {
                                                                                        [...new Map(variatFilter
                                                                                          .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                                            <option value={condition}> {condition} </option>
                                                                                          ))
                                                                                      }
                                                                                    </select> :
                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                              inputVal5[index] == "productTypes" ?
                                                                                variatFilter != null ?
                                                                                  variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()].length == 1 && [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                        : " "}
                                                                                        id={inputVal5[index]}
                                                                                        name={index}
                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                      >

                                                                                        <option value='selected' >
                                                                                          - - select - -
                                                                                        </option>
                                                                                        {
                                                                                          [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()]
                                                                                            .map((
                                                                                              type, index) =>
                                                                                            (
                                                                                              type !== "" && type !== null ?
                                                                                                <option value={type}>{type}</option> : ""))
                                                                                        }
                                                                                      </select> :
                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                inputVal5[index] == "promotionIds" ?
                                                                                  editedFilter != null ?
                                                                                    editedFilter.length != 0 ?
                                                                                      [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()].length == 1
                                                                                        && [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()][0] == ""
                                                                                        ? <p>No Value Exist</p> :
                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                          : " "}

                                                                                          id={inputVal5[index]}
                                                                                          name={index}
                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                        >

                                                                                          <option value='selected' >
                                                                                            - - select - -
                                                                                          </option>
                                                                                          {
                                                                                            [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()]
                                                                                              .map((pormotion, index) =>
                                                                                              (
                                                                                                pormotion != "" ?
                                                                                                  <option values={pormotion} >{pormotion}</option> : ""))
                                                                                          }
                                                                                        </select> :
                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                  inputVal5[index] == "return_policy_label" ?
                                                                                    editedFilter != null ?
                                                                                      editedFilter.length != 0 ?
                                                                                        [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()].length == 1 && [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()][0] == "" ?
                                                                                          <p>No Value Exist</p> :
                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                            : " "}
                                                                                            id={inputVal5[index]}
                                                                                            name={index}
                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                          >

                                                                                            <option value='selected' >
                                                                                              - - select - -
                                                                                            </option>
                                                                                            {
                                                                                              [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()]
                                                                                                .map((policy, index) =>
                                                                                                (
                                                                                                  policy != "" ?
                                                                                                    <option values={policy} >{policy}</option> : ""))
                                                                                            }
                                                                                          </select> :
                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                    inputVal5[index] == "sizes" ?
                                                                                      editedFilter != null ?
                                                                                        editedFilter.length != 0 ?
                                                                                          [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()].length == 1 && [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()][0] == "" ?
                                                                                            <p>No Value Exist</p> :
                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                              : " "}
                                                                                              id={inputVal5[index]}
                                                                                              name={index}
                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                            >

                                                                                              <option value='selected' >
                                                                                                - - select - -
                                                                                              </option>
                                                                                              {
                                                                                                [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()]
                                                                                                  .map((size, index) =>
                                                                                                  (
                                                                                                    size != "" ?
                                                                                                      <option values={size}>{size}</option> : ""))
                                                                                              }
                                                                                            </select> :
                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                      inputVal5[index] == "sizeSystem" ?
                                                                                        editedFilter != null ?
                                                                                          editedFilter.length != 0 ?
                                                                                            [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()][0] == "" ?
                                                                                              <p>No Value Exist</p> :
                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                : " "}
                                                                                                id={inputVal5[index]}
                                                                                                name={index}
                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                              >

                                                                                                <option value='selected' >
                                                                                                  - - select - -
                                                                                                </option>
                                                                                                {
                                                                                                  [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()]
                                                                                                    .map((sizes, index) =>
                                                                                                    (
                                                                                                      sizes != "" ?
                                                                                                        <option value={sizes}>{sizes}</option> : ""))
                                                                                                }
                                                                                              </select> :
                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                        inputVal5[index] == "sizeType" ?
                                                                                          editedFilter != null ?
                                                                                            editedFilter.length != 0 ?
                                                                                              [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()][0] == "" ?
                                                                                                <p>No Value Exist</p> :
                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                  : " "}
                                                                                                  id={inputVal5[index]}
                                                                                                  name={index}
                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                >

                                                                                                  <option value='selected' >
                                                                                                    - - select - -
                                                                                                  </option>
                                                                                                  {
                                                                                                    [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()]
                                                                                                      .map((type, index) =>
                                                                                                      (
                                                                                                        type != "" ?
                                                                                                          <option value={type}>{type}</option> : ""))
                                                                                                  }
                                                                                                </select> :
                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                          inputVal5[index] == "subscriptionCost" ?
                                                                                            editedFilter != null ?
                                                                                              editedFilter.length != 0 ?
                                                                                                [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()].length == 1 && [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()][0] == "" ?
                                                                                                  <p>No Value Exist</p> :
                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                    : " "}
                                                                                                    id={inputVal5[index]}
                                                                                                    name={index}
                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                  >

                                                                                                    <option value='selected' >
                                                                                                      - - select - -
                                                                                                    </option>
                                                                                                    {
                                                                                                      [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()]
                                                                                                        .map((subcrition, index) =>
                                                                                                        (
                                                                                                          subcrition != "" ?
                                                                                                            <option value={subcrition}>{subcrition}</option> : ""))
                                                                                                    }
                                                                                                  </select> :
                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                            inputVal5[index] == "taxCategory" ?
                                                                                              labelsFilter != null ?
                                                                                                labelsFilter.length != 0 ?
                                                                                                  [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()].length == 1 && [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()][0] == "" ?
                                                                                                    <p>No Value Exist</p> :
                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                      : " "}
                                                                                                      id={inputVal5[index]}
                                                                                                      name={index}
                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                    >

                                                                                                      <option value='selected' >
                                                                                                        - - select - -
                                                                                                      </option>
                                                                                                      {
                                                                                                        [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()]
                                                                                                          .map((Tax, index) =>
                                                                                                          (
                                                                                                            Tax != "" ?
                                                                                                              <option value={Tax}>{Tax}</option> : ""))
                                                                                                      }
                                                                                                    </select> :
                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                              inputVal5[index] == "unitPricingMeasure" ?
                                                                                                editedFilter != null ?
                                                                                                  editedFilter.length != 0 ?
                                                                                                    [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()][0] == "" ?
                                                                                                      <p>No Value Exist</p> :
                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                        : " "}
                                                                                                        id={inputVal5[index]}
                                                                                                        name={index}
                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                      >

                                                                                                        <option value='selected' >
                                                                                                          - - select - -
                                                                                                        </option>
                                                                                                        {
                                                                                                          [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()]
                                                                                                            .map((unit, index) =>
                                                                                                            (
                                                                                                              unit != "" ?
                                                                                                                <option value={unit}>{unit}</option> : ""))
                                                                                                        }
                                                                                                      </select> :
                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                inputVal5[index] == "unitPricingBaseMeasure" ?
                                                                                                  editedFilter != null ?
                                                                                                    editedFilter.length != 0 ?
                                                                                                      [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()][0] == "" ?
                                                                                                        <p>No Value Exist</p> :
                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                          : " "}
                                                                                                          id={inputVal5[index]}
                                                                                                          name={index}
                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                        >

                                                                                                          <option value='selected' >
                                                                                                            - - select - -
                                                                                                          </option>
                                                                                                          {
                                                                                                            [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()]
                                                                                                              .map((unitpricing, index) =>
                                                                                                              (
                                                                                                                unitpricing != "" ?
                                                                                                                  <option value={unitpricing}>{unitpricing}</option> : ""))
                                                                                                          }
                                                                                                        </select> :
                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                  inputVal5[index] == "availability" ?
                                                                                                    editedFilter != null ?
                                                                                                      editedFilter.length != 0 ?
                                                                                                        [...new Map(editedFilter
                                                                                                          .map(({ availability }) => [availability, availability])).values()].length == 1 && [...new Map(editedFilter
                                                                                                            .map(({ availability }) => [availability, availability])).values()][0] == "" ?
                                                                                                          <p>No Value Exist</p> :
                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                            : " "}
                                                                                                            id={inputVal5[index]}
                                                                                                            name={index}
                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                          >

                                                                                                            <option value='selected' >
                                                                                                              - - select - -
                                                                                                            </option>
                                                                                                            {
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ availability }) => [availability, availability])).values()]
                                                                                                                .map((avability, index) =>
                                                                                                                (
                                                                                                                  avability != "" ?
                                                                                                                    <option value={avability}>{avability}</option> : ""))
                                                                                                            }
                                                                                                          </select> :
                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                    inputVal5[index] == "energyEfficiencyClass" ?
                                                                                                      editedFilter != null ?
                                                                                                        editedFilter.length != 0 ?
                                                                                                          [...new Map(editedFilter
                                                                                                            .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                              .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()][0] == "" ?
                                                                                                            <p>No Value Exist</p> :
                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                              : " "}
                                                                                                              id={inputVal5[index]}
                                                                                                              name={index}
                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                            >

                                                                                                              <option value='selected' >
                                                                                                                - - select - -
                                                                                                              </option>
                                                                                                              {
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()]
                                                                                                                  .map((EfficiencyClass, index) =>
                                                                                                                  (
                                                                                                                    EfficiencyClass != "" ?
                                                                                                                      <option value={EfficiencyClass}>{EfficiencyClass}</option> : ""))
                                                                                                              }
                                                                                                            </select> :
                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                      inputVal5[index] == "isBundle" ?
                                                                                                        editedFilter != null ?
                                                                                                          editedFilter.length != 0 ?
                                                                                                            [...new Map(editedFilter
                                                                                                              .map(({ isBundle }) => [isBundle, isBundle])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                .map(({ isBundle }) => [isBundle, isBundle])).values()][0] == "" ?
                                                                                                              <p>No Value Exist</p> :
                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                : " "}
                                                                                                                id={inputVal5[index]}
                                                                                                                name={index}
                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                              >

                                                                                                                <option value='selected' >
                                                                                                                  - - select - -
                                                                                                                </option>
                                                                                                                {
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ isBundle }) => [isBundle, isBundle])).values()]
                                                                                                                    .map((bundle, index) =>
                                                                                                                    (
                                                                                                                      bundle != "" ?
                                                                                                                        <option value={bundle}>{bundle}</option> : ""))
                                                                                                                }
                                                                                                              </select> :
                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                        inputVal5[index] == "loyaltyPoints" ?
                                                                                                          editedFilter != null ?
                                                                                                            editedFilter.length != 0 ?
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                  .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()][0] == "" ?
                                                                                                                <p>No Value Exist</p> :
                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                  : " "}
                                                                                                                  id={inputVal5[index]}
                                                                                                                  name={index}
                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                >

                                                                                                                  <option value='selected' >
                                                                                                                    - - select - -
                                                                                                                  </option>
                                                                                                                  {
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()]
                                                                                                                      .map((loyalti, index) =>
                                                                                                                      (
                                                                                                                        loyalti != "" ?
                                                                                                                          <option value={loyalti}>{loyalti}</option> : ""))
                                                                                                                  }
                                                                                                                </select> :
                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                          inputVal5[index] == "maxEnergyEfficiencyClass" ?
                                                                                                            editedFilter != null ?
                                                                                                              editedFilter.length != 0 ?
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                    .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                  <p>No Value Exist</p> :
                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                    : " "}
                                                                                                                    id={inputVal5[index]}
                                                                                                                    name={index}
                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                  >

                                                                                                                    <option value='selected' >
                                                                                                                      - - select - -
                                                                                                                    </option>
                                                                                                                    {
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()]
                                                                                                                        .map((maxEnergyClass, index) =>
                                                                                                                        (
                                                                                                                          maxEnergyClass != "" ?
                                                                                                                            <option value={maxEnergyClass}>{maxEnergyClass}</option> : ""))
                                                                                                                    }
                                                                                                                  </select> :
                                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                                            inputVal5[index] == "minEnergyEfficiencyClass" ?
                                                                                                              editedFilter != null ?
                                                                                                                editedFilter.length != 0 ?
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                      .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                    <p>No Value Exist</p> :
                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                      : " "}
                                                                                                                      id={inputVal5[index]}
                                                                                                                      name={index}
                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                    >

                                                                                                                      <option value='selected' >
                                                                                                                        - - select - -
                                                                                                                      </option>
                                                                                                                      {
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()]
                                                                                                                          .map((energyEfficiency, index) =>
                                                                                                                          (
                                                                                                                            energyEfficiency != "" ?
                                                                                                                              <option value={energyEfficiency}>{energyEfficiency}</option> : ""))
                                                                                                                      }
                                                                                                                    </select> :
                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                              inputVal5[index] == "maxHandlingTime" ?
                                                                                                                editedFilter != null ?
                                                                                                                  editedFilter.length != 0 ?
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                        .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()][0] == "" ?
                                                                                                                      <p>No Value Exist</p> :
                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                        : " "}
                                                                                                                        id={inputVal5[index]}
                                                                                                                        name={index}
                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                      >

                                                                                                                        <option value='selected' >
                                                                                                                          - - select - -
                                                                                                                        </option>
                                                                                                                        {
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()]
                                                                                                                            .map((MhandlingTime, index) =>
                                                                                                                            (
                                                                                                                              MhandlingTime != "" ?
                                                                                                                                <option value={MhandlingTime}>{MhandlingTime}</option> : ""))
                                                                                                                        }
                                                                                                                      </select> :
                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                inputVal5[index] == "minHandlingTime" ?
                                                                                                                  editedFilter != null ?
                                                                                                                    editedFilter.length != 0 ?
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                          .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()][0] == "" ?
                                                                                                                        <p>No Value Exist</p> :
                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                          : " "}
                                                                                                                          id={inputVal5[index]}
                                                                                                                          name={index}
                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                        >

                                                                                                                          <option value='selected' >
                                                                                                                            - - select - -
                                                                                                                          </option>
                                                                                                                          {
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()]
                                                                                                                              .map((handlingTime, index) =>
                                                                                                                              (
                                                                                                                                handlingTime != "" ?
                                                                                                                                  <option value={handlingTime}>{handlingTime}</option> : ""))
                                                                                                                          }
                                                                                                                        </select> :
                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                  inputVal5[index] == "multipack" ?
                                                                                                                    editedFilter != null ?
                                                                                                                      editedFilter.length != 0 ?
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ multipack }) => [multipack, multipack])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                            .map(({ multipack }) => [multipack, multipack])).values()][0] == "" ?
                                                                                                                          <p>No Value Exist</p> :
                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                            : " "}
                                                                                                                            id={inputVal5[index]}
                                                                                                                            name={index}
                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                          >

                                                                                                                            <option value='selected' >
                                                                                                                              - - select - -
                                                                                                                            </option>
                                                                                                                            {
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ multipack }) => [multipack, multipack])).values()]
                                                                                                                                .map((multi, index) =>
                                                                                                                                (
                                                                                                                                  multi != "" ?
                                                                                                                                    <option value={multi}>{multi}</option> : ""))
                                                                                                                            }
                                                                                                                          </select> :
                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                    inputVal5[index] == "shippingHeight" ?
                                                                                                                      editedFilter != null ?
                                                                                                                        editedFilter.length != 0 ?
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                              .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()][0] == "" ?
                                                                                                                            <p>No Value Exist</p> :
                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                              : " "}
                                                                                                                              id={inputVal5[index]}
                                                                                                                              name={index}
                                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                            >

                                                                                                                              <option value='selected' >
                                                                                                                                - - select - -
                                                                                                                              </option>
                                                                                                                              {
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()]
                                                                                                                                  .map((height, index) =>
                                                                                                                                  (
                                                                                                                                    height != "" ?
                                                                                                                                      <option value={height}>{height}</option> : ""))
                                                                                                                              }
                                                                                                                            </select> :
                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                      inputVal5[index] == "shippingLength" ?
                                                                                                                        editedFilter != null ?
                                                                                                                          editedFilter.length != 0 ?
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ shippingLength }) => [shippingLength, shippingLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                .map(({ shippingLength }) => [shippingLength, shippingLength])).values()][0] == "" ?
                                                                                                                              <p>No Value Exist</p> :
                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                : " "}
                                                                                                                                id={inputVal5[index]}
                                                                                                                                name={index}
                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                              >

                                                                                                                                <option value='selected' >
                                                                                                                                  - - select - -
                                                                                                                                </option>
                                                                                                                                {
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ shippingLength }) => [shippingLength, shippingLength])).values()]
                                                                                                                                    .map((length, index) =>
                                                                                                                                    (
                                                                                                                                      length != "" ?
                                                                                                                                        <option value={length}>{length}</option> : ""))
                                                                                                                                }
                                                                                                                              </select> :
                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                        inputVal5[index] == "shippingWeight" ?
                                                                                                                          editedFilter != null ?
                                                                                                                            editedFilter.length != 0 ?
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()][0] == "" ?
                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                  : " "}
                                                                                                                                  id={inputVal5[index]}
                                                                                                                                  name={index}
                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                >

                                                                                                                                  <option value='selected' >
                                                                                                                                    - - select - -
                                                                                                                                  </option>
                                                                                                                                  {
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()]
                                                                                                                                      .map((Weight, index) =>
                                                                                                                                      (
                                                                                                                                        Weight != "" ?
                                                                                                                                          <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                  }
                                                                                                                                </select> :
                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                          inputVal5[index] == "shippingWidth" ?
                                                                                                                            editedFilter != null ?
                                                                                                                              editedFilter.length != 0 ?
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                    .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()][0] == "" ?
                                                                                                                                  <p>No Value Exist</p> :
                                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                                    : " "}
                                                                                                                                    id={inputVal5[index]}
                                                                                                                                    name={index}
                                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                  >

                                                                                                                                    <option value='selected' >
                                                                                                                                      - - select - -
                                                                                                                                    </option>
                                                                                                                                    {
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()]
                                                                                                                                        .map((Width, index) =>
                                                                                                                                        (
                                                                                                                                          Width != "" ?
                                                                                                                                            <option value={Width}>{Width}</option> : ""))
                                                                                                                                    }
                                                                                                                                  </select> :
                                                                                                                                <p>No Value Exist</p> : "...Loading" :

                                                                                                                            inputVal5[index] == "productHeight" ?
                                                                                                                              editedFilter != null ?
                                                                                                                                editedFilter.length != 0 ?
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ productHeight }) => [productHeight, productHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                      .map(({ productHeight }) => [productHeight, productHeight])).values()][0] == "" ?
                                                                                                                                    <p>No Value Exist</p> :
                                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                                      : " "}
                                                                                                                                      id={inputVal5[index]}
                                                                                                                                      name={index}
                                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                    >

                                                                                                                                      <option value='selected' >
                                                                                                                                        - - select - -
                                                                                                                                      </option>
                                                                                                                                      {
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productHeight }) => [productHeight, productHeight])).values()]
                                                                                                                                          .map((Height, index) =>
                                                                                                                                          (
                                                                                                                                            Height != "" ?
                                                                                                                                              <option value={Height}>{Height}</option> : ""))

                                                                                                                                      }
                                                                                                                                    </select> :
                                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                                              inputVal5[index] == "productLength" ?
                                                                                                                                editedFilter != null ?
                                                                                                                                  editedFilter.length != 0 ?
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ productLength }) => [productLength, productLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                        .map(({ productLength }) => [productLength, productLength])).values()][0] == "" ?
                                                                                                                                      <p>No Value Exist</p> :
                                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                                        : " "}
                                                                                                                                        id={inputVal5[index]}
                                                                                                                                        name={index}
                                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                      >

                                                                                                                                        <option value='selected' >
                                                                                                                                          - - select - -
                                                                                                                                        </option>
                                                                                                                                        {
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ productLength }) => [productLength, productLength])).values()]
                                                                                                                                            .map((Length, index) =>
                                                                                                                                            (
                                                                                                                                              Length != "" ?
                                                                                                                                                <option value={Length}>{Length}</option> : ""))
                                                                                                                                        }
                                                                                                                                      </select> :

                                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                                inputVal5[index] == "productWeight" ?
                                                                                                                                  editedFilter != null ?
                                                                                                                                    editedFilter.length != 0 ?
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ productWeight }) => [productWeight, productWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                          .map(({ productWeight }) => [productWeight, productWeight])).values()][0] == "" ?
                                                                                                                                        <p>No Value Exist</p> :
                                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                                          : " "}
                                                                                                                                          id={inputVal5[index]}
                                                                                                                                          name={index}
                                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                        >

                                                                                                                                          <option value='selected' >
                                                                                                                                            - - select - -
                                                                                                                                          </option>
                                                                                                                                          {
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ productWeight }) => [productWeight, productWeight])).values()]
                                                                                                                                              .map((Weight, index) =>
                                                                                                                                              (
                                                                                                                                                Weight != "" ?
                                                                                                                                                  <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                          }
                                                                                                                                        </select> :
                                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                                  inputVal5[index] == "productWidth" ?
                                                                                                                                    editedFilter != null ?
                                                                                                                                      editedFilter.length != 0 ?
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productWidth }) => [productWidth, productWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                            .map(({ productWidth }) => [productWidth, productWidth])).values()][0] == "" ?
                                                                                                                                          <p>No Value Exist</p> :
                                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                                            : " "}
                                                                                                                                            id={inputVal5[index]}
                                                                                                                                            name={index}
                                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                          >

                                                                                                                                            <option value='selected' >
                                                                                                                                              - - select - -
                                                                                                                                            </option>
                                                                                                                                            {
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ productWidth }) => [productWidth, productWidth])).values()]
                                                                                                                                                .map((Width, index) =>
                                                                                                                                                (
                                                                                                                                                  Width != "" ?
                                                                                                                                                    <option value={Width}>{Width}</option> : ""))
                                                                                                                                            }
                                                                                                                                          </select> :
                                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                                    inputVal5[index] == "pause" ?
                                                                                                                                      editedFilter != null ?
                                                                                                                                        editedFilter.length != 0 ?
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ pause }) => [pause, pause])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                              .map(({ pause }) => [pause, pause])).values()][0] == "" ?
                                                                                                                                            <p>No Value Exist</p> :
                                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                                              : " "}
                                                                                                                                              id={inputVal5[index]}
                                                                                                                                              name={index}
                                                                                                                                              class="border-2 border-[#008060] text
                                      -gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                            >

                                                                                                                                              <option value='selected' >
                                                                                                                                                - - select - -
                                                                                                                                              </option>
                                                                                                                                              {
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ pause }) => [pause, pause])).values()]
                                                                                                                                                  .map((pau, index) =>
                                                                                                                                                  (
                                                                                                                                                    pau != "" ?
                                                                                                                                                      <option value={pau}>{pau}</option> : ""))
                                                                                                                                              }
                                                                                                                                            </select> :
                                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                                      inputVal5[index] == "installment" ?
                                                                                                                                        editedFilter != null ?
                                                                                                                                          editedFilter.length != 0 ?
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ installment }) => [installment, installment])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                                .map(({ installment }) => [installment, installment])).values()][0] == "" ?
                                                                                                                                              <p>No Value Exist</p> :
                                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                                : " "}
                                                                                                                                                id={inputVal5[index]}
                                                                                                                                                name={index}
                                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                              >

                                                                                                                                                <option value='selected' >
                                                                                                                                                  - - select - -
                                                                                                                                                </option>
                                                                                                                                                {
                                                                                                                                                  [...new Map(editedFilter
                                                                                                                                                    .map(({ installment }) => [installment, installment])).values()]
                                                                                                                                                    .map((ins, index) =>
                                                                                                                                                    (
                                                                                                                                                      ins != "" ?
                                                                                                                                                        <option value={ins}>{ins}</option> : ""))
                                                                                                                                                }
                                                                                                                                              </select> :

                                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                                        inputVal5[index] == "transitTimeLabel" ?
                                                                                                                                          editedFilter != null ?
                                                                                                                                            editedFilter.length != 0 ?
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()].length == 1 &&
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()][0] ==
                                                                                                                                                "" ?
                                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                                  : " "}
                                                                                                                                                  id={inputVal5[index]}
                                                                                                                                                  name={index}
                                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                                >

                                                                                                                                                  <option value='selected' >
                                                                                                                                                    - - select - -
                                                                                                                                                  </option>
                                                                                                                                                  {
                                                                                                                                                    [...new Map(editedFilter
                                                                                                                                                      .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()]
                                                                                                                                                      .map((Transmit, index) =>
                                                                                                                                                      (
                                                                                                                                                        Transmit != "" ?
                                                                                                                                                          <option value={Transmit}>{Transmit}</option> : ""))
                                                                                                                                                  }
                                                                                                                                                </select> :
                                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                                          " "}
                                      </div>
                                      <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize', }}
                                        onClick={() => deleteFilters(index)}
                                      ><RemoveCircleIcon style={{ color: '#d72c0d', marginRight: '5px' }} /></Button>
                                    </div>
                                  </>
                                ))}
                                <div className='flex justify-start items-center mt-2 mb-2 pl-4 pr-4'>
                                  <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize' }} onClick={() => { addNewFilters() }}><AddCircleIcon style={{ color: '#008060', marginRight: '5px' }} /> Add Filters </Button>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleApplyFilter()} disabled={!inputVal5 || !message} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => { handleClose2(); }} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                              {/* All Filter Model End*/}
                            </Menu>
                            <button onClick={handleClickColumn} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ViewWeekIcon style={{ color: '#5c5f62' }} />
                                Columns
                              </span>
                            </button>
                            <>
                              <Popover
                                id={id}
                                open={open}
                                anchorEl={anchorEl}
                                onClose={handleCloseColumn}
                                anchorOrigin={{
                                  vertical: 'bottom',
                                  horizontal: 'left',
                                }}
                              >
                                <div className='flex flex-col p-4'>

                                  <FormControlLabel name="id" onChange={handleDefaultColumnsChange} checked={checkedColumns.id} control={<Checkbox style={{ color: '#008060' }} />} label="Id" />

                                  <FormControlLabel name="score" onChange={handleDefaultColumnsChange} checked={checkedColumns.score} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Score" />

                                  <FormControlLabel name="googleStatus" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleStatus} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Status" />

                                  <FormControlLabel name="errorsFromMerchantCenter" onChange={handleDefaultColumnsChange} checked={checkedColumns.errorsFromMerchantCenter} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Error Form Merchant Center" />

                                  <FormControlLabel name="googleProductCategory" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleProductCategory} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Product Category" />

                                  <FormControlLabel name="ageGroup" onChange={handleDefaultColumnsChange} checked={checkedColumns.ageGroup} control={<Checkbox style={{ color: '#008060' }} />} label="Age" />

                                  <FormControlLabel name="gender" onChange={handleDefaultColumnsChange} checked={checkedColumns.gender} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Gender" />

                                  <FormControlLabel name="productCondition" onChange={handleDefaultColumnsChange} checked={checkedColumns.productCondition} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Condition" />

                                  <FormControlLabel name="brand" onChange={handleDefaultColumnsChange} checked={checkedColumns.brand} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Brand" />

                                  <FormControlLabel name="productType" onChange={handleDefaultColumnsChange} checked={checkedColumns.productType} control={<Checkbox style={{ color: '#008060' }} />} label="Product Type" />

                                  <FormControlLabel name="promotionId" onChange={handleDefaultColumnsChange} checked={checkedColumns.promotionId} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Promotion Id" />

                                  <FormControlLabel name="customLabel0" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel0} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 0" />

                                  <FormControlLabel name="customLabel1" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel1} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 1" />

                                  <FormControlLabel name="customLabel2" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel2} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 2" />

                                  <FormControlLabel name="customLabel3" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel3} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 3" />

                                  <FormControlLabel name="customLabel4" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel4} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 4" />

                                </div>
                              </Popover>
                            </>
                            <button aria-controls={open3 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open3 ? 'true' : undefined} onClick={handleClick3} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ScoreboardIcon style={{ color: '#5c5f62' }} />
                                Sort By Score
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl3}
                              open={open3}
                              onClose={handleClose3}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              {/* for score  Start*/}
                              <>
                                <div className='pr-4 pl-4 pt-2 pb-2'>
                                  <p className='mb-2'>Sort Your Product By Score</p>
                                  <Divider />
                                </div>
                                <div className='pr-4 pl-4 pb-2'>
                                  {/* <Box sx={{ width: 300, display: 'flex', justifyContent: 'center', margin: 'auto' }}>
                                    <Slider style={{ color: '#008060' }}
                                      getAriaLabel={() => 'Minimum distance'}
                                      value={value1}
                                      onChange={handleChange1}
                                      valueLabelDisplay="auto"
                                      getAriaValueText={valuetext}
                                      disableSwap
                                      step={7}
                                      marks
                                      min={0}
                                      max={100}
                                    />
                                  </Box>  */}
                                  <div className='flex justify-between items-center'>
                                    <div className='w-32'>
                                      <label for="exampleNumber0" class="form-label inline-block mb-2 text-gray-700" >
                                        Min Score
                                      </label>

                                      <input
                                        onChange={handleInputChange}
                                        value={scoredata.scores.start}
                                        maxLength={2}
                                        type="number"
                                        class=" form-control block w-full px-1 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                        id="exampleNumber0"
                                        placeholder="Value" />
                                    </div>
                                    <div className='w-32'>
                                      <label
                                        for="exampleNumber1"
                                        class="form-label inline-block mb-2 text-gray-700" >
                                        Max Score
                                      </label>

                                      <input
                                        onChange={handleInputChange1}
                                        value={scoredata.scores.end}
                                        type="number"
                                        class=" form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="example Number1"
                                        placeholder="Value"
                                      />
                                    </div>
                                  </div>
                                </div>
                                <div className='pb-2 pr-4 pl-4'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={() => { scorValue() }} className='bg-[#008060]' disabled={scoredata.scores.end == null || scoredata.scores.start == null} variant="contained">Apply</Button>
                                    <Button onClick={(e) => handleClose3()} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                              {/* for score  End*/}
                            </Menu>
                            <button onClick={handleAddProductDrawer} className="relative sm:mt-2 z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black border border-gray-300 rounded-md sm:py-2">
                                <AddIcon style={{ color: '#5c5f62' }} />
                                Add New Products
                              </span>
                            </button>
                            <>
                              {showAddProductDrawer ? (
                                <div className=''>
                                  <div
                                    className="fixed inset-0 w-full h-full bg-black opacity-40"
                                    onClick={handleAddNewProductsDrawerCancel}
                                  ></div>
                                  <div style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                                    className={`top-0 right-0  rounded-tl-lg rounded-bl-lg w-[95%] sm:w-[85%] md:w-[90%] lg:w-[70%] xl:w-[50%] 2xl:w-[60%] bg-white transition-all  p-4 text-black fixed h-full z-40  ease-in-out duration-900 ${showAddProductDrawer ? "translate-x-0 " : "translate-x-full"
                                      }`}
                                  >
                                    <div sx={{ width: '100%', typography: 'body1' }}>
                                      <TabContext value={addProductTabsValue}>
                                        <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                                          <TabList onChange={handleAddProductTabs} aria-label="lab API tabs example">
                                            <Tab label="All Product" value="all" />
                                            <Tab label="Product From Collection" value="collection" />
                                          </TabList>
                                        </div>
                                        <TabPanel value="all">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input
                                                    type="search"
                                                    class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                                    placeholder="Search"
                                                    aria-label="Search"
                                                    aria-describedby="button-addon3"
                                                    onChange={handleAddNewProductsSearch}
                                                  />
                                                  <button onClick={handleAddNewDrawerProductSearch} class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight uppercase rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerProducts && <div class="overflow-scroll" style={{ height: '470px' }}><ul class="divide-y divide-gray-100">
                                              <Checkbox style={{ color: '#008060' }} onChange={handleDrawerProductsSelectionAll}
                                                checked={Object.keys(selectedDrawerProducts).length == drawerProductsData.products.length} /> Select All ({Object.values(selectedDrawerProducts).reduce((acc, curr) => acc + curr.length, 0)})
                                              {drawerProductsData && drawerProductsData.products.length > 0 ? drawerProductsData.products.map((value, index) => (
                                                <li class="pb-3 sm:pb-4 ">
                                                  <div class="flex items-center space-x-4 hover:bg-gray-100 p-2">
                                                    <Checkbox name={value.id} onChange={handleDrawerProductsSelection}
                                                      checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].length == value.variants.length}
                                                      style={{ color: '#008060' }} />
                                                    <div class="flex-shrink-0">
                                                      <img class="w-10 h-10 rounded-full" src={value.image && value.image.src ? value.image.src : ''} alt="Neil image" />
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                  {value.variants.length > 0 ? value.variants.map((element) => (
                                                    <>
                                                      <Divider />
                                                      <div className="ml-5 pt-2 relative hover:bg-gray-100">
                                                        <Checkbox
                                                          style={{ color: '#008060' }}
                                                          checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].indexOf(element.id) != -1}
                                                          onChange={handleDrawerProductVariantSelection}
                                                          name={element.id}
                                                          id={value.id}
                                                        />
                                                        <label className="text-sm">{element.title}</label>
                                                      </div>
                                                    </>
                                                  )) : null
                                                  }
                                                </li>
                                              )) : <li>No Product Found</li>}
                                              {loadingMoreStoreProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "1 rem", marginLeft: "40%" }} size={30} />}
                                              {(drawerProductsData && drawerProductsData.next) && <li class="pb-3 sm:pb-4 "><Button disabled={loadingMoreStoreProducts} onClick={() => { getMoreStoreProducts() }} className='bg-[#008060]' variant="contained">Load More</Button></li>}
                                            </ul></div>}
                                          </>
                                        </TabPanel>
                                        <TabPanel value="collection">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input type="search" class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" placeholder="Search" aria-label="Search" aria-describedby="button-addon3" />
                                                  <button class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight uppercase rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            <div className='h-[50vh] w-full overflow-y-scroll'>
                                              {loadingDrawerCollections && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                              {!loadingDrawerCollections && <ul class="divide-y divide-gray-100">
                                                {storeCollections.length > 0 ? storeCollections.map((value) => (
                                                  <li class="pb-3 sm:pb-4 pt-3 hover:bg-gray-100 h-fit">
                                                    <div class="flex items-center space-x-4">
                                                      <Checkbox
                                                        style={{ color: '#008060' }}
                                                        name={value.id}
                                                        checked={selectedDrawerCollections.indexOf(value.id) != -1}
                                                        onChange={handleDrawerCollectionSelection}
                                                      />
                                                      <div class="flex-1 min-w-0">
                                                        <p class="text-md text-black truncate">
                                                          {value.title}
                                                        </p>
                                                      </div>
                                                    </div>
                                                  </li>
                                                )) : <li>No Collection Found</li>}
                                                {/* <li class="pb-3 sm:pb-4 hover:bg-gray-100">
                                                <div class="flex items-center space-x-4 mt-3">
                                                  <Checkbox style={{ color: '#008060' }} />
                                                  <div class="flex-shrink-0">
                                                    <img class="w-12 h-12 rounded-full" src='https://cdn.shopify.com/s/files/1/0265/5043/5911/products/v--1774937877__-684744191_400x.jpg' alt="Neil image" />
                                                  </div>
                                                  <div class="flex-1 min-w-0">
                                                    <p class="text-md text-black truncate">
                                                      Test Collection
                                                    </p>
                                                  </div>
                                                </div>
                                              </li> */}
                                              </ul>}
                                            </div>
                                          </>
                                        </TabPanel>
                                      </TabContext>
                                      <div className='absolute bottom-1 w-[96%] bg-white z-99'>
                                        <Divider />
                                        <div className='flex justify-between mt-2'>
                                          <Button variant='contained' onClick={handleAddNewProducts}
                                            className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} >Apply</Button>
                                          <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                        </div>
                                      </div>
                                    </div>

                                  </div>
                                </div>
                              ) : null}
                            </>
                          </div>
                        </div>
                      </div>
                      {selectedResources.length > 0 ? (
                        <>
                          <div class="rounded-md ml-2 flex items-center" role="group">
                            <button type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-gray-50 text-black">
                              {selectedResources != "all" ? selectedResources.length : totalResults} Selected
                            </button>
                            <button onClick={handleBulkEditClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border hover:bg-gray-50 text-black">
                              <EditIcon style={{ fontSize: '20px', marginRight: '5px', color: '#3285fa ' }} />
                              Bulk Edit
                            </button>
                            <button onClick={() => setShowSyncFromShopifyModel(!showSyncFromShopifyModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#7cb342" d="M37.216,11.78c-0.023-0.211-0.211-0.305-0.351-0.305s-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	c-0.234-0.234-0.68-0.164-0.867-0.117c-0.023,0-0.469,0.141-1.195,0.375c-0.726-2.086-1.968-3.984-4.194-3.984h-0.211	C24.187,4.375,23.391,4,22.735,4c-5.155,0-7.639,6.444-8.412,9.725c-2.015,0.633-3.445,1.054-3.609,1.125	c-1.125,0.351-1.148,0.375-1.289,1.429c-0.117,0.797-3.046,23.456-3.046,23.456L29.179,44l12.373-2.671	C41.575,41.282,37.24,11.991,37.216,11.78z M27.937,9.483c-0.562,0.164-1.242,0.375-1.921,0.609V9.671	c0-1.265-0.164-2.296-0.469-3.117C26.718,6.695,27.445,7.984,27.937,9.483L27.937,9.483z M24.117,6.812	c0.305,0.797,0.516,1.922,0.516,3.468v0.234c-1.265,0.398-2.601,0.797-3.984,1.242C21.422,8.804,22.899,7.351,24.117,6.812	L24.117,6.812z M22.617,5.359c0.234,0,0.469,0.094,0.656,0.234c-1.664,0.773-3.421,2.718-4.148,6.655	c-1.101,0.351-2.156,0.656-3.163,0.984C16.806,10.233,18.915,5.359,22.617,5.359z"></path><path fill="#558b2f" d="M36.865,11.428c-0.141,0-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	C31.17,8.757,31.053,8.71,30.96,8.71L29.249,44l12.373-2.671c0,0-4.335-29.338-4.359-29.549	C37.169,11.569,37.005,11.475,36.865,11.428z"></path><path fill="#fff" d="M24.792,18.593l-1.475,4.449c0,0-1.337-0.715-2.927-0.715c-2.374,0-2.489,1.498-2.489,1.867	c0,2.028,5.301,2.812,5.301,7.583c0,3.757-2.374,6.177-5.578,6.177c-3.872,0-5.808-2.397-5.808-2.397l1.037-3.411	c0,0,2.028,1.752,3.734,1.752c1.129,0,1.59-0.876,1.59-1.521c0-2.651-4.333-2.766-4.333-7.145c0-3.665,2.628-7.214,7.952-7.214	C23.777,17.994,24.792,18.593,24.792,18.593z"></path></svg>
                              Sync From Shopify
                            </button>
                            <button onClick={() => setShowGoogleSyncModel(!showGoogleSyncModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                              Sync From Google
                            </button>
                            {/* <button onClick={() => setShowIncludeModel(!showIncludeModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CheckCircleIcon style={{ fontSize: '20px', marginRight: '5px', color: '#4CAF50' }} />
                              Include
                            </button> */}
                            <button onClick={handleExcludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CancelIcon style={{ fontSize: '20px', marginRight: '5px', color: '#FF3D00' }} />
                              Exclude
                            </button>
                            <button onClick={() => setShowBulkDeleteModel(!showBulkDeleteModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-gray-50 text-black">
                              <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#d72c0d' }} />
                              Delete
                            </button>
                            {totalResults > resultsPerPageLimit && !filterApplied && (selectedResources == "all" ? <Button onClick={clearAllSelections} style={{ marginLeft: '10px' }}>Undo</Button> : <Button onClick={handleSelectAllProducts} style={{ marginLeft: '10px' }}>Select all {totalResults} products</Button>)}
                          </div>
                        </>
                      ) : null}
                      <div className="w-full inline-block align-middle overflow-x-scroll">
                        <div className="rounded-lg overflow-x w-fit">
                          <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                            <thead className="overflow-x-scroll">
                              <tr>
                                <th scope="col" className="px-4 py-3 text-xs font-bold text-start text-gray-500 capitalize ">
                                  <Checkbox
                                    type="checkbox"
                                    className="form-check-input"
                                    name="allSelect"
                                    checked={selectedResources.length > 0 ? true : false}
                                    onChange={handleProductSelectAll}
                                    style={{ color: '#008060' }}
                                  />

                                </th>
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Name
                                </th>
                                {checkedColumns.id && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Id
                                </th>}
                                {checkedColumns.score && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Score
                                </th>}
                                {checkedColumns.googleStatus && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Status
                                </th>}
                                {checkedColumns.errorsFromMerchantCenter && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Error From Merchant Center
                                </th>}
                                {checkedColumns.googleProductCategory && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Product Category
                                </th>}
                                {checkedColumns.ageGroup && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Age
                                </th>}
                                {checkedColumns.gender && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Gender
                                </th>}
                                {checkedColumns.productCondition && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Condition
                                </th>}
                                {checkedColumns.brand && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Brand
                                </th>}
                                {checkedColumns.productType && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Type
                                </th>}
                                {checkedColumns.promotionId && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Promotion Id
                                </th>}
                                {checkedColumns.customLabel0 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 0
                                </th>}
                                {checkedColumns.customLabel1 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 1
                                </th>}
                                {checkedColumns.customLabel2 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 2
                                </th>}
                                {checkedColumns.customLabel3 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 3
                                </th>}
                                {checkedColumns.customLabel4 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 4
                                </th>}
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Actions
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                              {allProductsRows}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      {/*  pagination */}
                      <>
                        {!filterApplied && <div className='flex justify-center items-center'>
                          <div>
                            <TablePagination
                              component="div"
                              page={currentPage}
                              count={totalResults}
                              onPageChange={handleCurrentPageChange}
                              rowsPerPage={resultsPerPageLimit}
                              rowsPerPageOptions={resultsPerPageOptions}
                              onRowsPerPageChange={handleResultsPerPageChange}
                            />
                          </div>
                        </div>}
                      </>
                    </div>
                  </div>)}
                </TabPanel>
                <TabPanel value="approved">
                  {loadingApprProducts ? (
                    <>
                      <div className="flex flex-col mt-2">
                        <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                          <div className="py-3 w-full pl-2 flex justify-between">
                            <div className="w-[35%] relative">
                              <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                            </div>
                            <div className="w-[60%] flex items-center relative">
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                            </div>
                          </div>
                          <div className="w-full inline-block align-middle overflow-x-scroll">
                            <div className="rounded-lg overflow-x w-fit">
                              <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                                <thead className="overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '4vh' }} />
                                    </div>
                                  </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (<div className="flex flex-col mt-2">
                    <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                      <div className="py-3 pl-2 lg:flex xl:flex 2xl:flex justify-between">
                        <div className="relative w-full lg:w-[25%] xl:w-[40%] 2xl:w-[50%]">
                          <label htmlFor="hs-table-search" className="sr-only">
                            Search
                          </label>
                          <input
                            type="text"
                            onChange={handleFiltersQueryChange}
                            name="hs-table-search"
                            id="hs-table-search"
                            className="block w-full p-2 mt-[10px] pl-10 text-sm border border-[#babfc3] rounded-md focus:border-blue-500 focus:ring-blue-500 "
                            placeholder="Search..."
                          />
                          {tags.map((tag, index) => (
                            <span id="badge-dismiss-dark" class="mt-2 inline-flex items-center py-1 px-2 mr-2 text-sm font-medium text-gray-800 bg-gray-100 rounded ">
                              {tag}
                              <button onClick={() => deleteTag(index)} type="button" class="inline-flex items-center p-0.5 ml-2 text-sm text-gray-400 bg-transparent rounded-sm hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-300 dark:hover:text-gray-900" data-dismiss-target="#badge-dismiss-dark" aria-label="Remove">
                                <svg aria-hidden="true" class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                <span class="sr-only">Remove badge</span>
                              </button>
                            </span>
                          ))}
                        </div>
                        <div style={{ alignItems: 'baseline' }} className="flex flex-wrap mt-2 lg:m-0 xl:m-0 2xl:m-0 items-center space-x-2 align-baseline">
                          <div className="relative">
                            <button onClick={handleExportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <PublishIcon style={{ color: '#5c5f62' }} />
                                Export
                              </span>
                            </button>
                            <button onClick={handleImportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <GetAppIcon style={{ color: '#5c5f62' }} />
                                Import
                              </span>
                            </button>
                            <button aria-controls={open2 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open2 ? 'true' : undefined} onClick={handleClick2} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <TuneIcon style={{ color: '#5c5f62' }} />
                                Filters
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl2}
                              open={open2}
                              onClose={handleClose2}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              {/* All Filter Model */}
                              <>
                                <div className='pt-2 pb-2 pr-4 pl-4'>
                                  <p>Search By Filters</p>
                                  <Divider />
                                </div>
                                {productFilters.map((val, index) => (
                                  <>
                                    <div value={index} className='flex justify-between items-center p-4'>
                                      <div className='mr-2'>
                                        <select
                                          onChange={handlefilterState}
                                          id="countries"
                                          name={index}
                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                        >
                                          <option disabled selected value>
                                            - - select - -
                                          </option>
                                          <option value="adsGrouping" selected={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ? productFilterFromDb[index]['name'] == "adsGrouping" ? true : false : false : false}>Ads Grouping</option>
                                          <option value="adsLabels" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adsLabels" ? true : false : false : false
                                          }>Ads Labels</option>
                                          <option value="shippingLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLabel" ? true : false : false : false
                                          }>Shipping Label</option>
                                          <option value="adult" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adult" ? true : false : false : false
                                          }>Product is Adult-oriented</option>
                                          <option value="ageGroup" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "ageGroup" ? true : false : false : false
                                          }>Age Group</option>
                                          <option value="productCondition" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productCondition" ? true : false : false : false
                                          }>Condition</option>
                                          <option value="merchantErrors" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "merchantErrors" ? true : false : false : false
                                          }>Merchant Errors</option>
                                          <option value="color" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "color" ? true : false : false : false
                                          }>Color - Assigned For Feed</option>
                                          <option value="costOfGoodsSold" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "costOfGoodsSold" ? true : false : false : false
                                          }>Cost Of Goods Sold</option>
                                          <option value="customLabel0" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel0" ? true : false : false : false
                                          }>Custom Label 0</option>
                                          <option value="customLabel1" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel1" ? true : false : false : false
                                          }>Custom Label 1</option>
                                          <option value="customLabel2" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel2" ? true : false : false
                                          }>Custom Label 2</option>
                                          <option value="customLabel3" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel3" ? true : false : false : false
                                          }>Custom Label 3</option>
                                          <option value="customLabel4" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel4" ? true : false : false : false
                                          }> Custom Label 4</option>
                                          <option value="product_category_id" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "product_category_id" ? true : false : false : false

                                          }>Google Product Categories</option>
                                          <option value="material" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "material" ? true : false : false : false

                                          }>Material - Assigned For Feed</option>
                                          <option value="pattern" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pattern" ? true : false : false : false
                                          }>Pattern - Assigned For Feed</option>
                                          <option value="subscriptionCost" selected={

                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "subscriptionCost" ? true : false : false : false
                                          }
                                          >Subscription cost </option>
                                          <option value="identifierExists" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "identifierExists" ? true : false : false : false
                                          }>Product Identifier Exists</option>
                                          <option value="productTypes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productTypes" ? true : false : false : false
                                          }>Product Type</option>
                                          <option value="promotionIds" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "promotionIds " ? true : false : false : false
                                          }>Promotion Id</option>
                                          <option value="return_policy_label" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "return_policy_label" ? true : false : false : false
                                          }>Return Policy Label</option>
                                          <option value="sizes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizes" ? true : false : false : false
                                          }>Size - Assigned For Feed</option>
                                          <option value="sizeSystem" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeSystem" ? true : false : false : false
                                          }>Size System</option>
                                          <option value="sizeType" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeType" ? true : false : false : false
                                          }>Size Type</option>
                                          <option value="taxCategory" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "taxCategory" ? true : false : false : false
                                          }>Tax Category</option>
                                          <option value="unitPricingMeasure" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "unitPricingMeasure" ? true : false : false : false
                                          }
                                          >Unit Pricing Measure</option>
                                          <option value="unitPricingBaseMeasure"
                                            selected={
                                              productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                                productFilterFromDb[index]['name'] ==
                                                  "unitPricingBaseMeasure" ? true : false : false : false
                                            }
                                          >Unit Pricing Base Measure</option>
                                          <option value="availability" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "avaibility" ? true : false : false : false
                                          }>Availability</option>
                                          <option value="isBundle" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "isBundle" ? true : false : false : false
                                          }>Is it bundle</option>
                                          <option value="loyaltyPoints" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "loyaltyPoints" ? true : false : false : false
                                          }>Loyalty Points</option>
                                          <option value="energyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "energyEfficiencyClass" ? true : false : false : false
                                          }>Energy Efficiency Class</option>
                                          <option value="maxEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxEnergyEfficiencyClass" ? true : false : false : false
                                          }>Max Energy Efficiency Class</option>
                                          <option value="minEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minEnergyEfficiencyClass" ? true : false : false : false
                                          }>Min Energy Efficiency Class</option>
                                          <option value="maxHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxHandlingTime" ? true : false : false : false
                                          }>Max Handling Time</option>
                                          <option value="minHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minHandlingTime" ? true : false : false : false
                                          }>Min Handling Time</option>
                                          <option value="multipack" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "multipack" ? true : false : false : false
                                          }>Multipack</option>
                                          <option value="shippingHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingHeight" ? true : false : false : false
                                          }>Shipping Height</option>
                                          <option value="shippingLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLength" ? true : false : false : false
                                          }>Shipping Length</option>
                                          <option value="shippingWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWeight" ? true : false : false : false
                                          }>Shipping Weight</option>
                                          <option value="shippingWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWidth" ? true : false : false : false
                                          }>Shipping Width</option>
                                          <option value="transitTimeLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "transitTimeLabel " ? true : false : false : false
                                          }>Transit Time Label</option>
                                          <option value="productHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productHeight" ? true : false : false : false
                                          }>Product Height</option>
                                          <option value="productLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productLength" ? true : false : false
                                          }>Product Length</option>
                                          <option value="productWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWidth" ? true : false : false : false
                                          }>Product Weight</option>
                                          <option value="productWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWeight" ? true : false : false : false
                                          }>Product Width</option>
                                          <option value="installment" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "installment" ? true : false : false : false
                                          }>Installment</option>
                                          <option value="pause" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pause" ? true : false : false : false
                                          }> Product Pause</option>
                                        </select>
                                      </div>
                                      <div className='mr-2'>
                                        {
                                          inputVal5[index] == "adsGrouping" ?
                                            labelsFilter != null ?
                                              labelsFilter.length != 0 ?
                                                [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()][0] == "" ?
                                                  <p>No Value Exist</p> :
                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                    productFilterFromDb[index]['value'] : " "
                                                    : " "}
                                                    id={inputVal5[index]}
                                                    name={index}
                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                  >

                                                    <option value='selected' >
                                                      - - select - -
                                                    </option>
                                                    {
                                                      [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()]
                                                        .map((label, i) =>
                                                        (
                                                          label != "" ?
                                                            <option value={label}>{label}</option> : ""))
                                                    }
                                                  </select> :
                                                <p>No Value Exist</p> : "....Loading" :
                                            inputVal5[index] == "adsLabels" ?
                                              labelsFilter != null ?
                                                labelsFilter.length != 0 ?
                                                  [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()][0] == "" ?
                                                    <p>No Value Exist</p> :
                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                      productFilterFromDb[index]['value'] : " "
                                                      : " "}
                                                      id={inputVal5[index]}
                                                      name={index}
                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                    >

                                                      <option value='selected' >
                                                        - - select - -
                                                      </option>
                                                      {
                                                        [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()]
                                                          .map((label, index) =>
                                                          (
                                                            label != "" ?
                                                              <option value={label}>{label}</option> : ""))
                                                      }
                                                    </select> :
                                                  <p>No Value Exist</p> : "...Loading" :
                                              inputVal5[index] == "shippingLabel" ?
                                                labelsFilter != null ?
                                                  labelsFilter.length != 0 ?
                                                    [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()].length == 1 && [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()][0] != "" ? <p>No Value Exist</p>
                                                      :
                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                        productFilterFromDb[index]['value'] : " "
                                                        : " "}
                                                        id={inputVal5[index]}
                                                        name={index}
                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                      >

                                                        <option value='selected' >
                                                          - - select - -
                                                        </option>
                                                        {
                                                          [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()]
                                                            .map((label, index) =>
                                                            (
                                                              label != "" ?
                                                                <option value={label}>{label}</option> : ""))
                                                        }
                                                      </select>
                                                    : <p>No Value Exist</p> : "...Loading"
                                                : inputVal5[index] == "adult" ?
                                                  editedFilter != null ?
                                                    editedFilter.length != 0 ?
                                                      [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()].length != 0 ?
                                                        <p>No Value Exist</p> :
                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                          productFilterFromDb[index]['value'] : " "
                                                          : " "}
                                                          id={inputVal5[index]}
                                                          name={index}
                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                        >

                                                          <option value='selected' >
                                                            - - select - -
                                                          </option>
                                                          {
                                                            [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()]
                                                              .map((adult, index) =>
                                                              (
                                                                adult != "" ?
                                                                  <option value={adult}>{adult}</option> : ""))
                                                          }
                                                        </select>
                                                      : <p>No Value Exist</p> : "...Loading"
                                                  : inputVal5[index] == "ageGroup" ?
                                                    variatFilter != null ?
                                                      variatFilter.length != 0 ?
                                                        [...new Map(variatFilter.map(({
                                                          ageGroup }) => [ageGroup, ageGroup])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                            ageGroup }) => [ageGroup, ageGroup])).values()][0] == "" ?
                                                          <p>No Value Exist</p> :
                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                            productFilterFromDb[index]['value'] : " "
                                                            : " "}
                                                            id={inputVal5[index]}
                                                            name={index}
                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                          >
                                                            <option value='selected' >
                                                              - - select - -
                                                            </option>
                                                            {
                                                              [...new Map(variatFilter.map(({
                                                                ageGroup }) => [ageGroup, ageGroup])).values()].map((age, index) => (
                                                                  <option value={age}> {age} </option>
                                                                ))
                                                            }
                                                          </select> :
                                                        <p>No Value Exist</p> : "...Loading" :
                                                    inputVal5[index] == "productCondition" ?
                                                      variatFilter != null ?
                                                        variatFilter.length != 0 ?
                                                          [...new Map(variatFilter
                                                            .map(({ productCondition }) => [productCondition, productCondition])).values()].length == 1 && [...new Map(variatFilter
                                                              .map(({ productCondition }) => [productCondition, productCondition])).values()][0] == "" ? <p>No Value Exist</p> :
                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                              productFilterFromDb[index]['value'] : " "
                                                              : " "}
                                                              id={inputVal5[index]}
                                                              name={index}
                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                            >

                                                              <option value='selected' >
                                                                - - select - -
                                                              </option>
                                                              {
                                                                [...new Map(variatFilter
                                                                  .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                    <option value={condition}> {condition} </option>
                                                                  ))
                                                              }
                                                            </select> :
                                                          <p>No Value Exist</p> : "...Loading" :

                                                      inputVal5[index] == "merchantErrors" ?
                                                        variatFilter != null ?
                                                          variatFilter.length != 0 ?
                                                            [...new Map(variatFilter
                                                              .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].length == 1 && [...new Map(variatFilter
                                                                .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()][0] == "" ? <p>No Value Exist</p> :
                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                productFilterFromDb[index]['value'] : " "
                                                                : " "}
                                                                id={inputVal5[index]}
                                                                name={index}
                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                              >

                                                                <option value='selected' >
                                                                  - - select - -
                                                                </option>
                                                                {
                                                                  [...new Map(variatFilter
                                                                    .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].map((error, index) => (
                                                                      <option value={error}> {error} </option>
                                                                    ))
                                                                }
                                                              </select> :
                                                            <p>No Value Exist</p> : "...Loading" :

                                                        inputVal5[index] == "color" ?
                                                          editedFilter != null ?
                                                            editedFilter.length != 0 ?
                                                              [...new Map(editedFilter.map(({ color }) => [color, color])).values()].length == 1 && [...new Map(editedFilter.map(({ color }) => [color, color])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                <select onChange={handleChangeInput} value={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ? productFilterFromDb[index]['value'] : " " : " "}
                                                                  id={inputVal5[index]}
                                                                  name={index}
                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                >
                                                                  <option value='selected' >
                                                                    - - select - -
                                                                  </option>
                                                                  {
                                                                    [...new Map(editedFilter.map(({ color }) => [color, color])).values()]
                                                                      .map((colr, index) =>
                                                                      (
                                                                        colr != "" ?
                                                                          <option value={colr}>{colr}</option> : ""))
                                                                  }
                                                                </select> :
                                                              <p>No Value Exist</p> : "...Loading" :
                                                          inputVal5[index] == "costOfGoodsSold" ?
                                                            editedFilter != null ?
                                                              editedFilter.length != 0 ?

                                                                [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                  .length == 1 && [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()][0] == "" ?
                                                                  <p>No Value Exist</p> :
                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                    && productFilterFromDb[index] ?
                                                                    productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                    : " "}
                                                                    id={inputVal5[index]}
                                                                    name={index}
                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                  >

                                                                    <option value='selected' >
                                                                      - - select - -
                                                                    </option>
                                                                    {
                                                                      [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                        .map((cost, index) =>
                                                                        (
                                                                          cost != "" ?
                                                                            <option value={cost}>{cost}</option> : ""))
                                                                    }
                                                                  </select> :
                                                                <p>No Value Exist</p> : "...Loading" :
                                                            inputVal5[index] == "customLabel0" ?
                                                              labelsFilter != null ?
                                                                labelsFilter.length != 0 ?
                                                                  [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()][0] == "" ?
                                                                    <p>No Value Exist</p> :
                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                      : " "}
                                                                      id={inputVal5[index]}
                                                                      name={index}
                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                    >

                                                                      <option value='selected' >
                                                                        - - select - -
                                                                      </option>
                                                                      {
                                                                        [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()]
                                                                          .map((label0, index) =>
                                                                          (
                                                                            label0 != "" ?
                                                                              <option value={label0}>{label0}</option> : ""))
                                                                      }
                                                                    </select> :
                                                                  <p>No Value Exist</p> : "...Loading" :
                                                              inputVal5[index] == "customLabel1" ?
                                                                labelsFilter != null ?
                                                                  labelsFilter.length != 0 ?
                                                                    [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                        productFilterFromDb[index]['value'] : " "
                                                                        : " "}
                                                                        id={inputVal5[index]}
                                                                        name={index}
                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                      >

                                                                        <option value='selected' >
                                                                          - - select - -
                                                                        </option>
                                                                        {
                                                                          [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()]
                                                                            .map((label1, index) =>
                                                                            (
                                                                              label1 != "" ?
                                                                                <option value={label1}>{label1}</option> : ""))
                                                                        }
                                                                      </select> :
                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                inputVal5[index] == "customLabel2" ?
                                                                  labelsFilter != null ?
                                                                    labelsFilter.length != 0 ?
                                                                      [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()][0] == "" ?
                                                                        <p>No Value Exist</p> :
                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                          productFilterFromDb[index]['value'] : " "
                                                                          : " "}
                                                                          id={inputVal5[index]}
                                                                          name={index}
                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                        >

                                                                          <option value='selected' >
                                                                            - - select - -
                                                                          </option>
                                                                          {
                                                                            [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].map((label2, index) =>
                                                                            (
                                                                              label2 != "" ?
                                                                                <option value={label2}>{label2}</option> : ""))
                                                                          }
                                                                        </select>
                                                                      : <p>No Value Exist</p> : "...Loading" :
                                                                  inputVal5[index] == "customLabel3" ?
                                                                    labelsFilter != null ?
                                                                      labelsFilter.length != 0 ?
                                                                        [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                            productFilterFromDb[index]['value'] : " "
                                                                            : " "}
                                                                            id={inputVal5[index]}
                                                                            name={index}
                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                          >

                                                                            <option value='selected' >
                                                                              - - select - -
                                                                            </option>
                                                                            {
                                                                              [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()]
                                                                                .map((label3, index) =>
                                                                                (
                                                                                  label3 != "" ?
                                                                                    <option value={label3}>{label3}</option> : ""))
                                                                            }
                                                                          </select> :
                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                    inputVal5[index] == "customLabel4" ?
                                                                      labelsFilter != null ?
                                                                        labelsFilter.length != 0 ?

                                                                          [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()]
                                                                                  .map((label4, index) =>
                                                                                  (
                                                                                    label4 != "" ?
                                                                                      <option value={label4}>{label4}</option> : ""))
                                                                              }
                                                                            </select> :
                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                      inputVal5[index] == "product_category_id" ?
                                                                        variatFilter != null ?
                                                                          [...new Map(variatFilter.map(({
                                                                            product_category_id }) => [product_category_id, product_category_id])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                                              product_category_id }) => [product_category_id, product_category_id])).values()][0] != "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                productCategories.map((category, index) => (
                                                                                  variatFilter != "" &&
                                                                                    variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({
                                                                                      product_category_id }) => [product_category_id, product_category_id])).values()].map((id, index) => (
                                                                                        id == category.id ?
                                                                                          <option value={category.id}>{category.name}</option> : " "
                                                                                      )) : ""
                                                                                ))
                                                                              }
                                                                            </select> : "....Loading" :
                                                                        inputVal5[index] == "material" ?
                                                                          editedFilter != null ?
                                                                            editedFilter.length != 0 ?
                                                                              [...new Map(editedFilter.map(({ material }) => [material, material])).values()].length == 1 && [...new Map(editedFilter.map(({ material }) => [material, material])).values()][0] == "" ?
                                                                                <p>No Value Exist</p> :
                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                  : " "}
                                                                                  id={inputVal5[index]}
                                                                                  name={index}
                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                >

                                                                                  <option value='selected' >
                                                                                    - - select - -
                                                                                  </option>
                                                                                  {
                                                                                    [...new Map(editedFilter.map(({ material }) => [material, material])).values()]
                                                                                      .map((materl, index) =>
                                                                                      (
                                                                                        materl != "" ?
                                                                                          <option value={materl}>{materl}</option> : ""))
                                                                                  }
                                                                                </select> :
                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                          inputVal5[index] == "pattern" ?
                                                                            editedFilter != null ?
                                                                              editedFilter.length != 0 ?
                                                                                [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()].length == 1 && [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()][0] == "" ?
                                                                                  <p>No Value Exist</p> :
                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                    : " "}
                                                                                    id={inputVal5[index]}
                                                                                    name={index}
                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                  >

                                                                                    <option value='selected' >
                                                                                      - - select - -
                                                                                    </option>
                                                                                    {
                                                                                      [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()]
                                                                                        .map((pattrn, index) =>
                                                                                        (
                                                                                          pattrn != "" ?
                                                                                            <option value={pattrn}>{pattrn}</option> : ""))
                                                                                    }
                                                                                  </select> :
                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                            inputVal5[index] == "identifierExists" ?
                                                                              editedFilter != null ?
                                                                                editedFilter.length != 0 ?
                                                                                  [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()].length == 1 && [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()][0] == "" ?
                                                                                    <p>No Value Exist</p> :
                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                      : " "}
                                                                                      id={inputVal5[index]}
                                                                                      name={index}
                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                    >

                                                                                      <option value='selected' >
                                                                                        - - select - -
                                                                                      </option>
                                                                                      {
                                                                                        [...new Map(variatFilter
                                                                                          .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                                            <option value={condition}> {condition} </option>
                                                                                          ))
                                                                                      }
                                                                                    </select> :
                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                              inputVal5[index] == "productTypes" ?
                                                                                variatFilter != null ?
                                                                                  variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()].length == 1 && [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                        : " "}
                                                                                        id={inputVal5[index]}
                                                                                        name={index}
                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                      >

                                                                                        <option value='selected' >
                                                                                          - - select - -
                                                                                        </option>
                                                                                        {
                                                                                          [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()]
                                                                                            .map((
                                                                                              type, index) =>
                                                                                            (
                                                                                              type !== "" && type !== null ?
                                                                                                <option value={type}>{type}</option> : ""))
                                                                                        }
                                                                                      </select> :
                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                inputVal5[index] == "promotionIds" ?
                                                                                  editedFilter != null ?
                                                                                    editedFilter.length != 0 ?
                                                                                      [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()].length == 1
                                                                                        && [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()][0] == ""
                                                                                        ? <p>No Value Exist</p> :
                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                          : " "}

                                                                                          id={inputVal5[index]}
                                                                                          name={index}
                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                        >

                                                                                          <option value='selected' >
                                                                                            - - select - -
                                                                                          </option>
                                                                                          {
                                                                                            [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()]
                                                                                              .map((pormotion, index) =>
                                                                                              (
                                                                                                pormotion != "" ?
                                                                                                  <option values={pormotion} >{pormotion}</option> : ""))
                                                                                          }
                                                                                        </select> :
                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                  inputVal5[index] == "return_policy_label" ?
                                                                                    editedFilter != null ?
                                                                                      editedFilter.length != 0 ?
                                                                                        [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()].length == 1 && [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()][0] == "" ?
                                                                                          <p>No Value Exist</p> :
                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                            : " "}
                                                                                            id={inputVal5[index]}
                                                                                            name={index}
                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                          >

                                                                                            <option value='selected' >
                                                                                              - - select - -
                                                                                            </option>
                                                                                            {
                                                                                              [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()]
                                                                                                .map((policy, index) =>
                                                                                                (
                                                                                                  policy != "" ?
                                                                                                    <option values={policy} >{policy}</option> : ""))
                                                                                            }
                                                                                          </select> :
                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                    inputVal5[index] == "sizes" ?
                                                                                      editedFilter != null ?
                                                                                        editedFilter.length != 0 ?
                                                                                          [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()].length == 1 && [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()][0] == "" ?
                                                                                            <p>No Value Exist</p> :
                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                              : " "}
                                                                                              id={inputVal5[index]}
                                                                                              name={index}
                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                            >

                                                                                              <option value='selected' >
                                                                                                - - select - -
                                                                                              </option>
                                                                                              {
                                                                                                [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()]
                                                                                                  .map((size, index) =>
                                                                                                  (
                                                                                                    size != "" ?
                                                                                                      <option values={size}>{size}</option> : ""))
                                                                                              }
                                                                                            </select> :
                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                      inputVal5[index] == "sizeSystem" ?
                                                                                        editedFilter != null ?
                                                                                          editedFilter.length != 0 ?
                                                                                            [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()][0] == "" ?
                                                                                              <p>No Value Exist</p> :
                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                : " "}
                                                                                                id={inputVal5[index]}
                                                                                                name={index}
                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                              >

                                                                                                <option value='selected' >
                                                                                                  - - select - -
                                                                                                </option>
                                                                                                {
                                                                                                  [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()]
                                                                                                    .map((sizes, index) =>
                                                                                                    (
                                                                                                      sizes != "" ?
                                                                                                        <option value={sizes}>{sizes}</option> : ""))
                                                                                                }
                                                                                              </select> :
                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                        inputVal5[index] == "sizeType" ?
                                                                                          editedFilter != null ?
                                                                                            editedFilter.length != 0 ?
                                                                                              [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()][0] == "" ?
                                                                                                <p>No Value Exist</p> :
                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                  : " "}
                                                                                                  id={inputVal5[index]}
                                                                                                  name={index}
                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                >

                                                                                                  <option value='selected' >
                                                                                                    - - select - -
                                                                                                  </option>
                                                                                                  {
                                                                                                    [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()]
                                                                                                      .map((type, index) =>
                                                                                                      (
                                                                                                        type != "" ?
                                                                                                          <option value={type}>{type}</option> : ""))
                                                                                                  }
                                                                                                </select> :
                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                          inputVal5[index] == "subscriptionCost" ?
                                                                                            editedFilter != null ?
                                                                                              editedFilter.length != 0 ?
                                                                                                [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()].length == 1 && [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()][0] == "" ?
                                                                                                  <p>No Value Exist</p> :
                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                    : " "}
                                                                                                    id={inputVal5[index]}
                                                                                                    name={index}
                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                  >

                                                                                                    <option value='selected' >
                                                                                                      - - select - -
                                                                                                    </option>
                                                                                                    {
                                                                                                      [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()]
                                                                                                        .map((subcrition, index) =>
                                                                                                        (
                                                                                                          subcrition != "" ?
                                                                                                            <option value={subcrition}>{subcrition}</option> : ""))
                                                                                                    }
                                                                                                  </select> :
                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                            inputVal5[index] == "taxCategory" ?
                                                                                              labelsFilter != null ?
                                                                                                labelsFilter.length != 0 ?
                                                                                                  [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()].length == 1 && [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()][0] == "" ?
                                                                                                    <p>No Value Exist</p> :
                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                      : " "}
                                                                                                      id={inputVal5[index]}
                                                                                                      name={index}
                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                    >

                                                                                                      <option value='selected' >
                                                                                                        - - select - -
                                                                                                      </option>
                                                                                                      {
                                                                                                        [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()]
                                                                                                          .map((Tax, index) =>
                                                                                                          (
                                                                                                            Tax != "" ?
                                                                                                              <option value={Tax}>{Tax}</option> : ""))
                                                                                                      }
                                                                                                    </select> :
                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                              inputVal5[index] == "unitPricingMeasure" ?
                                                                                                editedFilter != null ?
                                                                                                  editedFilter.length != 0 ?
                                                                                                    [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()][0] == "" ?
                                                                                                      <p>No Value Exist</p> :
                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                        : " "}
                                                                                                        id={inputVal5[index]}
                                                                                                        name={index}
                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                      >

                                                                                                        <option value='selected' >
                                                                                                          - - select - -
                                                                                                        </option>
                                                                                                        {
                                                                                                          [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()]
                                                                                                            .map((unit, index) =>
                                                                                                            (
                                                                                                              unit != "" ?
                                                                                                                <option value={unit}>{unit}</option> : ""))
                                                                                                        }
                                                                                                      </select> :
                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                inputVal5[index] == "unitPricingBaseMeasure" ?
                                                                                                  editedFilter != null ?
                                                                                                    editedFilter.length != 0 ?
                                                                                                      [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()][0] == "" ?
                                                                                                        <p>No Value Exist</p> :
                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                          : " "}
                                                                                                          id={inputVal5[index]}
                                                                                                          name={index}
                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                        >

                                                                                                          <option value='selected' >
                                                                                                            - - select - -
                                                                                                          </option>
                                                                                                          {
                                                                                                            [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()]
                                                                                                              .map((unitpricing, index) =>
                                                                                                              (
                                                                                                                unitpricing != "" ?
                                                                                                                  <option value={unitpricing}>{unitpricing}</option> : ""))
                                                                                                          }
                                                                                                        </select> :
                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                  inputVal5[index] == "availability" ?
                                                                                                    editedFilter != null ?
                                                                                                      editedFilter.length != 0 ?
                                                                                                        [...new Map(editedFilter
                                                                                                          .map(({ availability }) => [availability, availability])).values()].length == 1 && [...new Map(editedFilter
                                                                                                            .map(({ availability }) => [availability, availability])).values()][0] == "" ?
                                                                                                          <p>No Value Exist</p> :
                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                            : " "}
                                                                                                            id={inputVal5[index]}
                                                                                                            name={index}
                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                          >

                                                                                                            <option value='selected' >
                                                                                                              - - select - -
                                                                                                            </option>
                                                                                                            {
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ availability }) => [availability, availability])).values()]
                                                                                                                .map((avability, index) =>
                                                                                                                (
                                                                                                                  avability != "" ?
                                                                                                                    <option value={avability}>{avability}</option> : ""))
                                                                                                            }
                                                                                                          </select> :
                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                    inputVal5[index] == "energyEfficiencyClass" ?
                                                                                                      editedFilter != null ?
                                                                                                        editedFilter.length != 0 ?
                                                                                                          [...new Map(editedFilter
                                                                                                            .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                              .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()][0] == "" ?
                                                                                                            <p>No Value Exist</p> :
                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                              : " "}
                                                                                                              id={inputVal5[index]}
                                                                                                              name={index}
                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                            >

                                                                                                              <option value='selected' >
                                                                                                                - - select - -
                                                                                                              </option>
                                                                                                              {
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()]
                                                                                                                  .map((EfficiencyClass, index) =>
                                                                                                                  (
                                                                                                                    EfficiencyClass != "" ?
                                                                                                                      <option value={EfficiencyClass}>{EfficiencyClass}</option> : ""))
                                                                                                              }
                                                                                                            </select> :
                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                      inputVal5[index] == "isBundle" ?
                                                                                                        editedFilter != null ?
                                                                                                          editedFilter.length != 0 ?
                                                                                                            [...new Map(editedFilter
                                                                                                              .map(({ isBundle }) => [isBundle, isBundle])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                .map(({ isBundle }) => [isBundle, isBundle])).values()][0] == "" ?
                                                                                                              <p>No Value Exist</p> :
                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                : " "}
                                                                                                                id={inputVal5[index]}
                                                                                                                name={index}
                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                              >

                                                                                                                <option value='selected' >
                                                                                                                  - - select - -
                                                                                                                </option>
                                                                                                                {
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ isBundle }) => [isBundle, isBundle])).values()]
                                                                                                                    .map((bundle, index) =>
                                                                                                                    (
                                                                                                                      bundle != "" ?
                                                                                                                        <option value={bundle}>{bundle}</option> : ""))
                                                                                                                }
                                                                                                              </select> :
                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                        inputVal5[index] == "loyaltyPoints" ?
                                                                                                          editedFilter != null ?
                                                                                                            editedFilter.length != 0 ?
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                  .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()][0] == "" ?
                                                                                                                <p>No Value Exist</p> :
                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                  : " "}
                                                                                                                  id={inputVal5[index]}
                                                                                                                  name={index}
                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                >

                                                                                                                  <option value='selected' >
                                                                                                                    - - select - -
                                                                                                                  </option>
                                                                                                                  {
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()]
                                                                                                                      .map((loyalti, index) =>
                                                                                                                      (
                                                                                                                        loyalti != "" ?
                                                                                                                          <option value={loyalti}>{loyalti}</option> : ""))
                                                                                                                  }
                                                                                                                </select> :
                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                          inputVal5[index] == "maxEnergyEfficiencyClass" ?
                                                                                                            editedFilter != null ?
                                                                                                              editedFilter.length != 0 ?
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                    .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                  <p>No Value Exist</p> :
                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                    : " "}
                                                                                                                    id={inputVal5[index]}
                                                                                                                    name={index}
                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                  >

                                                                                                                    <option value='selected' >
                                                                                                                      - - select - -
                                                                                                                    </option>
                                                                                                                    {
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()]
                                                                                                                        .map((maxEnergyClass, index) =>
                                                                                                                        (
                                                                                                                          maxEnergyClass != "" ?
                                                                                                                            <option value={maxEnergyClass}>{maxEnergyClass}</option> : ""))
                                                                                                                    }
                                                                                                                  </select> :
                                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                                            inputVal5[index] == "minEnergyEfficiencyClass" ?
                                                                                                              editedFilter != null ?
                                                                                                                editedFilter.length != 0 ?
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                      .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                    <p>No Value Exist</p> :
                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                      : " "}
                                                                                                                      id={inputVal5[index]}
                                                                                                                      name={index}
                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                    >

                                                                                                                      <option value='selected' >
                                                                                                                        - - select - -
                                                                                                                      </option>
                                                                                                                      {
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()]
                                                                                                                          .map((energyEfficiency, index) =>
                                                                                                                          (
                                                                                                                            energyEfficiency != "" ?
                                                                                                                              <option value={energyEfficiency}>{energyEfficiency}</option> : ""))
                                                                                                                      }
                                                                                                                    </select> :
                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                              inputVal5[index] == "maxHandlingTime" ?
                                                                                                                editedFilter != null ?
                                                                                                                  editedFilter.length != 0 ?
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                        .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()][0] == "" ?
                                                                                                                      <p>No Value Exist</p> :
                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                        : " "}
                                                                                                                        id={inputVal5[index]}
                                                                                                                        name={index}
                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                      >

                                                                                                                        <option value='selected' >
                                                                                                                          - - select - -
                                                                                                                        </option>
                                                                                                                        {
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()]
                                                                                                                            .map((MhandlingTime, index) =>
                                                                                                                            (
                                                                                                                              MhandlingTime != "" ?
                                                                                                                                <option value={MhandlingTime}>{MhandlingTime}</option> : ""))
                                                                                                                        }
                                                                                                                      </select> :
                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                inputVal5[index] == "minHandlingTime" ?
                                                                                                                  editedFilter != null ?
                                                                                                                    editedFilter.length != 0 ?
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                          .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()][0] == "" ?
                                                                                                                        <p>No Value Exist</p> :
                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                          : " "}
                                                                                                                          id={inputVal5[index]}
                                                                                                                          name={index}
                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                        >

                                                                                                                          <option value='selected' >
                                                                                                                            - - select - -
                                                                                                                          </option>
                                                                                                                          {
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()]
                                                                                                                              .map((handlingTime, index) =>
                                                                                                                              (
                                                                                                                                handlingTime != "" ?
                                                                                                                                  <option value={handlingTime}>{handlingTime}</option> : ""))
                                                                                                                          }
                                                                                                                        </select> :
                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                  inputVal5[index] == "multipack" ?
                                                                                                                    editedFilter != null ?
                                                                                                                      editedFilter.length != 0 ?
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ multipack }) => [multipack, multipack])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                            .map(({ multipack }) => [multipack, multipack])).values()][0] == "" ?
                                                                                                                          <p>No Value Exist</p> :
                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                            : " "}
                                                                                                                            id={inputVal5[index]}
                                                                                                                            name={index}
                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                          >

                                                                                                                            <option value='selected' >
                                                                                                                              - - select - -
                                                                                                                            </option>
                                                                                                                            {
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ multipack }) => [multipack, multipack])).values()]
                                                                                                                                .map((multi, index) =>
                                                                                                                                (
                                                                                                                                  multi != "" ?
                                                                                                                                    <option value={multi}>{multi}</option> : ""))
                                                                                                                            }
                                                                                                                          </select> :
                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                    inputVal5[index] == "shippingHeight" ?
                                                                                                                      editedFilter != null ?
                                                                                                                        editedFilter.length != 0 ?
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                              .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()][0] == "" ?
                                                                                                                            <p>No Value Exist</p> :
                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                              : " "}
                                                                                                                              id={inputVal5[index]}
                                                                                                                              name={index}
                                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                            >

                                                                                                                              <option value='selected' >
                                                                                                                                - - select - -
                                                                                                                              </option>
                                                                                                                              {
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()]
                                                                                                                                  .map((height, index) =>
                                                                                                                                  (
                                                                                                                                    height != "" ?
                                                                                                                                      <option value={height}>{height}</option> : ""))
                                                                                                                              }
                                                                                                                            </select> :
                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                      inputVal5[index] == "shippingLength" ?
                                                                                                                        editedFilter != null ?
                                                                                                                          editedFilter.length != 0 ?
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ shippingLength }) => [shippingLength, shippingLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                .map(({ shippingLength }) => [shippingLength, shippingLength])).values()][0] == "" ?
                                                                                                                              <p>No Value Exist</p> :
                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                : " "}
                                                                                                                                id={inputVal5[index]}
                                                                                                                                name={index}
                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                              >

                                                                                                                                <option value='selected' >
                                                                                                                                  - - select - -
                                                                                                                                </option>
                                                                                                                                {
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ shippingLength }) => [shippingLength, shippingLength])).values()]
                                                                                                                                    .map((length, index) =>
                                                                                                                                    (
                                                                                                                                      length != "" ?
                                                                                                                                        <option value={length}>{length}</option> : ""))
                                                                                                                                }
                                                                                                                              </select> :
                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                        inputVal5[index] == "shippingWeight" ?
                                                                                                                          editedFilter != null ?
                                                                                                                            editedFilter.length != 0 ?
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()][0] == "" ?
                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                  : " "}
                                                                                                                                  id={inputVal5[index]}
                                                                                                                                  name={index}
                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                >

                                                                                                                                  <option value='selected' >
                                                                                                                                    - - select - -
                                                                                                                                  </option>
                                                                                                                                  {
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()]
                                                                                                                                      .map((Weight, index) =>
                                                                                                                                      (
                                                                                                                                        Weight != "" ?
                                                                                                                                          <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                  }
                                                                                                                                </select> :
                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                          inputVal5[index] == "shippingWidth" ?
                                                                                                                            editedFilter != null ?
                                                                                                                              editedFilter.length != 0 ?
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                    .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()][0] == "" ?
                                                                                                                                  <p>No Value Exist</p> :
                                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                                    : " "}
                                                                                                                                    id={inputVal5[index]}
                                                                                                                                    name={index}
                                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                  >

                                                                                                                                    <option value='selected' >
                                                                                                                                      - - select - -
                                                                                                                                    </option>
                                                                                                                                    {
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()]
                                                                                                                                        .map((Width, index) =>
                                                                                                                                        (
                                                                                                                                          Width != "" ?
                                                                                                                                            <option value={Width}>{Width}</option> : ""))
                                                                                                                                    }
                                                                                                                                  </select> :
                                                                                                                                <p>No Value Exist</p> : "...Loading" :

                                                                                                                            inputVal5[index] == "productHeight" ?
                                                                                                                              editedFilter != null ?
                                                                                                                                editedFilter.length != 0 ?
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ productHeight }) => [productHeight, productHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                      .map(({ productHeight }) => [productHeight, productHeight])).values()][0] == "" ?
                                                                                                                                    <p>No Value Exist</p> :
                                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                                      : " "}
                                                                                                                                      id={inputVal5[index]}
                                                                                                                                      name={index}
                                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                    >

                                                                                                                                      <option value='selected' >
                                                                                                                                        - - select - -
                                                                                                                                      </option>
                                                                                                                                      {
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productHeight }) => [productHeight, productHeight])).values()]
                                                                                                                                          .map((Height, index) =>
                                                                                                                                          (
                                                                                                                                            Height != "" ?
                                                                                                                                              <option value={Height}>{Height}</option> : ""))

                                                                                                                                      }
                                                                                                                                    </select> :
                                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                                              inputVal5[index] == "productLength" ?
                                                                                                                                editedFilter != null ?
                                                                                                                                  editedFilter.length != 0 ?
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ productLength }) => [productLength, productLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                        .map(({ productLength }) => [productLength, productLength])).values()][0] == "" ?
                                                                                                                                      <p>No Value Exist</p> :
                                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                                        : " "}
                                                                                                                                        id={inputVal5[index]}
                                                                                                                                        name={index}
                                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                      >

                                                                                                                                        <option value='selected' >
                                                                                                                                          - - select - -
                                                                                                                                        </option>
                                                                                                                                        {
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ productLength }) => [productLength, productLength])).values()]
                                                                                                                                            .map((Length, index) =>
                                                                                                                                            (
                                                                                                                                              Length != "" ?
                                                                                                                                                <option value={Length}>{Length}</option> : ""))
                                                                                                                                        }
                                                                                                                                      </select> :

                                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                                inputVal5[index] == "productWeight" ?
                                                                                                                                  editedFilter != null ?
                                                                                                                                    editedFilter.length != 0 ?
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ productWeight }) => [productWeight, productWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                          .map(({ productWeight }) => [productWeight, productWeight])).values()][0] == "" ?
                                                                                                                                        <p>No Value Exist</p> :
                                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                                          : " "}
                                                                                                                                          id={inputVal5[index]}
                                                                                                                                          name={index}
                                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                        >

                                                                                                                                          <option value='selected' >
                                                                                                                                            - - select - -
                                                                                                                                          </option>
                                                                                                                                          {
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ productWeight }) => [productWeight, productWeight])).values()]
                                                                                                                                              .map((Weight, index) =>
                                                                                                                                              (
                                                                                                                                                Weight != "" ?
                                                                                                                                                  <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                          }
                                                                                                                                        </select> :
                                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                                  inputVal5[index] == "productWidth" ?
                                                                                                                                    editedFilter != null ?
                                                                                                                                      editedFilter.length != 0 ?
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productWidth }) => [productWidth, productWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                            .map(({ productWidth }) => [productWidth, productWidth])).values()][0] == "" ?
                                                                                                                                          <p>No Value Exist</p> :
                                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                                            : " "}
                                                                                                                                            id={inputVal5[index]}
                                                                                                                                            name={index}
                                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                          >

                                                                                                                                            <option value='selected' >
                                                                                                                                              - - select - -
                                                                                                                                            </option>
                                                                                                                                            {
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ productWidth }) => [productWidth, productWidth])).values()]
                                                                                                                                                .map((Width, index) =>
                                                                                                                                                (
                                                                                                                                                  Width != "" ?
                                                                                                                                                    <option value={Width}>{Width}</option> : ""))
                                                                                                                                            }
                                                                                                                                          </select> :
                                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                                    inputVal5[index] == "pause" ?
                                                                                                                                      editedFilter != null ?
                                                                                                                                        editedFilter.length != 0 ?
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ pause }) => [pause, pause])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                              .map(({ pause }) => [pause, pause])).values()][0] == "" ?
                                                                                                                                            <p>No Value Exist</p> :
                                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                                              : " "}
                                                                                                                                              id={inputVal5[index]}
                                                                                                                                              name={index}
                                                                                                                                              class="border-2 border-[#008060] text
                                      -gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                            >

                                                                                                                                              <option value='selected' >
                                                                                                                                                - - select - -
                                                                                                                                              </option>
                                                                                                                                              {
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ pause }) => [pause, pause])).values()]
                                                                                                                                                  .map((pau, index) =>
                                                                                                                                                  (
                                                                                                                                                    pau != "" ?
                                                                                                                                                      <option value={pau}>{pau}</option> : ""))
                                                                                                                                              }
                                                                                                                                            </select> :
                                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                                      inputVal5[index] == "installment" ?
                                                                                                                                        editedFilter != null ?
                                                                                                                                          editedFilter.length != 0 ?
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ installment }) => [installment, installment])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                                .map(({ installment }) => [installment, installment])).values()][0] == "" ?
                                                                                                                                              <p>No Value Exist</p> :
                                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                                : " "}
                                                                                                                                                id={inputVal5[index]}
                                                                                                                                                name={index}
                                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                              >

                                                                                                                                                <option value='selected' >
                                                                                                                                                  - - select - -
                                                                                                                                                </option>
                                                                                                                                                {
                                                                                                                                                  [...new Map(editedFilter
                                                                                                                                                    .map(({ installment }) => [installment, installment])).values()]
                                                                                                                                                    .map((ins, index) =>
                                                                                                                                                    (
                                                                                                                                                      ins != "" ?
                                                                                                                                                        <option value={ins}>{ins}</option> : ""))
                                                                                                                                                }
                                                                                                                                              </select> :

                                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                                        inputVal5[index] == "transitTimeLabel" ?
                                                                                                                                          editedFilter != null ?
                                                                                                                                            editedFilter.length != 0 ?
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()].length == 1 &&
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()][0] ==
                                                                                                                                                "" ?
                                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                                  : " "}
                                                                                                                                                  id={inputVal5[index]}
                                                                                                                                                  name={index}
                                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                                >

                                                                                                                                                  <option value='selected' >
                                                                                                                                                    - - select - -
                                                                                                                                                  </option>
                                                                                                                                                  {
                                                                                                                                                    [...new Map(editedFilter
                                                                                                                                                      .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()]
                                                                                                                                                      .map((Transmit, index) =>
                                                                                                                                                      (
                                                                                                                                                        Transmit != "" ?
                                                                                                                                                          <option value={Transmit}>{Transmit}</option> : ""))
                                                                                                                                                  }
                                                                                                                                                </select> :
                                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                                          " "}
                                      </div>
                                      <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize', }}
                                        onClick={() => deleteFilters(index)}
                                      ><RemoveCircleIcon style={{ color: '#d72c0d', marginRight: '5px' }} /></Button>
                                    </div>
                                  </>
                                ))}
                                <div className='flex justify-start items-center mt-2 mb-2 pl-4 pr-4'>
                                  <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize' }} onClick={() => { addNewFilters() }}><AddCircleIcon style={{ color: '#008060', marginRight: '5px' }} /> Add Filters </Button>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleApplyFilter()} disabled={!inputVal5 || !message} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => { handleClose2(); }} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                              {/* All Filter Model End*/}
                            </Menu>
                            <button onClick={handleClickColumn} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ViewWeekIcon style={{ color: '#5c5f62' }} />
                                Columns
                              </span>
                            </button>
                            <>
                              <Popover
                                id={id}
                                open={open}
                                anchorEl={anchorEl}
                                onClose={handleCloseColumn}
                                anchorOrigin={{
                                  vertical: 'bottom',
                                  horizontal: 'left',
                                }}
                              >
                                <div className='flex flex-col p-4'>

                                  <FormControlLabel name="id" onChange={handleDefaultColumnsChange} checked={checkedColumns.id} control={<Checkbox style={{ color: '#008060' }} />} label="Id" />

                                  <FormControlLabel name="score" onChange={handleDefaultColumnsChange} checked={checkedColumns.score} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Score" />

                                  <FormControlLabel name="googleStatus" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleStatus} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Status" />

                                  <FormControlLabel name="errorsFromMerchantCenter" onChange={handleDefaultColumnsChange} checked={checkedColumns.errorsFromMerchantCenter} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Error Form Merchant Center" />

                                  <FormControlLabel name="googleProductCategory" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleProductCategory} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Product Category" />

                                  <FormControlLabel name="ageGroup" onChange={handleDefaultColumnsChange} checked={checkedColumns.ageGroup} control={<Checkbox style={{ color: '#008060' }} />} label="Age" />

                                  <FormControlLabel name="gender" onChange={handleDefaultColumnsChange} checked={checkedColumns.gender} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Gender" />

                                  <FormControlLabel name="productCondition" onChange={handleDefaultColumnsChange} checked={checkedColumns.productCondition} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Condition" />

                                  <FormControlLabel name="brand" onChange={handleDefaultColumnsChange} checked={checkedColumns.brand} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Brand" />

                                  <FormControlLabel name="productType" onChange={handleDefaultColumnsChange} checked={checkedColumns.productType} control={<Checkbox style={{ color: '#008060' }} />} label="Product Type" />

                                  <FormControlLabel name="promotionId" onChange={handleDefaultColumnsChange} checked={checkedColumns.promotionId} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Promotion Id" />

                                  <FormControlLabel name="customLabel0" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel0} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 0" />

                                  <FormControlLabel name="customLabel1" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel1} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 1" />

                                  <FormControlLabel name="customLabel2" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel2} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 2" />

                                  <FormControlLabel name="customLabel3" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel3} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 3" />

                                  <FormControlLabel name="customLabel4" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel4} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 4" />

                                </div>
                              </Popover>
                            </>
                            <button aria-controls={open3 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open3 ? 'true' : undefined} onClick={handleClick3} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ScoreboardIcon style={{ color: '#5c5f62' }} />
                                Sort By Score
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl3}
                              open={open3}
                              onClose={handleClose3}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              <>
                                <div className='pr-4 pl-4 pt-2 pb-2'>
                                  <p className='mb-2'>Sort Your Product By Score</p>
                                  <Divider />
                                </div>
                                <div className='pr-4 pl-4 pb-2'>
                                  <div sx={{ width: 300, display: 'flex', justifyContent: 'center', margin: 'auto' }}>
                                    <Slider style={{ color: '#008060' }}
                                      getAriaLabel={() => 'Minimum distance'}
                                      value={value1}
                                      onChange={handleChange1}
                                      valueLabelDisplay="auto"
                                      getAriaValueText={valuetext}
                                      disableSwap
                                      step={7}
                                      marks
                                      min={0}
                                      max={100}
                                    />
                                  </div>
                                  <div className='flex justify-between items-center'>
                                    <div className='w-32'>
                                      <label for="exampleNumber0" class="form-label inline-block mb-2 text-gray-700" >Minimum Score</label > <input onChange={handleInputChange} onBlur={handleBlur} value={value1[0]} type="number" class=" form-control block w-full px-1 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber0" placeholder="Number input" />
                                    </div>
                                    <div className='w-32'>
                                      <label for="exampleNumber1" class="form-label inline-block mb-2 text-gray-700" >Maximum Score</label > <input onChange={handleInputChange1} onBlur={handleBlur1} value={value1[1]} type="number" class=" form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber1" placeholder="Number input" />
                                    </div>
                                  </div>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleClose3()} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => handleClose3()} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                            </Menu>
                            <button onClick={handleAddProductDrawer} className="relative sm:mt-2 z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black border border-gray-300 rounded-md sm:py-2">
                                <AddIcon style={{ color: '#5c5f62' }} />
                                Add New Products
                              </span>
                            </button>
                            <>
                              {showAddProductDrawer ? (
                                <div className=''>
                                  <div
                                    className="fixed inset-0 w-full h-full bg-black opacity-40"
                                    onClick={handleAddNewProductsDrawerCancel}
                                  ></div>
                                  <div style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                                    className={`top-0 right-0  rounded-tl-lg rounded-bl-lg w-[95%] sm:w-[85%] md:w-[90%] lg:w-[70%] xl:w-[50%] 2xl:w-[60%] bg-white transition-all  p-4 text-black fixed h-full z-40  ease-in-out duration-900 ${showAddProductDrawer ? "translate-x-0 " : "translate-x-full"
                                      }`}
                                  >
                                    <div sx={{ width: '100%', typography: 'body1' }}>
                                      <TabContext value={addProductTabsValue}>
                                        <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                                          <TabList onChange={handleAddProductTabs} aria-label="lab API tabs example">
                                            <Tab label="All Product" value="all" />
                                            <Tab label="Product From Collection" value="collection" />
                                          </TabList>
                                        </div>
                                        <TabPanel value="all">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input
                                                    type="search"
                                                    class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                                    placeholder="Search"
                                                    aria-label="Search"
                                                    aria-describedby="button-addon3"
                                                    onChange={handleAddNewProductsSearch}
                                                  />
                                                  <button onClick={handleAddNewDrawerProductSearch} class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerProducts && <div class="overflow-scroll" style={{ height: '470px' }}><ul class="divide-y divide-gray-100">
                                              <Checkbox style={{ color: '#008060' }} onChange={handleDrawerProductsSelectionAll}
                                                checked={Object.keys(selectedDrawerProducts).length == drawerProductsData.products.length} /> Select All ({Object.values(selectedDrawerProducts).reduce((acc, curr) => acc + curr.length, 0)})
                                              {drawerProductsData && drawerProductsData.products.length > 0 ? drawerProductsData.products.map((value, index) => (
                                                <li class="pb-3 sm:pb-4 ">
                                                  <div class="flex items-center space-x-4 hover:bg-gray-100 p-2">
                                                    <Checkbox name={value.id} onChange={handleDrawerProductsSelection}
                                                      checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].length == value.variants.length}
                                                      style={{ color: '#008060' }} />
                                                    <div class="flex-shrink-0">
                                                      <img class="w-10 h-10 rounded-full" src={value.image && value.image.src ? value.image.src : ''} alt="Neil image" />
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                  {value.variants.length > 0 ? value.variants.map((element) => (
                                                    <>
                                                      <Divider />
                                                      <div className="ml-5 pt-2 relative hover:bg-gray-100">
                                                        <Checkbox
                                                          style={{ color: '#008060' }}
                                                          checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].indexOf(element.id) != -1}
                                                          onChange={handleDrawerProductVariantSelection}
                                                          name={element.id}
                                                          id={value.id}
                                                        />
                                                        <label className="text-sm">{element.title}</label>
                                                      </div>
                                                    </>
                                                  )) : null
                                                  }
                                                </li>
                                              )) : <li>No Product Found</li>}
                                              {loadingMoreStoreProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "1 rem", marginLeft: "40%" }} size={30} />}
                                              {(drawerProductsData && drawerProductsData.next) && <li class="pb-3 sm:pb-4 "><Button disabled={loadingMoreStoreProducts} onClick={() => { getMoreStoreProducts() }} className='bg-[#008060]' variant="contained">Load More</Button></li>}
                                            </ul></div>}
                                          </>
                                        </TabPanel>
                                        <TabPanel value="collection">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input type="search" class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" placeholder="Search" aria-label="Search" aria-describedby="button-addon3" />
                                                  <button class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            <div className='h-[50vh] w-full overflow-y-scroll'>
                                              {loadingDrawerCollections && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                              {!loadingDrawerCollections && <ul class="divide-y divide-gray-100">
                                                {storeCollections.length > 0 ? storeCollections.map((value) => (
                                                  <li class="pb-3 sm:pb-4 pt-3 hover:bg-gray-100 h-fit">
                                                    <div class="flex items-center space-x-4">
                                                      <Checkbox
                                                        style={{ color: '#008060' }}
                                                        name={value.id}
                                                        checked={selectedDrawerCollections.indexOf(value.id) != -1}
                                                        onChange={handleDrawerCollectionSelection}
                                                      />
                                                      <div class="flex-1 min-w-0">
                                                        <p class="text-md text-black truncate">
                                                          {value.title}
                                                        </p>
                                                      </div>
                                                    </div>
                                                  </li>
                                                )) : <li>No Collection Found</li>}
                                                {/* <li class="pb-3 sm:pb-4 hover:bg-gray-100">
                                                <div class="flex items-center space-x-4 mt-3">
                                                  <Checkbox style={{ color: '#008060' }} />
                                                  <div class="flex-shrink-0">
                                                    <img class="w-12 h-12 rounded-full" src='https://cdn.shopify.com/s/files/1/0265/5043/5911/products/v--1774937877__-684744191_400x.jpg' alt="Neil image" />
                                                  </div>
                                                  <div class="flex-1 min-w-0">
                                                    <p class="text-md text-black truncate">
                                                      Test Collection
                                                    </p>
                                                  </div>
                                                </div>
                                              </li> */}
                                              </ul>}
                                            </div>
                                          </>
                                        </TabPanel>
                                      </TabContext>
                                      <div className='absolute bottom-1 w-[96%] bg-white z-99'>
                                        <Divider />
                                        <div className='flex justify-between mt-2'>
                                          <Button variant='contained' onClick={handleAddNewProducts}
                                            className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} >Apply</Button>
                                          <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                            </>
                          </div>
                        </div>
                      </div>
                      {selectedResources.length > 0 ? (
                        <>
                          <div class="rounded-md ml-2 flex items-center" role="group">
                            <button type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-gray-50 text-black">
                              {selectedResources != "all" ? selectedResources.length : totalApprovedResults} Selected
                            </button>
                            <button onClick={handleBulkEditClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border hover:bg-gray-50 text-black">
                              <EditIcon style={{ fontSize: '20px', marginRight: '5px', color: '#3285fa ' }} />
                              Bulk Edit
                            </button>
                            <button onClick={() => setShowSyncFromShopifyModel(!showSyncFromShopifyModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#7cb342" d="M37.216,11.78c-0.023-0.211-0.211-0.305-0.351-0.305s-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	c-0.234-0.234-0.68-0.164-0.867-0.117c-0.023,0-0.469,0.141-1.195,0.375c-0.726-2.086-1.968-3.984-4.194-3.984h-0.211	C24.187,4.375,23.391,4,22.735,4c-5.155,0-7.639,6.444-8.412,9.725c-2.015,0.633-3.445,1.054-3.609,1.125	c-1.125,0.351-1.148,0.375-1.289,1.429c-0.117,0.797-3.046,23.456-3.046,23.456L29.179,44l12.373-2.671	C41.575,41.282,37.24,11.991,37.216,11.78z M27.937,9.483c-0.562,0.164-1.242,0.375-1.921,0.609V9.671	c0-1.265-0.164-2.296-0.469-3.117C26.718,6.695,27.445,7.984,27.937,9.483L27.937,9.483z M24.117,6.812	c0.305,0.797,0.516,1.922,0.516,3.468v0.234c-1.265,0.398-2.601,0.797-3.984,1.242C21.422,8.804,22.899,7.351,24.117,6.812	L24.117,6.812z M22.617,5.359c0.234,0,0.469,0.094,0.656,0.234c-1.664,0.773-3.421,2.718-4.148,6.655	c-1.101,0.351-2.156,0.656-3.163,0.984C16.806,10.233,18.915,5.359,22.617,5.359z"></path><path fill="#558b2f" d="M36.865,11.428c-0.141,0-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	C31.17,8.757,31.053,8.71,30.96,8.71L29.249,44l12.373-2.671c0,0-4.335-29.338-4.359-29.549	C37.169,11.569,37.005,11.475,36.865,11.428z"></path><path fill="#fff" d="M24.792,18.593l-1.475,4.449c0,0-1.337-0.715-2.927-0.715c-2.374,0-2.489,1.498-2.489,1.867	c0,2.028,5.301,2.812,5.301,7.583c0,3.757-2.374,6.177-5.578,6.177c-3.872,0-5.808-2.397-5.808-2.397l1.037-3.411	c0,0,2.028,1.752,3.734,1.752c1.129,0,1.59-0.876,1.59-1.521c0-2.651-4.333-2.766-4.333-7.145c0-3.665,2.628-7.214,7.952-7.214	C23.777,17.994,24.792,18.593,24.792,18.593z"></path></svg>
                              Sync From Shopify
                            </button>
                            <button onClick={() => setShowGoogleSyncModel(!showGoogleSyncModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                              Sync From Google
                            </button>
                            {/* <button onClick={() => setShowIncludeModel(!showIncludeModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CheckCircleIcon style={{ fontSize: '20px', marginRight: '5px', color: '#4CAF50' }} />
                              Include
                            </button> */}
                            <button onClick={handleExcludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CancelIcon style={{ fontSize: '20px', marginRight: '5px', color: '#FF3D00' }} />
                              Exclude
                            </button>
                            <button onClick={() => setShowBulkDeleteModel(!showBulkDeleteModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-gray-50 text-black">
                              <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#d72c0d' }} />
                              Delete
                            </button>
                            {totalAppResults > approvedResultsPerPageLimit && !filterApplied && (selectedResources == "all" ? <Button onClick={clearAllSelections} style={{ marginLeft: '10px' }}>Undo</Button> : <Button onClick={handleSelectAllProducts} style={{ marginLeft: '10px' }}>Select all {totalApprovedResults} products</Button>)}
                          </div>
                        </>
                      ) : null}
                      <div className="w-full inline-block align-middle overflow-x-scroll">
                        <div className="rounded-lg overflow-x w-fit">
                          <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                            <thead className="overflow-x-scroll">
                              <tr>
                                <th scope="col" className="px-4 py-3 text-xs font-bold text-start text-gray-500 capitalize ">
                                  <Checkbox
                                    type="checkbox"
                                    className="form-check-input"
                                    name="allSelect"
                                    checked={selectedResources.length > 0 ? true : false}
                                    onChange={handleProductSelectAll}
                                    style={{ color: '#008060' }}
                                  />

                                </th>
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Name
                                </th>
                                {checkedColumns.id && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Id
                                </th>}
                                {checkedColumns.score && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Score
                                </th>}
                                {checkedColumns.googleStatus && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Status
                                </th>}
                                {checkedColumns.errorsFromMerchantCenter && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Error From Merchant Center
                                </th>}
                                {checkedColumns.googleProductCategory && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Product Category
                                </th>}
                                {checkedColumns.ageGroup && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Age
                                </th>}
                                {checkedColumns.gender && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Gender
                                </th>}
                                {checkedColumns.productCondition && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Condition
                                </th>}
                                {checkedColumns.brand && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Brand
                                </th>}
                                {checkedColumns.productType && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Type
                                </th>}
                                {checkedColumns.promotionId && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Promotion Id
                                </th>}
                                {checkedColumns.customLabel0 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 0
                                </th>}
                                {checkedColumns.customLabel1 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 1
                                </th>}
                                {checkedColumns.customLabel2 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 2
                                </th>}
                                {checkedColumns.customLabel3 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 3
                                </th>}
                                {checkedColumns.customLabel4 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 4
                                </th>}
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Actions
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                              {allApprovedProductRows}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      {/*  pagination */}
                      <>
                        {!filterApplied && <div className='flex justify-center items-center'>
                          <div>
                            <TablePagination
                              component="div"
                              page={approvedCurrentPage}
                              count={totalApprovedResults}
                              onPageChange={handleAppCurrentPageChange}
                              rowsPerPage={approvedResultsPerPageLimit}
                              rowsPerPageOptions={resultsPerPageOptions}
                              onRowsPerPageChange={handleAppResultsPerPageChange}
                            />
                          </div>
                        </div>}
                      </>
                    </div>
                  </div>)}
                </TabPanel>
                <TabPanel value="disapproved">
                  {loadingDisappProducts ? (
                    <>
                      <div className="flex flex-col mt-2">
                        <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                          <div className="py-3 w-full pl-2 flex justify-between">
                            <div className="w-[35%] relative">
                              <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                            </div>
                            <div className="w-[60%] flex items-center relative">
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                            </div>
                          </div>
                          <div className="w-full inline-block align-middle overflow-x-scroll">
                            <div className="rounded-lg overflow-x w-fit">
                              <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                                <thead className="overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '4vh' }} />
                                    </div>
                                  </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (<div className="flex flex-col mt-2">
                    <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                      <div className="py-3 pl-2 lg:flex xl:flex 2xl:flex justify-between">
                        <div className="relative w-full lg:w-[25%] xl:w-[40%] 2xl:w-[50%]">
                          <label htmlFor="hs-table-search" className="sr-only">
                            Search
                          </label>
                          <input
                            type="text"
                            onChange={handleFiltersQueryChange}
                            name="hs-table-search"
                            id="hs-table-search"
                            className="block w-full p-2 mt-[10px] pl-10 text-sm border border-[#babfc3] rounded-md focus:border-blue-500 focus:ring-blue-500 "
                            placeholder="Search..."
                          />
                          {tags.map((tag, index) => (
                            <span id="badge-dismiss-dark" class="mt-2 inline-flex items-center py-1 px-2 mr-2 text-sm font-medium text-gray-800 bg-gray-100 rounded ">
                              {tag}
                              <button onClick={() => deleteTag(index)} type="button" class="inline-flex items-center p-0.5 ml-2 text-sm text-gray-400 bg-transparent rounded-sm hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-300 dark:hover:text-gray-900" data-dismiss-target="#badge-dismiss-dark" aria-label="Remove">
                                <svg aria-hidden="true" class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                <span class="sr-only">Remove badge</span>
                              </button>
                            </span>
                          ))}
                        </div>
                        <div style={{ alignItems: 'baseline' }} className="flex flex-wrap mt-2 lg:m-0 xl:m-0 2xl:m-0 items-center space-x-2 align-baseline">
                          <div className="relative">
                            <button onClick={handleExportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <PublishIcon style={{ color: '#5c5f62' }} />
                                Export
                              </span>
                            </button>
                            <button onClick={handleImportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <GetAppIcon style={{ color: '#5c5f62' }} />
                                Import
                              </span>
                            </button>
                            <button aria-controls={open2 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open2 ? 'true' : undefined} onClick={handleClick2} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <TuneIcon style={{ color: '#5c5f62' }} />
                                Filters
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl2}
                              open={open2}
                              onClose={handleClose2}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              {/* All Filter Model */}
                              <>
                                <div className='pt-2 pb-2 pr-4 pl-4'>
                                  <p>Search By Filters</p>
                                  <Divider />
                                </div>
                                {productFilters.map((val, index) => (
                                  <>
                                    <div value={index} className='flex justify-between items-center p-4'>
                                      <div className='mr-2'>
                                        <select
                                          onChange={handlefilterState}
                                          id="countries"
                                          name={index}
                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                        >
                                          <option disabled selected value>
                                            - - select - -
                                          </option>
                                          <option value="adsGrouping" selected={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ? productFilterFromDb[index]['name'] == "adsGrouping" ? true : false : false : false}>Ads Grouping</option>
                                          <option value="adsLabels" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adsLabels" ? true : false : false : false
                                          }>Ads Labels</option>
                                          <option value="shippingLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLabel" ? true : false : false : false
                                          }>Shipping Label</option>
                                          <option value="adult" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adult" ? true : false : false : false
                                          }>Product is Adult-oriented</option>
                                          <option value="ageGroup" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "ageGroup" ? true : false : false : false
                                          }>Age Group</option>
                                          <option value="productCondition" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productCondition" ? true : false : false : false
                                          }>Condition</option>
                                          <option value="merchantErrors" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "merchantErrors" ? true : false : false : false
                                          }>Merchant Errors</option>
                                          <option value="color" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "color" ? true : false : false : false
                                          }>Color - Assigned For Feed</option>
                                          <option value="costOfGoodsSold" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "costOfGoodsSold" ? true : false : false : false
                                          }>Cost Of Goods Sold</option>
                                          <option value="customLabel0" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel0" ? true : false : false : false
                                          }>Custom Label 0</option>
                                          <option value="customLabel1" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel1" ? true : false : false : false
                                          }>Custom Label 1</option>
                                          <option value="customLabel2" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel2" ? true : false : false
                                          }>Custom Label 2</option>
                                          <option value="customLabel3" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel3" ? true : false : false : false
                                          }>Custom Label 3</option>
                                          <option value="customLabel4" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel4" ? true : false : false : false
                                          }> Custom Label 4</option>
                                          <option value="product_category_id" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "product_category_id" ? true : false : false : false

                                          }>Google Product Categories</option>
                                          <option value="material" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "material" ? true : false : false : false

                                          }>Material - Assigned For Feed</option>
                                          <option value="pattern" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pattern" ? true : false : false : false
                                          }>Pattern - Assigned For Feed</option>
                                          <option value="subscriptionCost" selected={

                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "subscriptionCost" ? true : false : false : false
                                          }
                                          >Subscription cost </option>
                                          <option value="identifierExists" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "identifierExists" ? true : false : false : false
                                          }>Product Identifier Exists</option>
                                          <option value="productTypes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productTypes" ? true : false : false : false
                                          }>Product Type</option>
                                          <option value="promotionIds" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "promotionIds " ? true : false : false : false
                                          }>Promotion Id</option>
                                          <option value="return_policy_label" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "return_policy_label" ? true : false : false : false
                                          }>Return Policy Label</option>
                                          <option value="sizes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizes" ? true : false : false : false
                                          }>Size - Assigned For Feed</option>
                                          <option value="sizeSystem" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeSystem" ? true : false : false : false
                                          }>Size System</option>
                                          <option value="sizeType" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeType" ? true : false : false : false
                                          }>Size Type</option>
                                          <option value="taxCategory" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "taxCategory" ? true : false : false : false
                                          }>Tax Category</option>
                                          <option value="unitPricingMeasure" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "unitPricingMeasure" ? true : false : false : false
                                          }
                                          >Unit Pricing Measure</option>
                                          <option value="unitPricingBaseMeasure"
                                            selected={
                                              productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                                productFilterFromDb[index]['name'] ==
                                                  "unitPricingBaseMeasure" ? true : false : false : false
                                            }
                                          >Unit Pricing Base Measure</option>
                                          <option value="availability" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "avaibility" ? true : false : false : false
                                          }>Availability</option>
                                          <option value="isBundle" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "isBundle" ? true : false : false : false
                                          }>Is it bundle</option>
                                          <option value="loyaltyPoints" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "loyaltyPoints" ? true : false : false : false
                                          }>Loyalty Points</option>
                                          <option value="energyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "energyEfficiencyClass" ? true : false : false : false
                                          }>Energy Efficiency Class</option>
                                          <option value="maxEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxEnergyEfficiencyClass" ? true : false : false : false
                                          }>Max Energy Efficiency Class</option>
                                          <option value="minEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minEnergyEfficiencyClass" ? true : false : false : false
                                          }>Min Energy Efficiency Class</option>
                                          <option value="maxHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxHandlingTime" ? true : false : false : false
                                          }>Max Handling Time</option>
                                          <option value="minHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minHandlingTime" ? true : false : false : false
                                          }>Min Handling Time</option>
                                          <option value="multipack" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "multipack" ? true : false : false : false
                                          }>Multipack</option>
                                          <option value="shippingHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingHeight" ? true : false : false : false
                                          }>Shipping Height</option>
                                          <option value="shippingLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLength" ? true : false : false : false
                                          }>Shipping Length</option>
                                          <option value="shippingWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWeight" ? true : false : false : false
                                          }>Shipping Weight</option>
                                          <option value="shippingWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWidth" ? true : false : false : false
                                          }>Shipping Width</option>
                                          <option value="transitTimeLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "transitTimeLabel " ? true : false : false : false
                                          }>Transit Time Label</option>
                                          <option value="productHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productHeight" ? true : false : false : false
                                          }>Product Height</option>
                                          <option value="productLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productLength" ? true : false : false
                                          }>Product Length</option>
                                          <option value="productWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWidth" ? true : false : false : false
                                          }>Product Weight</option>
                                          <option value="productWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWeight" ? true : false : false : false
                                          }>Product Width</option>
                                          <option value="installment" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "installment" ? true : false : false : false
                                          }>Installment</option>
                                          <option value="pause" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pause" ? true : false : false : false
                                          }> Product Pause</option>
                                        </select>
                                      </div>
                                      <div className='mr-2'>
                                        {
                                          inputVal5[index] == "adsGrouping" ?
                                            labelsFilter != null ?
                                              labelsFilter.length != 0 ?
                                                [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()][0] == "" ?
                                                  <p>No Value Exist</p> :
                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                    productFilterFromDb[index]['value'] : " "
                                                    : " "}
                                                    id={inputVal5[index]}
                                                    name={index}
                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                  >

                                                    <option value='selected' >
                                                      - - select - -
                                                    </option>
                                                    {
                                                      [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()]
                                                        .map((label, i) =>
                                                        (
                                                          label != "" ?
                                                            <option value={label}>{label}</option> : ""))
                                                    }
                                                  </select> :
                                                <p>No Value Exist</p> : "....Loading" :
                                            inputVal5[index] == "adsLabels" ?
                                              labelsFilter != null ?
                                                labelsFilter.length != 0 ?
                                                  [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()][0] == "" ?
                                                    <p>No Value Exist</p> :
                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                      productFilterFromDb[index]['value'] : " "
                                                      : " "}
                                                      id={inputVal5[index]}
                                                      name={index}
                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                    >

                                                      <option value='selected' >
                                                        - - select - -
                                                      </option>
                                                      {
                                                        [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()]
                                                          .map((label, index) =>
                                                          (
                                                            label != "" ?
                                                              <option value={label}>{label}</option> : ""))
                                                      }
                                                    </select> :
                                                  <p>No Value Exist</p> : "...Loading" :
                                              inputVal5[index] == "shippingLabel" ?
                                                labelsFilter != null ?
                                                  labelsFilter.length != 0 ?
                                                    [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()].length == 1 && [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()][0] != "" ? <p>No Value Exist</p>
                                                      :
                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                        productFilterFromDb[index]['value'] : " "
                                                        : " "}
                                                        id={inputVal5[index]}
                                                        name={index}
                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                      >

                                                        <option value='selected' >
                                                          - - select - -
                                                        </option>
                                                        {
                                                          [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()]
                                                            .map((label, index) =>
                                                            (
                                                              label != "" ?
                                                                <option value={label}>{label}</option> : ""))
                                                        }
                                                      </select>
                                                    : <p>No Value Exist</p> : "...Loading"
                                                : inputVal5[index] == "adult" ?
                                                  editedFilter != null ?
                                                    editedFilter.length != 0 ?
                                                      [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()].length != 0 ?
                                                        <p>No Value Exist</p> :
                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                          productFilterFromDb[index]['value'] : " "
                                                          : " "}
                                                          id={inputVal5[index]}
                                                          name={index}
                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                        >

                                                          <option value='selected' >
                                                            - - select - -
                                                          </option>
                                                          {
                                                            [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()]
                                                              .map((adult, index) =>
                                                              (
                                                                adult != "" ?
                                                                  <option value={adult}>{adult}</option> : ""))
                                                          }
                                                        </select>
                                                      : <p>No Value Exist</p> : "...Loading"
                                                  : inputVal5[index] == "ageGroup" ?
                                                    variatFilter != null ?
                                                      variatFilter.length != 0 ?
                                                        [...new Map(variatFilter.map(({
                                                          ageGroup }) => [ageGroup, ageGroup])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                            ageGroup }) => [ageGroup, ageGroup])).values()][0] == "" ?
                                                          <p>No Value Exist</p> :
                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                            productFilterFromDb[index]['value'] : " "
                                                            : " "}
                                                            id={inputVal5[index]}
                                                            name={index}
                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                          >
                                                            <option value='selected' >
                                                              - - select - -
                                                            </option>
                                                            {
                                                              [...new Map(variatFilter.map(({
                                                                ageGroup }) => [ageGroup, ageGroup])).values()].map((age, index) => (
                                                                  <option value={age}> {age} </option>
                                                                ))
                                                            }
                                                          </select> :
                                                        <p>No Value Exist</p> : "...Loading" :
                                                    inputVal5[index] == "productCondition" ?
                                                      variatFilter != null ?
                                                        variatFilter.length != 0 ?
                                                          [...new Map(variatFilter
                                                            .map(({ productCondition }) => [productCondition, productCondition])).values()].length == 1 && [...new Map(variatFilter
                                                              .map(({ productCondition }) => [productCondition, productCondition])).values()][0] == "" ? <p>No Value Exist</p> :
                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                              productFilterFromDb[index]['value'] : " "
                                                              : " "}
                                                              id={inputVal5[index]}
                                                              name={index}
                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                            >

                                                              <option value='selected' >
                                                                - - select - -
                                                              </option>
                                                              {
                                                                [...new Map(variatFilter
                                                                  .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                    <option value={condition}> {condition} </option>
                                                                  ))
                                                              }
                                                            </select> :
                                                          <p>No Value Exist</p> : "...Loading" :

                                                      inputVal5[index] == "merchantErrors" ?
                                                        variatFilter != null ?
                                                          variatFilter.length != 0 ?
                                                            [...new Map(variatFilter
                                                              .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].length == 1 && [...new Map(variatFilter
                                                                .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()][0] == "" ? <p>No Value Exist</p> :
                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                productFilterFromDb[index]['value'] : " "
                                                                : " "}
                                                                id={inputVal5[index]}
                                                                name={index}
                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                              >

                                                                <option value='selected' >
                                                                  - - select - -
                                                                </option>
                                                                {
                                                                  [...new Map(variatFilter
                                                                    .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].map((error, index) => (
                                                                      <option value={error}> {error} </option>
                                                                    ))
                                                                }
                                                              </select> :
                                                            <p>No Value Exist</p> : "...Loading" :

                                                        inputVal5[index] == "color" ?
                                                          editedFilter != null ?
                                                            editedFilter.length != 0 ?
                                                              [...new Map(editedFilter.map(({ color }) => [color, color])).values()].length == 1 && [...new Map(editedFilter.map(({ color }) => [color, color])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                <select onChange={handleChangeInput} value={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ? productFilterFromDb[index]['value'] : " " : " "}
                                                                  id={inputVal5[index]}
                                                                  name={index}
                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                >
                                                                  <option value='selected' >
                                                                    - - select - -
                                                                  </option>
                                                                  {
                                                                    [...new Map(editedFilter.map(({ color }) => [color, color])).values()]
                                                                      .map((colr, index) =>
                                                                      (
                                                                        colr != "" ?
                                                                          <option value={colr}>{colr}</option> : ""))
                                                                  }
                                                                </select> :
                                                              <p>No Value Exist</p> : "...Loading" :
                                                          inputVal5[index] == "costOfGoodsSold" ?
                                                            editedFilter != null ?
                                                              editedFilter.length != 0 ?

                                                                [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                  .length == 1 && [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()][0] == "" ?
                                                                  <p>No Value Exist</p> :
                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                    && productFilterFromDb[index] ?
                                                                    productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                    : " "}
                                                                    id={inputVal5[index]}
                                                                    name={index}
                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                  >

                                                                    <option value='selected' >
                                                                      - - select - -
                                                                    </option>
                                                                    {
                                                                      [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                        .map((cost, index) =>
                                                                        (
                                                                          cost != "" ?
                                                                            <option value={cost}>{cost}</option> : ""))
                                                                    }
                                                                  </select> :
                                                                <p>No Value Exist</p> : "...Loading" :
                                                            inputVal5[index] == "customLabel0" ?
                                                              labelsFilter != null ?
                                                                labelsFilter.length != 0 ?
                                                                  [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()][0] == "" ?
                                                                    <p>No Value Exist</p> :
                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                      : " "}
                                                                      id={inputVal5[index]}
                                                                      name={index}
                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                    >

                                                                      <option value='selected' >
                                                                        - - select - -
                                                                      </option>
                                                                      {
                                                                        [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()]
                                                                          .map((label0, index) =>
                                                                          (
                                                                            label0 != "" ?
                                                                              <option value={label0}>{label0}</option> : ""))
                                                                      }
                                                                    </select> :
                                                                  <p>No Value Exist</p> : "...Loading" :
                                                              inputVal5[index] == "customLabel1" ?
                                                                labelsFilter != null ?
                                                                  labelsFilter.length != 0 ?
                                                                    [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                        productFilterFromDb[index]['value'] : " "
                                                                        : " "}
                                                                        id={inputVal5[index]}
                                                                        name={index}
                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                      >

                                                                        <option value='selected' >
                                                                          - - select - -
                                                                        </option>
                                                                        {
                                                                          [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()]
                                                                            .map((label1, index) =>
                                                                            (
                                                                              label1 != "" ?
                                                                                <option value={label1}>{label1}</option> : ""))
                                                                        }
                                                                      </select> :
                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                inputVal5[index] == "customLabel2" ?
                                                                  labelsFilter != null ?
                                                                    labelsFilter.length != 0 ?
                                                                      [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()][0] == "" ?
                                                                        <p>No Value Exist</p> :
                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                          productFilterFromDb[index]['value'] : " "
                                                                          : " "}
                                                                          id={inputVal5[index]}
                                                                          name={index}
                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                        >

                                                                          <option value='selected' >
                                                                            - - select - -
                                                                          </option>
                                                                          {
                                                                            [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].map((label2, index) =>
                                                                            (
                                                                              label2 != "" ?
                                                                                <option value={label2}>{label2}</option> : ""))
                                                                          }
                                                                        </select>
                                                                      : <p>No Value Exist</p> : "...Loading" :
                                                                  inputVal5[index] == "customLabel3" ?
                                                                    labelsFilter != null ?
                                                                      labelsFilter.length != 0 ?
                                                                        [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                            productFilterFromDb[index]['value'] : " "
                                                                            : " "}
                                                                            id={inputVal5[index]}
                                                                            name={index}
                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                          >

                                                                            <option value='selected' >
                                                                              - - select - -
                                                                            </option>
                                                                            {
                                                                              [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()]
                                                                                .map((label3, index) =>
                                                                                (
                                                                                  label3 != "" ?
                                                                                    <option value={label3}>{label3}</option> : ""))
                                                                            }
                                                                          </select> :
                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                    inputVal5[index] == "customLabel4" ?
                                                                      labelsFilter != null ?
                                                                        labelsFilter.length != 0 ?

                                                                          [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()]
                                                                                  .map((label4, index) =>
                                                                                  (
                                                                                    label4 != "" ?
                                                                                      <option value={label4}>{label4}</option> : ""))
                                                                              }
                                                                            </select> :
                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                      inputVal5[index] == "product_category_id" ?
                                                                        variatFilter != null ?
                                                                          [...new Map(variatFilter.map(({
                                                                            product_category_id }) => [product_category_id, product_category_id])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                                              product_category_id }) => [product_category_id, product_category_id])).values()][0] != "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                productCategories.map((category, index) => (
                                                                                  variatFilter != "" &&
                                                                                    variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({
                                                                                      product_category_id }) => [product_category_id, product_category_id])).values()].map((id, index) => (
                                                                                        id == category.id ?
                                                                                          <option value={category.id}>{category.name}</option> : " "
                                                                                      )) : ""
                                                                                ))
                                                                              }
                                                                            </select> : "....Loading" :
                                                                        inputVal5[index] == "material" ?
                                                                          editedFilter != null ?
                                                                            editedFilter.length != 0 ?
                                                                              [...new Map(editedFilter.map(({ material }) => [material, material])).values()].length == 1 && [...new Map(editedFilter.map(({ material }) => [material, material])).values()][0] == "" ?
                                                                                <p>No Value Exist</p> :
                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                  : " "}
                                                                                  id={inputVal5[index]}
                                                                                  name={index}
                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                >

                                                                                  <option value='selected' >
                                                                                    - - select - -
                                                                                  </option>
                                                                                  {
                                                                                    [...new Map(editedFilter.map(({ material }) => [material, material])).values()]
                                                                                      .map((materl, index) =>
                                                                                      (
                                                                                        materl != "" ?
                                                                                          <option value={materl}>{materl}</option> : ""))
                                                                                  }
                                                                                </select> :
                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                          inputVal5[index] == "pattern" ?
                                                                            editedFilter != null ?
                                                                              editedFilter.length != 0 ?
                                                                                [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()].length == 1 && [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()][0] == "" ?
                                                                                  <p>No Value Exist</p> :
                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                    : " "}
                                                                                    id={inputVal5[index]}
                                                                                    name={index}
                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                  >

                                                                                    <option value='selected' >
                                                                                      - - select - -
                                                                                    </option>
                                                                                    {
                                                                                      [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()]
                                                                                        .map((pattrn, index) =>
                                                                                        (
                                                                                          pattrn != "" ?
                                                                                            <option value={pattrn}>{pattrn}</option> : ""))
                                                                                    }
                                                                                  </select> :
                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                            inputVal5[index] == "identifierExists" ?
                                                                              editedFilter != null ?
                                                                                editedFilter.length != 0 ?
                                                                                  [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()].length == 1 && [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()][0] == "" ?
                                                                                    <p>No Value Exist</p> :
                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                      : " "}
                                                                                      id={inputVal5[index]}
                                                                                      name={index}
                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                    >

                                                                                      <option value='selected' >
                                                                                        - - select - -
                                                                                      </option>
                                                                                      {
                                                                                        [...new Map(variatFilter
                                                                                          .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                                            <option value={condition}> {condition} </option>
                                                                                          ))
                                                                                      }
                                                                                    </select> :
                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                              inputVal5[index] == "productTypes" ?
                                                                                variatFilter != null ?
                                                                                  variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()].length == 1 && [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                        : " "}
                                                                                        id={inputVal5[index]}
                                                                                        name={index}
                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                      >

                                                                                        <option value='selected' >
                                                                                          - - select - -
                                                                                        </option>
                                                                                        {
                                                                                          [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()]
                                                                                            .map((
                                                                                              type, index) =>
                                                                                            (
                                                                                              type !== "" && type !== null ?
                                                                                                <option value={type}>{type}</option> : ""))
                                                                                        }
                                                                                      </select> :
                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                inputVal5[index] == "promotionIds" ?
                                                                                  editedFilter != null ?
                                                                                    editedFilter.length != 0 ?
                                                                                      [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()].length == 1
                                                                                        && [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()][0] == ""
                                                                                        ? <p>No Value Exist</p> :
                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                          : " "}

                                                                                          id={inputVal5[index]}
                                                                                          name={index}
                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                        >

                                                                                          <option value='selected' >
                                                                                            - - select - -
                                                                                          </option>
                                                                                          {
                                                                                            [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()]
                                                                                              .map((pormotion, index) =>
                                                                                              (
                                                                                                pormotion != "" ?
                                                                                                  <option values={pormotion} >{pormotion}</option> : ""))
                                                                                          }
                                                                                        </select> :
                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                  inputVal5[index] == "return_policy_label" ?
                                                                                    editedFilter != null ?
                                                                                      editedFilter.length != 0 ?
                                                                                        [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()].length == 1 && [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()][0] == "" ?
                                                                                          <p>No Value Exist</p> :
                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                            : " "}
                                                                                            id={inputVal5[index]}
                                                                                            name={index}
                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                          >

                                                                                            <option value='selected' >
                                                                                              - - select - -
                                                                                            </option>
                                                                                            {
                                                                                              [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()]
                                                                                                .map((policy, index) =>
                                                                                                (
                                                                                                  policy != "" ?
                                                                                                    <option values={policy} >{policy}</option> : ""))
                                                                                            }
                                                                                          </select> :
                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                    inputVal5[index] == "sizes" ?
                                                                                      editedFilter != null ?
                                                                                        editedFilter.length != 0 ?
                                                                                          [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()].length == 1 && [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()][0] == "" ?
                                                                                            <p>No Value Exist</p> :
                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                              : " "}
                                                                                              id={inputVal5[index]}
                                                                                              name={index}
                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                            >

                                                                                              <option value='selected' >
                                                                                                - - select - -
                                                                                              </option>
                                                                                              {
                                                                                                [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()]
                                                                                                  .map((size, index) =>
                                                                                                  (
                                                                                                    size != "" ?
                                                                                                      <option values={size}>{size}</option> : ""))
                                                                                              }
                                                                                            </select> :
                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                      inputVal5[index] == "sizeSystem" ?
                                                                                        editedFilter != null ?
                                                                                          editedFilter.length != 0 ?
                                                                                            [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()][0] == "" ?
                                                                                              <p>No Value Exist</p> :
                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                : " "}
                                                                                                id={inputVal5[index]}
                                                                                                name={index}
                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                              >

                                                                                                <option value='selected' >
                                                                                                  - - select - -
                                                                                                </option>
                                                                                                {
                                                                                                  [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()]
                                                                                                    .map((sizes, index) =>
                                                                                                    (
                                                                                                      sizes != "" ?
                                                                                                        <option value={sizes}>{sizes}</option> : ""))
                                                                                                }
                                                                                              </select> :
                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                        inputVal5[index] == "sizeType" ?
                                                                                          editedFilter != null ?
                                                                                            editedFilter.length != 0 ?
                                                                                              [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()][0] == "" ?
                                                                                                <p>No Value Exist</p> :
                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                  : " "}
                                                                                                  id={inputVal5[index]}
                                                                                                  name={index}
                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                >

                                                                                                  <option value='selected' >
                                                                                                    - - select - -
                                                                                                  </option>
                                                                                                  {
                                                                                                    [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()]
                                                                                                      .map((type, index) =>
                                                                                                      (
                                                                                                        type != "" ?
                                                                                                          <option value={type}>{type}</option> : ""))
                                                                                                  }
                                                                                                </select> :
                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                          inputVal5[index] == "subscriptionCost" ?
                                                                                            editedFilter != null ?
                                                                                              editedFilter.length != 0 ?
                                                                                                [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()].length == 1 && [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()][0] == "" ?
                                                                                                  <p>No Value Exist</p> :
                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                    : " "}
                                                                                                    id={inputVal5[index]}
                                                                                                    name={index}
                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                  >

                                                                                                    <option value='selected' >
                                                                                                      - - select - -
                                                                                                    </option>
                                                                                                    {
                                                                                                      [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()]
                                                                                                        .map((subcrition, index) =>
                                                                                                        (
                                                                                                          subcrition != "" ?
                                                                                                            <option value={subcrition}>{subcrition}</option> : ""))
                                                                                                    }
                                                                                                  </select> :
                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                            inputVal5[index] == "taxCategory" ?
                                                                                              labelsFilter != null ?
                                                                                                labelsFilter.length != 0 ?
                                                                                                  [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()].length == 1 && [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()][0] == "" ?
                                                                                                    <p>No Value Exist</p> :
                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                      : " "}
                                                                                                      id={inputVal5[index]}
                                                                                                      name={index}
                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                    >

                                                                                                      <option value='selected' >
                                                                                                        - - select - -
                                                                                                      </option>
                                                                                                      {
                                                                                                        [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()]
                                                                                                          .map((Tax, index) =>
                                                                                                          (
                                                                                                            Tax != "" ?
                                                                                                              <option value={Tax}>{Tax}</option> : ""))
                                                                                                      }
                                                                                                    </select> :
                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                              inputVal5[index] == "unitPricingMeasure" ?
                                                                                                editedFilter != null ?
                                                                                                  editedFilter.length != 0 ?
                                                                                                    [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()][0] == "" ?
                                                                                                      <p>No Value Exist</p> :
                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                        : " "}
                                                                                                        id={inputVal5[index]}
                                                                                                        name={index}
                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                      >

                                                                                                        <option value='selected' >
                                                                                                          - - select - -
                                                                                                        </option>
                                                                                                        {
                                                                                                          [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()]
                                                                                                            .map((unit, index) =>
                                                                                                            (
                                                                                                              unit != "" ?
                                                                                                                <option value={unit}>{unit}</option> : ""))
                                                                                                        }
                                                                                                      </select> :
                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                inputVal5[index] == "unitPricingBaseMeasure" ?
                                                                                                  editedFilter != null ?
                                                                                                    editedFilter.length != 0 ?
                                                                                                      [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()][0] == "" ?
                                                                                                        <p>No Value Exist</p> :
                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                          : " "}
                                                                                                          id={inputVal5[index]}
                                                                                                          name={index}
                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                        >

                                                                                                          <option value='selected' >
                                                                                                            - - select - -
                                                                                                          </option>
                                                                                                          {
                                                                                                            [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()]
                                                                                                              .map((unitpricing, index) =>
                                                                                                              (
                                                                                                                unitpricing != "" ?
                                                                                                                  <option value={unitpricing}>{unitpricing}</option> : ""))
                                                                                                          }
                                                                                                        </select> :
                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                  inputVal5[index] == "availability" ?
                                                                                                    editedFilter != null ?
                                                                                                      editedFilter.length != 0 ?
                                                                                                        [...new Map(editedFilter
                                                                                                          .map(({ availability }) => [availability, availability])).values()].length == 1 && [...new Map(editedFilter
                                                                                                            .map(({ availability }) => [availability, availability])).values()][0] == "" ?
                                                                                                          <p>No Value Exist</p> :
                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                            : " "}
                                                                                                            id={inputVal5[index]}
                                                                                                            name={index}
                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                          >

                                                                                                            <option value='selected' >
                                                                                                              - - select - -
                                                                                                            </option>
                                                                                                            {
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ availability }) => [availability, availability])).values()]
                                                                                                                .map((avability, index) =>
                                                                                                                (
                                                                                                                  avability != "" ?
                                                                                                                    <option value={avability}>{avability}</option> : ""))
                                                                                                            }
                                                                                                          </select> :
                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                    inputVal5[index] == "energyEfficiencyClass" ?
                                                                                                      editedFilter != null ?
                                                                                                        editedFilter.length != 0 ?
                                                                                                          [...new Map(editedFilter
                                                                                                            .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                              .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()][0] == "" ?
                                                                                                            <p>No Value Exist</p> :
                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                              : " "}
                                                                                                              id={inputVal5[index]}
                                                                                                              name={index}
                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                            >

                                                                                                              <option value='selected' >
                                                                                                                - - select - -
                                                                                                              </option>
                                                                                                              {
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()]
                                                                                                                  .map((EfficiencyClass, index) =>
                                                                                                                  (
                                                                                                                    EfficiencyClass != "" ?
                                                                                                                      <option value={EfficiencyClass}>{EfficiencyClass}</option> : ""))
                                                                                                              }
                                                                                                            </select> :
                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                      inputVal5[index] == "isBundle" ?
                                                                                                        editedFilter != null ?
                                                                                                          editedFilter.length != 0 ?
                                                                                                            [...new Map(editedFilter
                                                                                                              .map(({ isBundle }) => [isBundle, isBundle])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                .map(({ isBundle }) => [isBundle, isBundle])).values()][0] == "" ?
                                                                                                              <p>No Value Exist</p> :
                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                : " "}
                                                                                                                id={inputVal5[index]}
                                                                                                                name={index}
                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                              >

                                                                                                                <option value='selected' >
                                                                                                                  - - select - -
                                                                                                                </option>
                                                                                                                {
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ isBundle }) => [isBundle, isBundle])).values()]
                                                                                                                    .map((bundle, index) =>
                                                                                                                    (
                                                                                                                      bundle != "" ?
                                                                                                                        <option value={bundle}>{bundle}</option> : ""))
                                                                                                                }
                                                                                                              </select> :
                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                        inputVal5[index] == "loyaltyPoints" ?
                                                                                                          editedFilter != null ?
                                                                                                            editedFilter.length != 0 ?
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                  .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()][0] == "" ?
                                                                                                                <p>No Value Exist</p> :
                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                  : " "}
                                                                                                                  id={inputVal5[index]}
                                                                                                                  name={index}
                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                >

                                                                                                                  <option value='selected' >
                                                                                                                    - - select - -
                                                                                                                  </option>
                                                                                                                  {
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()]
                                                                                                                      .map((loyalti, index) =>
                                                                                                                      (
                                                                                                                        loyalti != "" ?
                                                                                                                          <option value={loyalti}>{loyalti}</option> : ""))
                                                                                                                  }
                                                                                                                </select> :
                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                          inputVal5[index] == "maxEnergyEfficiencyClass" ?
                                                                                                            editedFilter != null ?
                                                                                                              editedFilter.length != 0 ?
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                    .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                  <p>No Value Exist</p> :
                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                    : " "}
                                                                                                                    id={inputVal5[index]}
                                                                                                                    name={index}
                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                  >

                                                                                                                    <option value='selected' >
                                                                                                                      - - select - -
                                                                                                                    </option>
                                                                                                                    {
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()]
                                                                                                                        .map((maxEnergyClass, index) =>
                                                                                                                        (
                                                                                                                          maxEnergyClass != "" ?
                                                                                                                            <option value={maxEnergyClass}>{maxEnergyClass}</option> : ""))
                                                                                                                    }
                                                                                                                  </select> :
                                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                                            inputVal5[index] == "minEnergyEfficiencyClass" ?
                                                                                                              editedFilter != null ?
                                                                                                                editedFilter.length != 0 ?
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                      .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                    <p>No Value Exist</p> :
                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                      : " "}
                                                                                                                      id={inputVal5[index]}
                                                                                                                      name={index}
                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                    >

                                                                                                                      <option value='selected' >
                                                                                                                        - - select - -
                                                                                                                      </option>
                                                                                                                      {
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()]
                                                                                                                          .map((energyEfficiency, index) =>
                                                                                                                          (
                                                                                                                            energyEfficiency != "" ?
                                                                                                                              <option value={energyEfficiency}>{energyEfficiency}</option> : ""))
                                                                                                                      }
                                                                                                                    </select> :
                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                              inputVal5[index] == "maxHandlingTime" ?
                                                                                                                editedFilter != null ?
                                                                                                                  editedFilter.length != 0 ?
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                        .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()][0] == "" ?
                                                                                                                      <p>No Value Exist</p> :
                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                        : " "}
                                                                                                                        id={inputVal5[index]}
                                                                                                                        name={index}
                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                      >

                                                                                                                        <option value='selected' >
                                                                                                                          - - select - -
                                                                                                                        </option>
                                                                                                                        {
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()]
                                                                                                                            .map((MhandlingTime, index) =>
                                                                                                                            (
                                                                                                                              MhandlingTime != "" ?
                                                                                                                                <option value={MhandlingTime}>{MhandlingTime}</option> : ""))
                                                                                                                        }
                                                                                                                      </select> :
                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                inputVal5[index] == "minHandlingTime" ?
                                                                                                                  editedFilter != null ?
                                                                                                                    editedFilter.length != 0 ?
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                          .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()][0] == "" ?
                                                                                                                        <p>No Value Exist</p> :
                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                          : " "}
                                                                                                                          id={inputVal5[index]}
                                                                                                                          name={index}
                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                        >

                                                                                                                          <option value='selected' >
                                                                                                                            - - select - -
                                                                                                                          </option>
                                                                                                                          {
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()]
                                                                                                                              .map((handlingTime, index) =>
                                                                                                                              (
                                                                                                                                handlingTime != "" ?
                                                                                                                                  <option value={handlingTime}>{handlingTime}</option> : ""))
                                                                                                                          }
                                                                                                                        </select> :
                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                  inputVal5[index] == "multipack" ?
                                                                                                                    editedFilter != null ?
                                                                                                                      editedFilter.length != 0 ?
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ multipack }) => [multipack, multipack])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                            .map(({ multipack }) => [multipack, multipack])).values()][0] == "" ?
                                                                                                                          <p>No Value Exist</p> :
                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                            : " "}
                                                                                                                            id={inputVal5[index]}
                                                                                                                            name={index}
                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                          >

                                                                                                                            <option value='selected' >
                                                                                                                              - - select - -
                                                                                                                            </option>
                                                                                                                            {
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ multipack }) => [multipack, multipack])).values()]
                                                                                                                                .map((multi, index) =>
                                                                                                                                (
                                                                                                                                  multi != "" ?
                                                                                                                                    <option value={multi}>{multi}</option> : ""))
                                                                                                                            }
                                                                                                                          </select> :
                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                    inputVal5[index] == "shippingHeight" ?
                                                                                                                      editedFilter != null ?
                                                                                                                        editedFilter.length != 0 ?
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                              .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()][0] == "" ?
                                                                                                                            <p>No Value Exist</p> :
                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                              : " "}
                                                                                                                              id={inputVal5[index]}
                                                                                                                              name={index}
                                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                            >

                                                                                                                              <option value='selected' >
                                                                                                                                - - select - -
                                                                                                                              </option>
                                                                                                                              {
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()]
                                                                                                                                  .map((height, index) =>
                                                                                                                                  (
                                                                                                                                    height != "" ?
                                                                                                                                      <option value={height}>{height}</option> : ""))
                                                                                                                              }
                                                                                                                            </select> :
                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                      inputVal5[index] == "shippingLength" ?
                                                                                                                        editedFilter != null ?
                                                                                                                          editedFilter.length != 0 ?
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ shippingLength }) => [shippingLength, shippingLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                .map(({ shippingLength }) => [shippingLength, shippingLength])).values()][0] == "" ?
                                                                                                                              <p>No Value Exist</p> :
                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                : " "}
                                                                                                                                id={inputVal5[index]}
                                                                                                                                name={index}
                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                              >

                                                                                                                                <option value='selected' >
                                                                                                                                  - - select - -
                                                                                                                                </option>
                                                                                                                                {
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ shippingLength }) => [shippingLength, shippingLength])).values()]
                                                                                                                                    .map((length, index) =>
                                                                                                                                    (
                                                                                                                                      length != "" ?
                                                                                                                                        <option value={length}>{length}</option> : ""))
                                                                                                                                }
                                                                                                                              </select> :
                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                        inputVal5[index] == "shippingWeight" ?
                                                                                                                          editedFilter != null ?
                                                                                                                            editedFilter.length != 0 ?
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()][0] == "" ?
                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                  : " "}
                                                                                                                                  id={inputVal5[index]}
                                                                                                                                  name={index}
                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                >

                                                                                                                                  <option value='selected' >
                                                                                                                                    - - select - -
                                                                                                                                  </option>
                                                                                                                                  {
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()]
                                                                                                                                      .map((Weight, index) =>
                                                                                                                                      (
                                                                                                                                        Weight != "" ?
                                                                                                                                          <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                  }
                                                                                                                                </select> :
                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                          inputVal5[index] == "shippingWidth" ?
                                                                                                                            editedFilter != null ?
                                                                                                                              editedFilter.length != 0 ?
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                    .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()][0] == "" ?
                                                                                                                                  <p>No Value Exist</p> :
                                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                                    : " "}
                                                                                                                                    id={inputVal5[index]}
                                                                                                                                    name={index}
                                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                  >

                                                                                                                                    <option value='selected' >
                                                                                                                                      - - select - -
                                                                                                                                    </option>
                                                                                                                                    {
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()]
                                                                                                                                        .map((Width, index) =>
                                                                                                                                        (
                                                                                                                                          Width != "" ?
                                                                                                                                            <option value={Width}>{Width}</option> : ""))
                                                                                                                                    }
                                                                                                                                  </select> :
                                                                                                                                <p>No Value Exist</p> : "...Loading" :

                                                                                                                            inputVal5[index] == "productHeight" ?
                                                                                                                              editedFilter != null ?
                                                                                                                                editedFilter.length != 0 ?
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ productHeight }) => [productHeight, productHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                      .map(({ productHeight }) => [productHeight, productHeight])).values()][0] == "" ?
                                                                                                                                    <p>No Value Exist</p> :
                                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                                      : " "}
                                                                                                                                      id={inputVal5[index]}
                                                                                                                                      name={index}
                                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                    >

                                                                                                                                      <option value='selected' >
                                                                                                                                        - - select - -
                                                                                                                                      </option>
                                                                                                                                      {
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productHeight }) => [productHeight, productHeight])).values()]
                                                                                                                                          .map((Height, index) =>
                                                                                                                                          (
                                                                                                                                            Height != "" ?
                                                                                                                                              <option value={Height}>{Height}</option> : ""))

                                                                                                                                      }
                                                                                                                                    </select> :
                                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                                              inputVal5[index] == "productLength" ?
                                                                                                                                editedFilter != null ?
                                                                                                                                  editedFilter.length != 0 ?
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ productLength }) => [productLength, productLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                        .map(({ productLength }) => [productLength, productLength])).values()][0] == "" ?
                                                                                                                                      <p>No Value Exist</p> :
                                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                                        : " "}
                                                                                                                                        id={inputVal5[index]}
                                                                                                                                        name={index}
                                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                      >

                                                                                                                                        <option value='selected' >
                                                                                                                                          - - select - -
                                                                                                                                        </option>
                                                                                                                                        {
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ productLength }) => [productLength, productLength])).values()]
                                                                                                                                            .map((Length, index) =>
                                                                                                                                            (
                                                                                                                                              Length != "" ?
                                                                                                                                                <option value={Length}>{Length}</option> : ""))
                                                                                                                                        }
                                                                                                                                      </select> :

                                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                                inputVal5[index] == "productWeight" ?
                                                                                                                                  editedFilter != null ?
                                                                                                                                    editedFilter.length != 0 ?
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ productWeight }) => [productWeight, productWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                          .map(({ productWeight }) => [productWeight, productWeight])).values()][0] == "" ?
                                                                                                                                        <p>No Value Exist</p> :
                                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                                          : " "}
                                                                                                                                          id={inputVal5[index]}
                                                                                                                                          name={index}
                                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                        >

                                                                                                                                          <option value='selected' >
                                                                                                                                            - - select - -
                                                                                                                                          </option>
                                                                                                                                          {
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ productWeight }) => [productWeight, productWeight])).values()]
                                                                                                                                              .map((Weight, index) =>
                                                                                                                                              (
                                                                                                                                                Weight != "" ?
                                                                                                                                                  <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                          }
                                                                                                                                        </select> :
                                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                                  inputVal5[index] == "productWidth" ?
                                                                                                                                    editedFilter != null ?
                                                                                                                                      editedFilter.length != 0 ?
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productWidth }) => [productWidth, productWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                            .map(({ productWidth }) => [productWidth, productWidth])).values()][0] == "" ?
                                                                                                                                          <p>No Value Exist</p> :
                                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                                            : " "}
                                                                                                                                            id={inputVal5[index]}
                                                                                                                                            name={index}
                                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                          >

                                                                                                                                            <option value='selected' >
                                                                                                                                              - - select - -
                                                                                                                                            </option>
                                                                                                                                            {
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ productWidth }) => [productWidth, productWidth])).values()]
                                                                                                                                                .map((Width, index) =>
                                                                                                                                                (
                                                                                                                                                  Width != "" ?
                                                                                                                                                    <option value={Width}>{Width}</option> : ""))
                                                                                                                                            }
                                                                                                                                          </select> :
                                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                                    inputVal5[index] == "pause" ?
                                                                                                                                      editedFilter != null ?
                                                                                                                                        editedFilter.length != 0 ?
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ pause }) => [pause, pause])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                              .map(({ pause }) => [pause, pause])).values()][0] == "" ?
                                                                                                                                            <p>No Value Exist</p> :
                                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                                              : " "}
                                                                                                                                              id={inputVal5[index]}
                                                                                                                                              name={index}
                                                                                                                                              class="border-2 border-[#008060] text
                                      -gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                            >

                                                                                                                                              <option value='selected' >
                                                                                                                                                - - select - -
                                                                                                                                              </option>
                                                                                                                                              {
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ pause }) => [pause, pause])).values()]
                                                                                                                                                  .map((pau, index) =>
                                                                                                                                                  (
                                                                                                                                                    pau != "" ?
                                                                                                                                                      <option value={pau}>{pau}</option> : ""))
                                                                                                                                              }
                                                                                                                                            </select> :
                                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                                      inputVal5[index] == "installment" ?
                                                                                                                                        editedFilter != null ?
                                                                                                                                          editedFilter.length != 0 ?
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ installment }) => [installment, installment])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                                .map(({ installment }) => [installment, installment])).values()][0] == "" ?
                                                                                                                                              <p>No Value Exist</p> :
                                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                                : " "}
                                                                                                                                                id={inputVal5[index]}
                                                                                                                                                name={index}
                                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                              >

                                                                                                                                                <option value='selected' >
                                                                                                                                                  - - select - -
                                                                                                                                                </option>
                                                                                                                                                {
                                                                                                                                                  [...new Map(editedFilter
                                                                                                                                                    .map(({ installment }) => [installment, installment])).values()]
                                                                                                                                                    .map((ins, index) =>
                                                                                                                                                    (
                                                                                                                                                      ins != "" ?
                                                                                                                                                        <option value={ins}>{ins}</option> : ""))
                                                                                                                                                }
                                                                                                                                              </select> :

                                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                                        inputVal5[index] == "transitTimeLabel" ?
                                                                                                                                          editedFilter != null ?
                                                                                                                                            editedFilter.length != 0 ?
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()].length == 1 &&
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()][0] ==
                                                                                                                                                "" ?
                                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                                  : " "}
                                                                                                                                                  id={inputVal5[index]}
                                                                                                                                                  name={index}
                                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                                >

                                                                                                                                                  <option value='selected' >
                                                                                                                                                    - - select - -
                                                                                                                                                  </option>
                                                                                                                                                  {
                                                                                                                                                    [...new Map(editedFilter
                                                                                                                                                      .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()]
                                                                                                                                                      .map((Transmit, index) =>
                                                                                                                                                      (
                                                                                                                                                        Transmit != "" ?
                                                                                                                                                          <option value={Transmit}>{Transmit}</option> : ""))
                                                                                                                                                  }
                                                                                                                                                </select> :
                                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                                          " "}
                                      </div>
                                      <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize', }}
                                        onClick={() => deleteFilters(index)}
                                      ><RemoveCircleIcon style={{ color: '#d72c0d', marginRight: '5px' }} /></Button>
                                    </div>
                                  </>
                                ))}
                                <div className='flex justify-start items-center mt-2 mb-2 pl-4 pr-4'>
                                  <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize' }} onClick={() => { addNewFilters() }}><AddCircleIcon style={{ color: '#008060', marginRight: '5px' }} /> Add Filters </Button>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleApplyFilter()} disabled={!inputVal5 || !message} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => { handleClose2(); }} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                              {/* All Filter Model End*/}
                            </Menu>
                            <button onClick={handleClickColumn} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ViewWeekIcon style={{ color: '#5c5f62' }} />
                                Columns
                              </span>
                            </button>
                            <>
                              <Popover
                                id={id}
                                open={open}
                                anchorEl={anchorEl}
                                onClose={handleCloseColumn}
                                anchorOrigin={{
                                  vertical: 'bottom',
                                  horizontal: 'left',
                                }}
                              >
                                <div className='flex flex-col p-4'>

                                  <FormControlLabel name="id" onChange={handleDefaultColumnsChange} checked={checkedColumns.id} control={<Checkbox style={{ color: '#008060' }} />} label="Id" />

                                  <FormControlLabel name="score" onChange={handleDefaultColumnsChange} checked={checkedColumns.score} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Score" />

                                  <FormControlLabel name="googleStatus" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleStatus} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Status" />

                                  <FormControlLabel name="errorsFromMerchantCenter" onChange={handleDefaultColumnsChange} checked={checkedColumns.errorsFromMerchantCenter} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Error Form Merchant Center" />

                                  <FormControlLabel name="googleProductCategory" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleProductCategory} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Product Category" />

                                  <FormControlLabel name="ageGroup" onChange={handleDefaultColumnsChange} checked={checkedColumns.ageGroup} control={<Checkbox style={{ color: '#008060' }} />} label="Age" />

                                  <FormControlLabel name="gender" onChange={handleDefaultColumnsChange} checked={checkedColumns.gender} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Gender" />

                                  <FormControlLabel name="productCondition" onChange={handleDefaultColumnsChange} checked={checkedColumns.productCondition} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Condition" />

                                  <FormControlLabel name="brand" onChange={handleDefaultColumnsChange} checked={checkedColumns.brand} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Brand" />

                                  <FormControlLabel name="productType" onChange={handleDefaultColumnsChange} checked={checkedColumns.productType} control={<Checkbox style={{ color: '#008060' }} />} label="Product Type" />

                                  <FormControlLabel name="promotionId" onChange={handleDefaultColumnsChange} checked={checkedColumns.promotionId} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Promotion Id" />

                                  <FormControlLabel name="customLabel0" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel0} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 0" />

                                  <FormControlLabel name="customLabel1" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel1} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 1" />

                                  <FormControlLabel name="customLabel2" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel2} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 2" />

                                  <FormControlLabel name="customLabel3" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel3} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 3" />

                                  <FormControlLabel name="customLabel4" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel4} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 4" />

                                </div>
                              </Popover>
                            </>
                            <button aria-controls={open3 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open3 ? 'true' : undefined} onClick={handleClick3} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ScoreboardIcon style={{ color: '#5c5f62' }} />
                                Sort By Score
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl3}
                              open={open3}
                              onClose={handleClose3}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              <>
                                <div className='pr-4 pl-4 pt-2 pb-2'>
                                  <p className='mb-2'>Sort Your Product By Score</p>
                                  <Divider />
                                </div>
                                <div className='pr-4 pl-4 pb-2'>
                                  <div sx={{ width: 300, display: 'flex', justifyContent: 'center', margin: 'auto' }}>
                                    <Slider style={{ color: '#008060' }}
                                      getAriaLabel={() => 'Minimum distance'}
                                      value={value1}
                                      onChange={handleChange1}
                                      valueLabelDisplay="auto"
                                      getAriaValueText={valuetext}
                                      disableSwap
                                      step={7}
                                      marks
                                      min={0}
                                      max={100}
                                    />
                                  </div>
                                  <div className='flex justify-between items-center'>
                                    <div className='w-32'>
                                      <label for="exampleNumber0" class="form-label inline-block mb-2 text-gray-700" >Minimum Score</label > <input onChange={handleInputChange} onBlur={handleBlur} value={value1[0]} type="number" class=" form-control block w-full px-1 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber0" placeholder="Number input" />
                                    </div>
                                    <div className='w-32'>
                                      <label for="exampleNumber1" class="form-label inline-block mb-2 text-gray-700" >Maximum Score</label > <input onChange={handleInputChange1} onBlur={handleBlur1} value={value1[1]} type="number" class=" form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber1" placeholder="Number input" />
                                    </div>
                                  </div>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleClose3()} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => handleClose3()} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                            </Menu>
                            <button onClick={handleAddProductDrawer} className="relative sm:mt-2 z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black border border-gray-300 rounded-md sm:py-2">
                                <AddIcon style={{ color: '#5c5f62' }} />
                                Add New Products
                              </span>
                            </button>
                            <>
                              {showAddProductDrawer ? (
                                <div className=''>
                                  <div
                                    className="fixed inset-0 w-full h-full bg-black opacity-40"
                                    onClick={handleAddNewProductsDrawerCancel}
                                  ></div>
                                  <div style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                                    className={`top-0 right-0  rounded-tl-lg rounded-bl-lg w-[95%] sm:w-[85%] md:w-[90%] lg:w-[70%] xl:w-[50%] 2xl:w-[60%] bg-white transition-all  p-4 text-black fixed h-full z-40  ease-in-out duration-900 ${showAddProductDrawer ? "translate-x-0 " : "translate-x-full"
                                      }`}
                                  >
                                    <div sx={{ width: '100%', typography: 'body1' }}>
                                      <TabContext value={addProductTabsValue}>
                                        <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                                          <TabList onChange={handleAddProductTabs} aria-label="lab API tabs example">
                                            <Tab label="All Product" value="all" />
                                            <Tab label="Product From Collection" value="collection" />
                                          </TabList>
                                        </div>
                                        <TabPanel value="all">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input
                                                    type="search"
                                                    class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                                    placeholder="Search"
                                                    aria-label="Search"
                                                    aria-describedby="button-addon3"
                                                    onChange={handleAddNewProductsSearch}
                                                  />
                                                  <button onClick={handleAddNewDrawerProductSearch} class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerProducts && <div class="overflow-scroll" style={{ height: '470px' }}><ul class="divide-y divide-gray-100">
                                              <Checkbox style={{ color: '#008060' }} onChange={handleDrawerProductsSelectionAll}
                                                checked={Object.keys(selectedDrawerProducts).length == drawerProductsData.products.length} /> Select All ({Object.values(selectedDrawerProducts).reduce((acc, curr) => acc + curr.length, 0)})
                                              {drawerProductsData && drawerProductsData.products.length > 0 ? drawerProductsData.products.map((value, index) => (
                                                <li class="pb-3 sm:pb-4 ">
                                                  <div class="flex items-center space-x-4 hover:bg-gray-100 p-2">
                                                    <Checkbox name={value.id} onChange={handleDrawerProductsSelection}
                                                      checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].length == value.variants.length}
                                                      style={{ color: '#008060' }} />
                                                    <div class="flex-shrink-0">
                                                      <img class="w-10 h-10 rounded-full" src={value.image && value.image.src ? value.image.src : ''} alt="Neil image" />
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                  {value.variants.length > 0 ? value.variants.map((element) => (
                                                    <>
                                                      <Divider />
                                                      <div className="ml-5 pt-2 relative hover:bg-gray-100">
                                                        <Checkbox
                                                          style={{ color: '#008060' }}
                                                          checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].indexOf(element.id) != -1}
                                                          onChange={handleDrawerProductVariantSelection}
                                                          name={element.id}
                                                          id={value.id}
                                                        />
                                                        <label className="text-sm">{element.title}</label>
                                                      </div>
                                                    </>
                                                  )) : null
                                                  }
                                                </li>
                                              )) : <li>No Product Found</li>}
                                              {loadingMoreStoreProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "1 rem", marginLeft: "40%" }} size={30} />}
                                              {(drawerProductsData && drawerProductsData.next) && <li class="pb-3 sm:pb-4 "><Button disabled={loadingMoreStoreProducts} onClick={() => { getMoreStoreProducts() }} className='bg-[#008060]' variant="contained">Load More</Button></li>}
                                            </ul></div>}
                                          </>
                                        </TabPanel>
                                        <TabPanel value="collection">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input type="search" class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" placeholder="Search" aria-label="Search" aria-describedby="button-addon3" />
                                                  <button class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            <div className='h-[50vh] w-full overflow-y-scroll'>
                                              {loadingDrawerCollections && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                              {!loadingDrawerCollections && <ul class="divide-y divide-gray-100">
                                                {storeCollections.length > 0 ? storeCollections.map((value) => (
                                                  <li class="pb-3 sm:pb-4 pt-3 hover:bg-gray-100 h-fit">
                                                    <div class="flex items-center space-x-4">
                                                      <Checkbox
                                                        style={{ color: '#008060' }}
                                                        name={value.id}
                                                        checked={selectedDrawerCollections.indexOf(value.id) != -1}
                                                        onChange={handleDrawerCollectionSelection}
                                                      />
                                                      <div class="flex-1 min-w-0">
                                                        <p class="text-md text-black truncate">
                                                          {value.title}
                                                        </p>
                                                      </div>
                                                    </div>
                                                  </li>
                                                )) : <li>No Collection Found</li>}
                                                {/* <li class="pb-3 sm:pb-4 hover:bg-gray-100">
                                                <div class="flex items-center space-x-4 mt-3">
                                                  <Checkbox style={{ color: '#008060' }} />
                                                  <div class="flex-shrink-0">
                                                    <img class="w-12 h-12 rounded-full" src='https://cdn.shopify.com/s/files/1/0265/5043/5911/products/v--1774937877__-684744191_400x.jpg' alt="Neil image" />
                                                  </div>
                                                  <div class="flex-1 min-w-0">
                                                    <p class="text-md text-black truncate">
                                                      Test Collection
                                                    </p>
                                                  </div>
                                                </div>
                                              </li> */}
                                              </ul>}
                                            </div>
                                          </>
                                        </TabPanel>
                                      </TabContext>
                                      <div className='absolute bottom-1 w-[96%] bg-white z-99'>
                                        <Divider />
                                        <div className='flex justify-between mt-2'>
                                          <Button variant='contained' onClick={handleAddNewProducts}
                                            className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} >Apply</Button>
                                          <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                        </div>
                                      </div>
                                    </div>
                                    <div className='absolute bottom-1 w-[96%]'>
                                      <Divider />
                                      <div className='flex justify-between mt-2'>
                                        <Button onClick={handleAddNewProducts} className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} variant="contained">Apply</Button>
                                        <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                            </>
                          </div>
                        </div>
                      </div>
                      {selectedResources.length > 0 ? (
                        <>
                          <div class="rounded-md ml-2 flex items-center" role="group">
                            <button type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-gray-50 text-black">
                              {selectedResources != "all" ? selectedResources.length : totalDisapprovedResults} Selected
                            </button>
                            <button onClick={handleBulkEditClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border hover:bg-gray-50 text-black">
                              <EditIcon style={{ fontSize: '20px', marginRight: '5px', color: '#3285fa ' }} />
                              Bulk Edit
                            </button>
                            <button onClick={() => setShowSyncFromShopifyModel(!showSyncFromShopifyModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#7cb342" d="M37.216,11.78c-0.023-0.211-0.211-0.305-0.351-0.305s-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	c-0.234-0.234-0.68-0.164-0.867-0.117c-0.023,0-0.469,0.141-1.195,0.375c-0.726-2.086-1.968-3.984-4.194-3.984h-0.211	C24.187,4.375,23.391,4,22.735,4c-5.155,0-7.639,6.444-8.412,9.725c-2.015,0.633-3.445,1.054-3.609,1.125	c-1.125,0.351-1.148,0.375-1.289,1.429c-0.117,0.797-3.046,23.456-3.046,23.456L29.179,44l12.373-2.671	C41.575,41.282,37.24,11.991,37.216,11.78z M27.937,9.483c-0.562,0.164-1.242,0.375-1.921,0.609V9.671	c0-1.265-0.164-2.296-0.469-3.117C26.718,6.695,27.445,7.984,27.937,9.483L27.937,9.483z M24.117,6.812	c0.305,0.797,0.516,1.922,0.516,3.468v0.234c-1.265,0.398-2.601,0.797-3.984,1.242C21.422,8.804,22.899,7.351,24.117,6.812	L24.117,6.812z M22.617,5.359c0.234,0,0.469,0.094,0.656,0.234c-1.664,0.773-3.421,2.718-4.148,6.655	c-1.101,0.351-2.156,0.656-3.163,0.984C16.806,10.233,18.915,5.359,22.617,5.359z"></path><path fill="#558b2f" d="M36.865,11.428c-0.141,0-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	C31.17,8.757,31.053,8.71,30.96,8.71L29.249,44l12.373-2.671c0,0-4.335-29.338-4.359-29.549	C37.169,11.569,37.005,11.475,36.865,11.428z"></path><path fill="#fff" d="M24.792,18.593l-1.475,4.449c0,0-1.337-0.715-2.927-0.715c-2.374,0-2.489,1.498-2.489,1.867	c0,2.028,5.301,2.812,5.301,7.583c0,3.757-2.374,6.177-5.578,6.177c-3.872,0-5.808-2.397-5.808-2.397l1.037-3.411	c0,0,2.028,1.752,3.734,1.752c1.129,0,1.59-0.876,1.59-1.521c0-2.651-4.333-2.766-4.333-7.145c0-3.665,2.628-7.214,7.952-7.214	C23.777,17.994,24.792,18.593,24.792,18.593z"></path></svg>
                              Sync From Shopify
                            </button>
                            <button onClick={() => setShowGoogleSyncModel(!showGoogleSyncModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                              Sync From Google
                            </button>
                            {/* <button onClick={() => setShowIncludeModel(!showIncludeModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CheckCircleIcon style={{ fontSize: '20px', marginRight: '5px', color: '#4CAF50' }} />
                              Include
                            </button> */}
                            <button onClick={handleExcludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CancelIcon style={{ fontSize: '20px', marginRight: '5px', color: '#FF3D00' }} />
                              Exclude
                            </button>
                            <button onClick={() => setShowBulkDeleteModel(!showBulkDeleteModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-gray-50 text-black">
                              <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#d72c0d' }} />
                              Delete
                            </button>
                            {totalDisappResults > disapprovedResultsPerPageLimit && !filterApplied && (selectedResources == "all" ? <Button onClick={clearAllSelections} style={{ marginLeft: '10px' }}>Undo</Button> : <Button onClick={handleSelectAllProducts} style={{ marginLeft: '10px' }}>Select all {totalDisapprovedResults} products</Button>)}
                          </div>
                        </>
                      ) : null}
                      <div className="w-full inline-block align-middle overflow-x-scroll">
                        <div className="rounded-lg overflow-x w-fit">
                          <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                            <thead className="overflow-x-scroll">
                              <tr>
                                <th scope="col" className="px-4 py-3 text-xs font-bold text-start text-gray-500 capitalize ">
                                  <Checkbox
                                    type="checkbox"
                                    className="form-check-input"
                                    name="allSelect"
                                    checked={selectedResources.length > 0 ? true : false}
                                    onChange={handleProductSelectAll}
                                    style={{ color: '#008060' }}
                                  />

                                </th>
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Name
                                </th>
                                {checkedColumns.id && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Id
                                </th>}
                                {checkedColumns.score && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Score
                                </th>}
                                {checkedColumns.googleStatus && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Status
                                </th>}
                                {checkedColumns.errorsFromMerchantCenter && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Error From Merchant Center
                                </th>}
                                {checkedColumns.googleProductCategory && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Product Category
                                </th>}
                                {checkedColumns.ageGroup && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Age
                                </th>}
                                {checkedColumns.gender && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Gender
                                </th>}
                                {checkedColumns.productCondition && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Condition
                                </th>}
                                {checkedColumns.brand && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Brand
                                </th>}
                                {checkedColumns.productType && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Type
                                </th>}
                                {checkedColumns.promotionId && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Promotion Id
                                </th>}
                                {checkedColumns.customLabel0 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 0
                                </th>}
                                {checkedColumns.customLabel1 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 1
                                </th>}
                                {checkedColumns.customLabel2 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 2
                                </th>}
                                {checkedColumns.customLabel3 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 3
                                </th>}
                                {checkedColumns.customLabel4 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 4
                                </th>}
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Actions
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                              {allDisapprovedProductRows}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      {/* Pagination */}
                      <>
                        {!filterApplied && <div className='flex justify-center items-center'>
                          <div>
                            <TablePagination
                              component="div"
                              page={disapprovedCurrentPage}
                              count={totalDisapprovedResults}
                              onPageChange={handleDisappCurrentPageChange}
                              rowsPerPage={disapprovedResultsPerPageLimit}
                              rowsPerPageOptions={resultsPerPageOptions}
                              onRowsPerPageChange={handleDisappResultsPerPageChange}
                            />
                          </div>
                        </div>}
                      </>
                    </div>
                  </div>)}
                </TabPanel>
                <TabPanel value="pending">
                  {loadingPendProducts ? (
                    <>
                      <div className="flex flex-col mt-2">
                        <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                          <div className="py-3 w-full pl-2 flex justify-between">
                            <div className="w-[35%] relative">
                              <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                            </div>
                            <div className="w-[60%] flex items-center relative">
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                            </div>
                          </div>
                          <div className="w-full inline-block align-middle overflow-x-scroll">
                            <div className="rounded-lg overflow-x w-fit">
                              <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                                <thead className="overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '4vh' }} />
                                    </div>
                                  </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (<div className="flex flex-col mt-2">
                    <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                      <div className="py-3 pl-2 lg:flex xl:flex 2xl:flex justify-between">
                        <div className="relative w-full lg:w-[25%] xl:w-[40%] 2xl:w-[50%]">
                          <label htmlFor="hs-table-search" className="sr-only">
                            Search
                          </label>
                          <input
                            type="text"
                            onChange={handleFiltersQueryChange}
                            name="hs-table-search"
                            id="hs-table-search"
                            className="block w-full p-2 mt-[10px] pl-10 text-sm border border-[#babfc3] rounded-md focus:border-blue-500 focus:ring-blue-500 "
                            placeholder="Search..."
                          />
                          {tags.map((tag, index) => (
                            <span id="badge-dismiss-dark" class="mt-2 inline-flex items-center py-1 px-2 mr-2 text-sm font-medium text-gray-800 bg-gray-100 rounded ">
                              {tag}
                              <button onClick={() => deleteTag(index)} type="button" class="inline-flex items-center p-0.5 ml-2 text-sm text-gray-400 bg-transparent rounded-sm hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-300 dark:hover:text-gray-900" data-dismiss-target="#badge-dismiss-dark" aria-label="Remove">
                                <svg aria-hidden="true" class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                <span class="sr-only">Remove badge</span>
                              </button>
                            </span>
                          ))}
                        </div>
                        <div style={{ alignItems: 'baseline' }} className="flex flex-wrap mt-2 lg:m-0 xl:m-0 2xl:m-0 items-center space-x-2 align-baseline">
                          <div className="relative">
                            <button onClick={handleExportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <PublishIcon style={{ color: '#5c5f62' }} />
                                Export
                              </span>
                            </button>
                            <button onClick={handleImportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <GetAppIcon style={{ color: '#5c5f62' }} />
                                Import
                              </span>
                            </button>
                            <button aria-controls={open2 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open2 ? 'true' : undefined} onClick={handleClick2} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <TuneIcon style={{ color: '#5c5f62' }} />
                                Filters
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl2}
                              open={open2}
                              onClose={handleClose2}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              {/* All Filter Model */}
                              <>
                                <div className='pt-2 pb-2 pr-4 pl-4'>
                                  <p>Search By Filters</p>
                                  <Divider />
                                </div>
                                {productFilters.map((val, index) => (
                                  <>
                                    <div value={index} className='flex justify-between items-center p-4'>
                                      <div className='mr-2'>
                                        <select
                                          onChange={handlefilterState}
                                          id="countries"
                                          name={index}
                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                        >
                                          <option disabled selected value>
                                            - - select - -
                                          </option>
                                          <option value="adsGrouping" selected={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ? productFilterFromDb[index]['name'] == "adsGrouping" ? true : false : false : false}>Ads Grouping</option>
                                          <option value="adsLabels" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adsLabels" ? true : false : false : false
                                          }>Ads Labels</option>
                                          <option value="shippingLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLabel" ? true : false : false : false
                                          }>Shipping Label</option>
                                          <option value="adult" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "adult" ? true : false : false : false
                                          }>Product is Adult-oriented</option>
                                          <option value="ageGroup" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "ageGroup" ? true : false : false : false
                                          }>Age Group</option>
                                          <option value="productCondition" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productCondition" ? true : false : false : false
                                          }>Condition</option>
                                          <option value="merchantErrors" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "merchantErrors" ? true : false : false : false
                                          }>Merchant Errors</option>
                                          <option value="color" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "color" ? true : false : false : false
                                          }>Color - Assigned For Feed</option>
                                          <option value="costOfGoodsSold" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "costOfGoodsSold" ? true : false : false : false
                                          }>Cost Of Goods Sold</option>
                                          <option value="customLabel0" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel0" ? true : false : false : false
                                          }>Custom Label 0</option>
                                          <option value="customLabel1" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel1" ? true : false : false : false
                                          }>Custom Label 1</option>
                                          <option value="customLabel2" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel2" ? true : false : false
                                          }>Custom Label 2</option>
                                          <option value="customLabel3" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel3" ? true : false : false : false
                                          }>Custom Label 3</option>
                                          <option value="customLabel4" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "customLabel4" ? true : false : false : false
                                          }> Custom Label 4</option>
                                          <option value="product_category_id" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "product_category_id" ? true : false : false : false

                                          }>Google Product Categories</option>
                                          <option value="material" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "material" ? true : false : false : false

                                          }>Material - Assigned For Feed</option>
                                          <option value="pattern" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pattern" ? true : false : false : false
                                          }>Pattern - Assigned For Feed</option>
                                          <option value="subscriptionCost" selected={

                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "subscriptionCost" ? true : false : false : false
                                          }
                                          >Subscription cost </option>
                                          <option value="identifierExists" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "identifierExists" ? true : false : false : false
                                          }>Product Identifier Exists</option>
                                          <option value="productTypes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productTypes" ? true : false : false : false
                                          }>Product Type</option>
                                          <option value="promotionIds" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "promotionIds " ? true : false : false : false
                                          }>Promotion Id</option>
                                          <option value="return_policy_label" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "return_policy_label" ? true : false : false : false
                                          }>Return Policy Label</option>
                                          <option value="sizes" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizes" ? true : false : false : false
                                          }>Size - Assigned For Feed</option>
                                          <option value="sizeSystem" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeSystem" ? true : false : false : false
                                          }>Size System</option>
                                          <option value="sizeType" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "sizeType" ? true : false : false : false
                                          }>Size Type</option>
                                          <option value="taxCategory" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "taxCategory" ? true : false : false : false
                                          }>Tax Category</option>
                                          <option value="unitPricingMeasure" selected={
                                            productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "unitPricingMeasure" ? true : false : false : false
                                          }
                                          >Unit Pricing Measure</option>
                                          <option value="unitPricingBaseMeasure"
                                            selected={
                                              productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                                productFilterFromDb[index]['name'] ==
                                                  "unitPricingBaseMeasure" ? true : false : false : false
                                            }
                                          >Unit Pricing Base Measure</option>
                                          <option value="availability" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "avaibility" ? true : false : false : false
                                          }>Availability</option>
                                          <option value="isBundle" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "isBundle" ? true : false : false : false
                                          }>Is it bundle</option>
                                          <option value="loyaltyPoints" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "loyaltyPoints" ? true : false : false : false
                                          }>Loyalty Points</option>
                                          <option value="energyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "energyEfficiencyClass" ? true : false : false : false
                                          }>Energy Efficiency Class</option>
                                          <option value="maxEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxEnergyEfficiencyClass" ? true : false : false : false
                                          }>Max Energy Efficiency Class</option>
                                          <option value="minEnergyEfficiencyClass" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minEnergyEfficiencyClass" ? true : false : false : false
                                          }>Min Energy Efficiency Class</option>
                                          <option value="maxHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "maxHandlingTime" ? true : false : false : false
                                          }>Max Handling Time</option>
                                          <option value="minHandlingTime" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "minHandlingTime" ? true : false : false : false
                                          }>Min Handling Time</option>
                                          <option value="multipack" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "multipack" ? true : false : false : false
                                          }>Multipack</option>
                                          <option value="shippingHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingHeight" ? true : false : false : false
                                          }>Shipping Height</option>
                                          <option value="shippingLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingLength" ? true : false : false : false
                                          }>Shipping Length</option>
                                          <option value="shippingWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWeight" ? true : false : false : false
                                          }>Shipping Weight</option>
                                          <option value="shippingWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "shippingWidth" ? true : false : false : false
                                          }>Shipping Width</option>
                                          <option value="transitTimeLabel" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "transitTimeLabel " ? true : false : false : false
                                          }>Transit Time Label</option>
                                          <option value="productHeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productHeight" ? true : false : false : false
                                          }>Product Height</option>
                                          <option value="productLength" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] && productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productLength" ? true : false : false
                                          }>Product Length</option>
                                          <option value="productWidth" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWidth" ? true : false : false : false
                                          }>Product Weight</option>
                                          <option value="productWeight" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "productWeight" ? true : false : false : false
                                          }>Product Width</option>
                                          <option value="installment" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "installment" ? true : false : false : false
                                          }>Installment</option>
                                          <option value="pause" selected={
                                            productFilterFromDb != ''
                                              && productFilterFromDb[index] ? productFilterFromDb[index]['name'] ?
                                              productFilterFromDb[index]['name'] ==
                                                "pause" ? true : false : false : false
                                          }> Product Pause</option>
                                        </select>
                                      </div>
                                      <div className='mr-2'>
                                        {
                                          inputVal5[index] == "adsGrouping" ?
                                            labelsFilter != null ?
                                              labelsFilter.length != 0 ?
                                                [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()][0] == "" ?
                                                  <p>No Value Exist</p> :
                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                    productFilterFromDb[index]['value'] : " "
                                                    : " "}
                                                    id={inputVal5[index]}
                                                    name={index}
                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                  >

                                                    <option value='selected' >
                                                      - - select - -
                                                    </option>
                                                    {
                                                      [...new Map(labelsFilter.map(({ adsGrouping }) => [adsGrouping, adsGrouping])).values()]
                                                        .map((label, i) =>
                                                        (
                                                          label != "" ?
                                                            <option value={label}>{label}</option> : ""))
                                                    }
                                                  </select> :
                                                <p>No Value Exist</p> : "....Loading" :
                                            inputVal5[index] == "adsLabels" ?
                                              labelsFilter != null ?
                                                labelsFilter.length != 0 ?
                                                  [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()].length == 1 && [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()][0] == "" ?
                                                    <p>No Value Exist</p> :
                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                      productFilterFromDb[index]['value'] : " "
                                                      : " "}
                                                      id={inputVal5[index]}
                                                      name={index}
                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                    >

                                                      <option value='selected' >
                                                        - - select - -
                                                      </option>
                                                      {
                                                        [...new Map(labelsFilter.map(({ adsLabels }) => [adsLabels, adsLabels])).values()]
                                                          .map((label, index) =>
                                                          (
                                                            label != "" ?
                                                              <option value={label}>{label}</option> : ""))
                                                      }
                                                    </select> :
                                                  <p>No Value Exist</p> : "...Loading" :
                                              inputVal5[index] == "shippingLabel" ?
                                                labelsFilter != null ?
                                                  labelsFilter.length != 0 ?
                                                    [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()].length == 1 && [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()][0] != "" ? <p>No Value Exist</p>
                                                      :
                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                        productFilterFromDb[index]['value'] : " "
                                                        : " "}
                                                        id={inputVal5[index]}
                                                        name={index}
                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                      >

                                                        <option value='selected' >
                                                          - - select - -
                                                        </option>
                                                        {
                                                          [...new Map(labelsFilter.map(({ shippingLabel }) => [shippingLabel, shippingLabel])).values()]
                                                            .map((label, index) =>
                                                            (
                                                              label != "" ?
                                                                <option value={label}>{label}</option> : ""))
                                                        }
                                                      </select>
                                                    : <p>No Value Exist</p> : "...Loading"
                                                : inputVal5[index] == "adult" ?
                                                  editedFilter != null ?
                                                    editedFilter.length != 0 ?
                                                      [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()].length != 0 ?
                                                        <p>No Value Exist</p> :
                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                          productFilterFromDb[index]['value'] : " "
                                                          : " "}
                                                          id={inputVal5[index]}
                                                          name={index}
                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                        >

                                                          <option value='selected' >
                                                            - - select - -
                                                          </option>
                                                          {
                                                            [...new Map(editedFilter.map(({ adult }) => [adult, adult])).values()]
                                                              .map((adult, index) =>
                                                              (
                                                                adult != "" ?
                                                                  <option value={adult}>{adult}</option> : ""))
                                                          }
                                                        </select>
                                                      : <p>No Value Exist</p> : "...Loading"
                                                  : inputVal5[index] == "ageGroup" ?
                                                    variatFilter != null ?
                                                      variatFilter.length != 0 ?
                                                        [...new Map(variatFilter.map(({
                                                          ageGroup }) => [ageGroup, ageGroup])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                            ageGroup }) => [ageGroup, ageGroup])).values()][0] == "" ?
                                                          <p>No Value Exist</p> :
                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                            productFilterFromDb[index]['value'] : " "
                                                            : " "}
                                                            id={inputVal5[index]}
                                                            name={index}
                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                          >
                                                            <option value='selected' >
                                                              - - select - -
                                                            </option>
                                                            {
                                                              [...new Map(variatFilter.map(({
                                                                ageGroup }) => [ageGroup, ageGroup])).values()].map((age, index) => (
                                                                  <option value={age}> {age} </option>
                                                                ))
                                                            }
                                                          </select> :
                                                        <p>No Value Exist</p> : "...Loading" :
                                                    inputVal5[index] == "productCondition" ?
                                                      variatFilter != null ?
                                                        variatFilter.length != 0 ?
                                                          [...new Map(variatFilter
                                                            .map(({ productCondition }) => [productCondition, productCondition])).values()].length == 1 && [...new Map(variatFilter
                                                              .map(({ productCondition }) => [productCondition, productCondition])).values()][0] == "" ? <p>No Value Exist</p> :
                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                              productFilterFromDb[index]['value'] : " "
                                                              : " "}
                                                              id={inputVal5[index]}
                                                              name={index}
                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                            >

                                                              <option value='selected' >
                                                                - - select - -
                                                              </option>
                                                              {
                                                                [...new Map(variatFilter
                                                                  .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                    <option value={condition}> {condition} </option>
                                                                  ))
                                                              }
                                                            </select> :
                                                          <p>No Value Exist</p> : "...Loading" :

                                                      inputVal5[index] == "merchantErrors" ?
                                                        variatFilter != null ?
                                                          variatFilter.length != 0 ?
                                                            [...new Map(variatFilter
                                                              .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].length == 1 && [...new Map(variatFilter
                                                                .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()][0] == "" ? <p>No Value Exist</p> :
                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                productFilterFromDb[index]['value'] : " "
                                                                : " "}
                                                                id={inputVal5[index]}
                                                                name={index}
                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                              >

                                                                <option value='selected' >
                                                                  - - select - -
                                                                </option>
                                                                {
                                                                  [...new Map(variatFilter
                                                                    .map(({ merchantErrors }) => [merchantErrors, merchantErrors])).values()].map((error, index) => (
                                                                      <option value={error}> {error} </option>
                                                                    ))
                                                                }
                                                              </select> :
                                                            <p>No Value Exist</p> : "...Loading" :

                                                        inputVal5[index] == "color" ?
                                                          editedFilter != null ?
                                                            editedFilter.length != 0 ?
                                                              [...new Map(editedFilter.map(({ color }) => [color, color])).values()].length == 1 && [...new Map(editedFilter.map(({ color }) => [color, color])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                <select onChange={handleChangeInput} value={productFilterFromDb != '' && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ? productFilterFromDb[index]['value'] : " " : " "}
                                                                  id={inputVal5[index]}
                                                                  name={index}
                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                >
                                                                  <option value='selected' >
                                                                    - - select - -
                                                                  </option>
                                                                  {
                                                                    [...new Map(editedFilter.map(({ color }) => [color, color])).values()]
                                                                      .map((colr, index) =>
                                                                      (
                                                                        colr != "" ?
                                                                          <option value={colr}>{colr}</option> : ""))
                                                                  }
                                                                </select> :
                                                              <p>No Value Exist</p> : "...Loading" :
                                                          inputVal5[index] == "costOfGoodsSold" ?
                                                            editedFilter != null ?
                                                              editedFilter.length != 0 ?

                                                                [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                  .length == 1 && [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()][0] == "" ?
                                                                  <p>No Value Exist</p> :
                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                    && productFilterFromDb[index] ?
                                                                    productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                    : " "}
                                                                    id={inputVal5[index]}
                                                                    name={index}
                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                  >

                                                                    <option value='selected' >
                                                                      - - select - -
                                                                    </option>
                                                                    {
                                                                      [...new Map(editedFilter.map(({ costOfGoodsSold }) => [costOfGoodsSold, costOfGoodsSold])).values()]
                                                                        .map((cost, index) =>
                                                                        (
                                                                          cost != "" ?
                                                                            <option value={cost}>{cost}</option> : ""))
                                                                    }
                                                                  </select> :
                                                                <p>No Value Exist</p> : "...Loading" :
                                                            inputVal5[index] == "customLabel0" ?
                                                              labelsFilter != null ?
                                                                labelsFilter.length != 0 ?
                                                                  [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()][0] == "" ?
                                                                    <p>No Value Exist</p> :
                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                      productFilterFromDb[index]['value'] : " "
                                                                      : " "}
                                                                      id={inputVal5[index]}
                                                                      name={index}
                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                    >

                                                                      <option value='selected' >
                                                                        - - select - -
                                                                      </option>
                                                                      {
                                                                        [...new Map(labelsFilter.map(({ customLabel0 }) => [customLabel0, customLabel0])).values()]
                                                                          .map((label0, index) =>
                                                                          (
                                                                            label0 != "" ?
                                                                              <option value={label0}>{label0}</option> : ""))
                                                                      }
                                                                    </select> :
                                                                  <p>No Value Exist</p> : "...Loading" :
                                                              inputVal5[index] == "customLabel1" ?
                                                                labelsFilter != null ?
                                                                  labelsFilter.length != 0 ?
                                                                    [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                        productFilterFromDb[index]['value'] : " "
                                                                        : " "}
                                                                        id={inputVal5[index]}
                                                                        name={index}
                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                      >

                                                                        <option value='selected' >
                                                                          - - select - -
                                                                        </option>
                                                                        {
                                                                          [...new Map(labelsFilter.map(({ customLabel1 }) => [customLabel1, customLabel1])).values()]
                                                                            .map((label1, index) =>
                                                                            (
                                                                              label1 != "" ?
                                                                                <option value={label1}>{label1}</option> : ""))
                                                                        }
                                                                      </select> :
                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                inputVal5[index] == "customLabel2" ?
                                                                  labelsFilter != null ?
                                                                    labelsFilter.length != 0 ?
                                                                      [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()][0] == "" ?
                                                                        <p>No Value Exist</p> :
                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                          productFilterFromDb[index]['value'] : " "
                                                                          : " "}
                                                                          id={inputVal5[index]}
                                                                          name={index}
                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                        >

                                                                          <option value='selected' >
                                                                            - - select - -
                                                                          </option>
                                                                          {
                                                                            [...new Map(labelsFilter.map(({ customLabel2 }) => [customLabel2, customLabel2])).values()].map((label2, index) =>
                                                                            (
                                                                              label2 != "" ?
                                                                                <option value={label2}>{label2}</option> : ""))
                                                                          }
                                                                        </select>
                                                                      : <p>No Value Exist</p> : "...Loading" :
                                                                  inputVal5[index] == "customLabel3" ?
                                                                    labelsFilter != null ?
                                                                      labelsFilter.length != 0 ?
                                                                        [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                            productFilterFromDb[index]['value'] : " "
                                                                            : " "}
                                                                            id={inputVal5[index]}
                                                                            name={index}
                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                          >

                                                                            <option value='selected' >
                                                                              - - select - -
                                                                            </option>
                                                                            {
                                                                              [...new Map(labelsFilter.map(({ customLabel3 }) => [customLabel3, customLabel3])).values()]
                                                                                .map((label3, index) =>
                                                                                (
                                                                                  label3 != "" ?
                                                                                    <option value={label3}>{label3}</option> : ""))
                                                                            }
                                                                          </select> :
                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                    inputVal5[index] == "customLabel4" ?
                                                                      labelsFilter != null ?
                                                                        labelsFilter.length != 0 ?

                                                                          [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()].length == 1 && [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                [...new Map(labelsFilter.map(({ customLabel4 }) => [customLabel4, customLabel4])).values()]
                                                                                  .map((label4, index) =>
                                                                                  (
                                                                                    label4 != "" ?
                                                                                      <option value={label4}>{label4}</option> : ""))
                                                                              }
                                                                            </select> :
                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                      inputVal5[index] == "product_category_id" ?
                                                                        variatFilter != null ?
                                                                          [...new Map(variatFilter.map(({
                                                                            product_category_id }) => [product_category_id, product_category_id])).values()].length == 1 && [...new Map(variatFilter.map(({
                                                                              product_category_id }) => [product_category_id, product_category_id])).values()][0] != "" ? <p>No Value Exist</p> :
                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                              productFilterFromDb[index]['value'] : " "
                                                                              : " "}
                                                                              id={inputVal5[index]}
                                                                              name={index}
                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                            >

                                                                              <option value='selected' >
                                                                                - - select - -
                                                                              </option>
                                                                              {
                                                                                productCategories.map((category, index) => (
                                                                                  variatFilter != "" &&
                                                                                    variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({
                                                                                      product_category_id }) => [product_category_id, product_category_id])).values()].map((id, index) => (
                                                                                        id == category.id ?
                                                                                          <option value={category.id}>{category.name}</option> : " "
                                                                                      )) : ""
                                                                                ))
                                                                              }
                                                                            </select> : "....Loading" :
                                                                        inputVal5[index] == "material" ?
                                                                          editedFilter != null ?
                                                                            editedFilter.length != 0 ?
                                                                              [...new Map(editedFilter.map(({ material }) => [material, material])).values()].length == 1 && [...new Map(editedFilter.map(({ material }) => [material, material])).values()][0] == "" ?
                                                                                <p>No Value Exist</p> :
                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                  : " "}
                                                                                  id={inputVal5[index]}
                                                                                  name={index}
                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                >

                                                                                  <option value='selected' >
                                                                                    - - select - -
                                                                                  </option>
                                                                                  {
                                                                                    [...new Map(editedFilter.map(({ material }) => [material, material])).values()]
                                                                                      .map((materl, index) =>
                                                                                      (
                                                                                        materl != "" ?
                                                                                          <option value={materl}>{materl}</option> : ""))
                                                                                  }
                                                                                </select> :
                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                          inputVal5[index] == "pattern" ?
                                                                            editedFilter != null ?
                                                                              editedFilter.length != 0 ?
                                                                                [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()].length == 1 && [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()][0] == "" ?
                                                                                  <p>No Value Exist</p> :
                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                    : " "}
                                                                                    id={inputVal5[index]}
                                                                                    name={index}
                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                  >

                                                                                    <option value='selected' >
                                                                                      - - select - -
                                                                                    </option>
                                                                                    {
                                                                                      [...new Map(editedFilter.map(({ pattern }) => [pattern, pattern])).values()]
                                                                                        .map((pattrn, index) =>
                                                                                        (
                                                                                          pattrn != "" ?
                                                                                            <option value={pattrn}>{pattrn}</option> : ""))
                                                                                    }
                                                                                  </select> :
                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                            inputVal5[index] == "identifierExists" ?
                                                                              editedFilter != null ?
                                                                                editedFilter.length != 0 ?
                                                                                  [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()].length == 1 && [...new Map(editedFilter.map(({ identifierExists }) => [identifierExists, identifierExists])).values()][0] == "" ?
                                                                                    <p>No Value Exist</p> :
                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                      : " "}
                                                                                      id={inputVal5[index]}
                                                                                      name={index}
                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                    >

                                                                                      <option value='selected' >
                                                                                        - - select - -
                                                                                      </option>
                                                                                      {
                                                                                        [...new Map(variatFilter
                                                                                          .map(({ productCondition }) => [productCondition, productCondition])).values()].map((condition, index) => (
                                                                                            <option value={condition}> {condition} </option>
                                                                                          ))
                                                                                      }
                                                                                    </select> :
                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                              inputVal5[index] == "productTypes" ?
                                                                                variatFilter != null ?
                                                                                  variatFilter.length != 0 ?
                                                                                    [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()].length == 1 && [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()][0] == "" ? <p>No Value Exist</p> :
                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                        : " "}
                                                                                        id={inputVal5[index]}
                                                                                        name={index}
                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                      >

                                                                                        <option value='selected' >
                                                                                          - - select - -
                                                                                        </option>
                                                                                        {
                                                                                          [...new Map(variatFilter.map(({ productTypes }) => [productTypes, productTypes])).values()]
                                                                                            .map((
                                                                                              type, index) =>
                                                                                            (
                                                                                              type !== "" && type !== null ?
                                                                                                <option value={type}>{type}</option> : ""))
                                                                                        }
                                                                                      </select> :
                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                inputVal5[index] == "promotionIds" ?
                                                                                  editedFilter != null ?
                                                                                    editedFilter.length != 0 ?
                                                                                      [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()].length == 1
                                                                                        && [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()][0] == ""
                                                                                        ? <p>No Value Exist</p> :
                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                          : " "}

                                                                                          id={inputVal5[index]}
                                                                                          name={index}
                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                        >

                                                                                          <option value='selected' >
                                                                                            - - select - -
                                                                                          </option>
                                                                                          {
                                                                                            [...new Map(editedFilter.map(({ promotionIds }) => [promotionIds, promotionIds])).values()]
                                                                                              .map((pormotion, index) =>
                                                                                              (
                                                                                                pormotion != "" ?
                                                                                                  <option values={pormotion} >{pormotion}</option> : ""))
                                                                                          }
                                                                                        </select> :
                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                  inputVal5[index] == "return_policy_label" ?
                                                                                    editedFilter != null ?
                                                                                      editedFilter.length != 0 ?
                                                                                        [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()].length == 1 && [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()][0] == "" ?
                                                                                          <p>No Value Exist</p> :
                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                            : " "}
                                                                                            id={inputVal5[index]}
                                                                                            name={index}
                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                          >

                                                                                            <option value='selected' >
                                                                                              - - select - -
                                                                                            </option>
                                                                                            {
                                                                                              [...new Map(editedFilter.map(({ return_policy_label }) => [return_policy_label, return_policy_label])).values()]
                                                                                                .map((policy, index) =>
                                                                                                (
                                                                                                  policy != "" ?
                                                                                                    <option values={policy} >{policy}</option> : ""))
                                                                                            }
                                                                                          </select> :
                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                    inputVal5[index] == "sizes" ?
                                                                                      editedFilter != null ?
                                                                                        editedFilter.length != 0 ?
                                                                                          [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()].length == 1 && [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()][0] == "" ?
                                                                                            <p>No Value Exist</p> :
                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                              : " "}
                                                                                              id={inputVal5[index]}
                                                                                              name={index}
                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                            >

                                                                                              <option value='selected' >
                                                                                                - - select - -
                                                                                              </option>
                                                                                              {
                                                                                                [...new Map(editedFilter.map(({ sizes }) => [sizes, sizes])).values()]
                                                                                                  .map((size, index) =>
                                                                                                  (
                                                                                                    size != "" ?
                                                                                                      <option values={size}>{size}</option> : ""))
                                                                                              }
                                                                                            </select> :
                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                      inputVal5[index] == "sizeSystem" ?
                                                                                        editedFilter != null ?
                                                                                          editedFilter.length != 0 ?
                                                                                            [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()][0] == "" ?
                                                                                              <p>No Value Exist</p> :
                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                : " "}
                                                                                                id={inputVal5[index]}
                                                                                                name={index}
                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                              >

                                                                                                <option value='selected' >
                                                                                                  - - select - -
                                                                                                </option>
                                                                                                {
                                                                                                  [...new Map(editedFilter.map(({ sizeSystem }) => [sizeSystem, sizeSystem])).values()]
                                                                                                    .map((sizes, index) =>
                                                                                                    (
                                                                                                      sizes != "" ?
                                                                                                        <option value={sizes}>{sizes}</option> : ""))
                                                                                                }
                                                                                              </select> :
                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                        inputVal5[index] == "sizeType" ?
                                                                                          editedFilter != null ?
                                                                                            editedFilter.length != 0 ?
                                                                                              [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()].length == 1 && [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()][0] == "" ?
                                                                                                <p>No Value Exist</p> :
                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                  : " "}
                                                                                                  id={inputVal5[index]}
                                                                                                  name={index}
                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                >

                                                                                                  <option value='selected' >
                                                                                                    - - select - -
                                                                                                  </option>
                                                                                                  {
                                                                                                    [...new Map(editedFilter.map(({ sizeType }) => [sizeType, sizeType])).values()]
                                                                                                      .map((type, index) =>
                                                                                                      (
                                                                                                        type != "" ?
                                                                                                          <option value={type}>{type}</option> : ""))
                                                                                                  }
                                                                                                </select> :
                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                          inputVal5[index] == "subscriptionCost" ?
                                                                                            editedFilter != null ?
                                                                                              editedFilter.length != 0 ?
                                                                                                [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()].length == 1 && [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()][0] == "" ?
                                                                                                  <p>No Value Exist</p> :
                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                    : " "}
                                                                                                    id={inputVal5[index]}
                                                                                                    name={index}
                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                  >

                                                                                                    <option value='selected' >
                                                                                                      - - select - -
                                                                                                    </option>
                                                                                                    {
                                                                                                      [...new Map(editedFilter.map(({ subscriptionCost }) => [subscriptionCost, subscriptionCost])).values()]
                                                                                                        .map((subcrition, index) =>
                                                                                                        (
                                                                                                          subcrition != "" ?
                                                                                                            <option value={subcrition}>{subcrition}</option> : ""))
                                                                                                    }
                                                                                                  </select> :
                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                            inputVal5[index] == "taxCategory" ?
                                                                                              labelsFilter != null ?
                                                                                                labelsFilter.length != 0 ?
                                                                                                  [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()].length == 1 && [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()][0] == "" ?
                                                                                                    <p>No Value Exist</p> :
                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                      : " "}
                                                                                                      id={inputVal5[index]}
                                                                                                      name={index}
                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                    >

                                                                                                      <option value='selected' >
                                                                                                        - - select - -
                                                                                                      </option>
                                                                                                      {
                                                                                                        [...new Map(labelsFilter.map(({ taxCategory }) => [taxCategory, taxCategory])).values()]
                                                                                                          .map((Tax, index) =>
                                                                                                          (
                                                                                                            Tax != "" ?
                                                                                                              <option value={Tax}>{Tax}</option> : ""))
                                                                                                      }
                                                                                                    </select> :
                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                              inputVal5[index] == "unitPricingMeasure" ?
                                                                                                editedFilter != null ?
                                                                                                  editedFilter.length != 0 ?
                                                                                                    [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()][0] == "" ?
                                                                                                      <p>No Value Exist</p> :
                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                        : " "}
                                                                                                        id={inputVal5[index]}
                                                                                                        name={index}
                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                      >

                                                                                                        <option value='selected' >
                                                                                                          - - select - -
                                                                                                        </option>
                                                                                                        {
                                                                                                          [...new Map(editedFilter.map(({ unitPricingMeasure }) => [unitPricingMeasure, unitPricingMeasure])).values()]
                                                                                                            .map((unit, index) =>
                                                                                                            (
                                                                                                              unit != "" ?
                                                                                                                <option value={unit}>{unit}</option> : ""))
                                                                                                        }
                                                                                                      </select> :
                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                inputVal5[index] == "unitPricingBaseMeasure" ?
                                                                                                  editedFilter != null ?
                                                                                                    editedFilter.length != 0 ?
                                                                                                      [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()].length == 1 && [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()][0] == "" ?
                                                                                                        <p>No Value Exist</p> :
                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                          : " "}
                                                                                                          id={inputVal5[index]}
                                                                                                          name={index}
                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                        >

                                                                                                          <option value='selected' >
                                                                                                            - - select - -
                                                                                                          </option>
                                                                                                          {
                                                                                                            [...new Map(editedFilter.map(({ unitPricingBaseMeasure }) => [unitPricingBaseMeasure, unitPricingBaseMeasure])).values()]
                                                                                                              .map((unitpricing, index) =>
                                                                                                              (
                                                                                                                unitpricing != "" ?
                                                                                                                  <option value={unitpricing}>{unitpricing}</option> : ""))
                                                                                                          }
                                                                                                        </select> :
                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                  inputVal5[index] == "availability" ?
                                                                                                    editedFilter != null ?
                                                                                                      editedFilter.length != 0 ?
                                                                                                        [...new Map(editedFilter
                                                                                                          .map(({ availability }) => [availability, availability])).values()].length == 1 && [...new Map(editedFilter
                                                                                                            .map(({ availability }) => [availability, availability])).values()][0] == "" ?
                                                                                                          <p>No Value Exist</p> :
                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                            : " "}
                                                                                                            id={inputVal5[index]}
                                                                                                            name={index}
                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                          >

                                                                                                            <option value='selected' >
                                                                                                              - - select - -
                                                                                                            </option>
                                                                                                            {
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ availability }) => [availability, availability])).values()]
                                                                                                                .map((avability, index) =>
                                                                                                                (
                                                                                                                  avability != "" ?
                                                                                                                    <option value={avability}>{avability}</option> : ""))
                                                                                                            }
                                                                                                          </select> :
                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                    inputVal5[index] == "energyEfficiencyClass" ?
                                                                                                      editedFilter != null ?
                                                                                                        editedFilter.length != 0 ?
                                                                                                          [...new Map(editedFilter
                                                                                                            .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                              .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()][0] == "" ?
                                                                                                            <p>No Value Exist</p> :
                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                              : " "}
                                                                                                              id={inputVal5[index]}
                                                                                                              name={index}
                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                            >

                                                                                                              <option value='selected' >
                                                                                                                - - select - -
                                                                                                              </option>
                                                                                                              {
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ energyEfficiencyClass }) => [energyEfficiencyClass, energyEfficiencyClass])).values()]
                                                                                                                  .map((EfficiencyClass, index) =>
                                                                                                                  (
                                                                                                                    EfficiencyClass != "" ?
                                                                                                                      <option value={EfficiencyClass}>{EfficiencyClass}</option> : ""))
                                                                                                              }
                                                                                                            </select> :
                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                      inputVal5[index] == "isBundle" ?
                                                                                                        editedFilter != null ?
                                                                                                          editedFilter.length != 0 ?
                                                                                                            [...new Map(editedFilter
                                                                                                              .map(({ isBundle }) => [isBundle, isBundle])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                .map(({ isBundle }) => [isBundle, isBundle])).values()][0] == "" ?
                                                                                                              <p>No Value Exist</p> :
                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                : " "}
                                                                                                                id={inputVal5[index]}
                                                                                                                name={index}
                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                              >

                                                                                                                <option value='selected' >
                                                                                                                  - - select - -
                                                                                                                </option>
                                                                                                                {
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ isBundle }) => [isBundle, isBundle])).values()]
                                                                                                                    .map((bundle, index) =>
                                                                                                                    (
                                                                                                                      bundle != "" ?
                                                                                                                        <option value={bundle}>{bundle}</option> : ""))
                                                                                                                }
                                                                                                              </select> :
                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                        inputVal5[index] == "loyaltyPoints" ?
                                                                                                          editedFilter != null ?
                                                                                                            editedFilter.length != 0 ?
                                                                                                              [...new Map(editedFilter
                                                                                                                .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                  .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()][0] == "" ?
                                                                                                                <p>No Value Exist</p> :
                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                  : " "}
                                                                                                                  id={inputVal5[index]}
                                                                                                                  name={index}
                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                >

                                                                                                                  <option value='selected' >
                                                                                                                    - - select - -
                                                                                                                  </option>
                                                                                                                  {
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ loyaltyPoints }) => [loyaltyPoints, loyaltyPoints])).values()]
                                                                                                                      .map((loyalti, index) =>
                                                                                                                      (
                                                                                                                        loyalti != "" ?
                                                                                                                          <option value={loyalti}>{loyalti}</option> : ""))
                                                                                                                  }
                                                                                                                </select> :
                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                          inputVal5[index] == "maxEnergyEfficiencyClass" ?
                                                                                                            editedFilter != null ?
                                                                                                              editedFilter.length != 0 ?
                                                                                                                [...new Map(editedFilter
                                                                                                                  .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                    .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                  <p>No Value Exist</p> :
                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                    : " "}
                                                                                                                    id={inputVal5[index]}
                                                                                                                    name={index}
                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                  >

                                                                                                                    <option value='selected' >
                                                                                                                      - - select - -
                                                                                                                    </option>
                                                                                                                    {
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ maxEnergyEfficiencyClass }) => [maxEnergyEfficiencyClass, maxEnergyEfficiencyClass])).values()]
                                                                                                                        .map((maxEnergyClass, index) =>
                                                                                                                        (
                                                                                                                          maxEnergyClass != "" ?
                                                                                                                            <option value={maxEnergyClass}>{maxEnergyClass}</option> : ""))
                                                                                                                    }
                                                                                                                  </select> :
                                                                                                                <p>No Value Exist</p> : "...Loading" :
                                                                                                            inputVal5[index] == "minEnergyEfficiencyClass" ?
                                                                                                              editedFilter != null ?
                                                                                                                editedFilter.length != 0 ?
                                                                                                                  [...new Map(editedFilter
                                                                                                                    .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                      .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()][0] == "" ?
                                                                                                                    <p>No Value Exist</p> :
                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                      : " "}
                                                                                                                      id={inputVal5[index]}
                                                                                                                      name={index}
                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                    >

                                                                                                                      <option value='selected' >
                                                                                                                        - - select - -
                                                                                                                      </option>
                                                                                                                      {
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ minEnergyEfficiencyClass }) => [minEnergyEfficiencyClass, minEnergyEfficiencyClass])).values()]
                                                                                                                          .map((energyEfficiency, index) =>
                                                                                                                          (
                                                                                                                            energyEfficiency != "" ?
                                                                                                                              <option value={energyEfficiency}>{energyEfficiency}</option> : ""))
                                                                                                                      }
                                                                                                                    </select> :
                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                              inputVal5[index] == "maxHandlingTime" ?
                                                                                                                editedFilter != null ?
                                                                                                                  editedFilter.length != 0 ?
                                                                                                                    [...new Map(editedFilter
                                                                                                                      .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                        .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()][0] == "" ?
                                                                                                                      <p>No Value Exist</p> :
                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                        : " "}
                                                                                                                        id={inputVal5[index]}
                                                                                                                        name={index}
                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                      >

                                                                                                                        <option value='selected' >
                                                                                                                          - - select - -
                                                                                                                        </option>
                                                                                                                        {
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ maxHandlingTime }) => [maxHandlingTime, maxHandlingTime])).values()]
                                                                                                                            .map((MhandlingTime, index) =>
                                                                                                                            (
                                                                                                                              MhandlingTime != "" ?
                                                                                                                                <option value={MhandlingTime}>{MhandlingTime}</option> : ""))
                                                                                                                        }
                                                                                                                      </select> :
                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                inputVal5[index] == "minHandlingTime" ?
                                                                                                                  editedFilter != null ?
                                                                                                                    editedFilter.length != 0 ?
                                                                                                                      [...new Map(editedFilter
                                                                                                                        .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                          .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()][0] == "" ?
                                                                                                                        <p>No Value Exist</p> :
                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                          : " "}
                                                                                                                          id={inputVal5[index]}
                                                                                                                          name={index}
                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                        >

                                                                                                                          <option value='selected' >
                                                                                                                            - - select - -
                                                                                                                          </option>
                                                                                                                          {
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ minHandlingTime }) => [minHandlingTime, minHandlingTime])).values()]
                                                                                                                              .map((handlingTime, index) =>
                                                                                                                              (
                                                                                                                                handlingTime != "" ?
                                                                                                                                  <option value={handlingTime}>{handlingTime}</option> : ""))
                                                                                                                          }
                                                                                                                        </select> :
                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                  inputVal5[index] == "multipack" ?
                                                                                                                    editedFilter != null ?
                                                                                                                      editedFilter.length != 0 ?
                                                                                                                        [...new Map(editedFilter
                                                                                                                          .map(({ multipack }) => [multipack, multipack])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                            .map(({ multipack }) => [multipack, multipack])).values()][0] == "" ?
                                                                                                                          <p>No Value Exist</p> :
                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                            : " "}
                                                                                                                            id={inputVal5[index]}
                                                                                                                            name={index}
                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                          >

                                                                                                                            <option value='selected' >
                                                                                                                              - - select - -
                                                                                                                            </option>
                                                                                                                            {
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ multipack }) => [multipack, multipack])).values()]
                                                                                                                                .map((multi, index) =>
                                                                                                                                (
                                                                                                                                  multi != "" ?
                                                                                                                                    <option value={multi}>{multi}</option> : ""))
                                                                                                                            }
                                                                                                                          </select> :
                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                    inputVal5[index] == "shippingHeight" ?
                                                                                                                      editedFilter != null ?
                                                                                                                        editedFilter.length != 0 ?
                                                                                                                          [...new Map(editedFilter
                                                                                                                            .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                              .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()][0] == "" ?
                                                                                                                            <p>No Value Exist</p> :
                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                              : " "}
                                                                                                                              id={inputVal5[index]}
                                                                                                                              name={index}
                                                                                                                              class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                            >

                                                                                                                              <option value='selected' >
                                                                                                                                - - select - -
                                                                                                                              </option>
                                                                                                                              {
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingHeight }) => [shippingHeight, shippingHeight])).values()]
                                                                                                                                  .map((height, index) =>
                                                                                                                                  (
                                                                                                                                    height != "" ?
                                                                                                                                      <option value={height}>{height}</option> : ""))
                                                                                                                              }
                                                                                                                            </select> :
                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                      inputVal5[index] == "shippingLength" ?
                                                                                                                        editedFilter != null ?
                                                                                                                          editedFilter.length != 0 ?
                                                                                                                            [...new Map(editedFilter
                                                                                                                              .map(({ shippingLength }) => [shippingLength, shippingLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                .map(({ shippingLength }) => [shippingLength, shippingLength])).values()][0] == "" ?
                                                                                                                              <p>No Value Exist</p> :
                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                : " "}
                                                                                                                                id={inputVal5[index]}
                                                                                                                                name={index}
                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                              >

                                                                                                                                <option value='selected' >
                                                                                                                                  - - select - -
                                                                                                                                </option>
                                                                                                                                {
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ shippingLength }) => [shippingLength, shippingLength])).values()]
                                                                                                                                    .map((length, index) =>
                                                                                                                                    (
                                                                                                                                      length != "" ?
                                                                                                                                        <option value={length}>{length}</option> : ""))
                                                                                                                                }
                                                                                                                              </select> :
                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                        inputVal5[index] == "shippingWeight" ?
                                                                                                                          editedFilter != null ?
                                                                                                                            editedFilter.length != 0 ?
                                                                                                                              [...new Map(editedFilter
                                                                                                                                .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()][0] == "" ?
                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                  : " "}
                                                                                                                                  id={inputVal5[index]}
                                                                                                                                  name={index}
                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                >

                                                                                                                                  <option value='selected' >
                                                                                                                                    - - select - -
                                                                                                                                  </option>
                                                                                                                                  {
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ shippingWeight }) => [shippingWeight, shippingWeight])).values()]
                                                                                                                                      .map((Weight, index) =>
                                                                                                                                      (
                                                                                                                                        Weight != "" ?
                                                                                                                                          <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                  }
                                                                                                                                </select> :
                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                          inputVal5[index] == "shippingWidth" ?
                                                                                                                            editedFilter != null ?
                                                                                                                              editedFilter.length != 0 ?
                                                                                                                                [...new Map(editedFilter
                                                                                                                                  .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                    .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()][0] == "" ?
                                                                                                                                  <p>No Value Exist</p> :
                                                                                                                                  <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                    && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                    productFilterFromDb[index]['value'] : " "
                                                                                                                                    : " "}
                                                                                                                                    id={inputVal5[index]}
                                                                                                                                    name={index}
                                                                                                                                    class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                  >

                                                                                                                                    <option value='selected' >
                                                                                                                                      - - select - -
                                                                                                                                    </option>
                                                                                                                                    {
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ shippingWidth }) => [shippingWidth, shippingWidth])).values()]
                                                                                                                                        .map((Width, index) =>
                                                                                                                                        (
                                                                                                                                          Width != "" ?
                                                                                                                                            <option value={Width}>{Width}</option> : ""))
                                                                                                                                    }
                                                                                                                                  </select> :
                                                                                                                                <p>No Value Exist</p> : "...Loading" :

                                                                                                                            inputVal5[index] == "productHeight" ?
                                                                                                                              editedFilter != null ?
                                                                                                                                editedFilter.length != 0 ?
                                                                                                                                  [...new Map(editedFilter
                                                                                                                                    .map(({ productHeight }) => [productHeight, productHeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                      .map(({ productHeight }) => [productHeight, productHeight])).values()][0] == "" ?
                                                                                                                                    <p>No Value Exist</p> :
                                                                                                                                    <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                      && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                      productFilterFromDb[index]['value'] : " "
                                                                                                                                      : " "}
                                                                                                                                      id={inputVal5[index]}
                                                                                                                                      name={index}
                                                                                                                                      class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                    >

                                                                                                                                      <option value='selected' >
                                                                                                                                        - - select - -
                                                                                                                                      </option>
                                                                                                                                      {
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productHeight }) => [productHeight, productHeight])).values()]
                                                                                                                                          .map((Height, index) =>
                                                                                                                                          (
                                                                                                                                            Height != "" ?
                                                                                                                                              <option value={Height}>{Height}</option> : ""))

                                                                                                                                      }
                                                                                                                                    </select> :
                                                                                                                                  <p>No Value Exist</p> : "...Loading" :
                                                                                                                              inputVal5[index] == "productLength" ?
                                                                                                                                editedFilter != null ?
                                                                                                                                  editedFilter.length != 0 ?
                                                                                                                                    [...new Map(editedFilter
                                                                                                                                      .map(({ productLength }) => [productLength, productLength])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                        .map(({ productLength }) => [productLength, productLength])).values()][0] == "" ?
                                                                                                                                      <p>No Value Exist</p> :
                                                                                                                                      <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                        && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                        productFilterFromDb[index]['value'] : " "
                                                                                                                                        : " "}
                                                                                                                                        id={inputVal5[index]}
                                                                                                                                        name={index}
                                                                                                                                        class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                      >

                                                                                                                                        <option value='selected' >
                                                                                                                                          - - select - -
                                                                                                                                        </option>
                                                                                                                                        {
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ productLength }) => [productLength, productLength])).values()]
                                                                                                                                            .map((Length, index) =>
                                                                                                                                            (
                                                                                                                                              Length != "" ?
                                                                                                                                                <option value={Length}>{Length}</option> : ""))
                                                                                                                                        }
                                                                                                                                      </select> :

                                                                                                                                    <p>No Value Exist</p> : "...Loading" :
                                                                                                                                inputVal5[index] == "productWeight" ?
                                                                                                                                  editedFilter != null ?
                                                                                                                                    editedFilter.length != 0 ?
                                                                                                                                      [...new Map(editedFilter
                                                                                                                                        .map(({ productWeight }) => [productWeight, productWeight])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                          .map(({ productWeight }) => [productWeight, productWeight])).values()][0] == "" ?
                                                                                                                                        <p>No Value Exist</p> :
                                                                                                                                        <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                          && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                          productFilterFromDb[index]['value'] : " "
                                                                                                                                          : " "}
                                                                                                                                          id={inputVal5[index]}
                                                                                                                                          name={index}
                                                                                                                                          class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                        >

                                                                                                                                          <option value='selected' >
                                                                                                                                            - - select - -
                                                                                                                                          </option>
                                                                                                                                          {
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ productWeight }) => [productWeight, productWeight])).values()]
                                                                                                                                              .map((Weight, index) =>
                                                                                                                                              (
                                                                                                                                                Weight != "" ?
                                                                                                                                                  <option value={Weight}>{Weight}</option> : ""))
                                                                                                                                          }
                                                                                                                                        </select> :
                                                                                                                                      <p>No Value Exist</p> : "...Loading" :
                                                                                                                                  inputVal5[index] == "productWidth" ?
                                                                                                                                    editedFilter != null ?
                                                                                                                                      editedFilter.length != 0 ?
                                                                                                                                        [...new Map(editedFilter
                                                                                                                                          .map(({ productWidth }) => [productWidth, productWidth])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                            .map(({ productWidth }) => [productWidth, productWidth])).values()][0] == "" ?
                                                                                                                                          <p>No Value Exist</p> :
                                                                                                                                          <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                            && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                            productFilterFromDb[index]['value'] : " "
                                                                                                                                            : " "}
                                                                                                                                            id={inputVal5[index]}
                                                                                                                                            name={index}
                                                                                                                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                          >

                                                                                                                                            <option value='selected' >
                                                                                                                                              - - select - -
                                                                                                                                            </option>
                                                                                                                                            {
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ productWidth }) => [productWidth, productWidth])).values()]
                                                                                                                                                .map((Width, index) =>
                                                                                                                                                (
                                                                                                                                                  Width != "" ?
                                                                                                                                                    <option value={Width}>{Width}</option> : ""))
                                                                                                                                            }
                                                                                                                                          </select> :
                                                                                                                                        <p>No Value Exist</p> : "...Loading" :
                                                                                                                                    inputVal5[index] == "pause" ?
                                                                                                                                      editedFilter != null ?
                                                                                                                                        editedFilter.length != 0 ?
                                                                                                                                          [...new Map(editedFilter
                                                                                                                                            .map(({ pause }) => [pause, pause])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                              .map(({ pause }) => [pause, pause])).values()][0] == "" ?
                                                                                                                                            <p>No Value Exist</p> :
                                                                                                                                            <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                              && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                              productFilterFromDb[index]['value'] : " "
                                                                                                                                              : " "}
                                                                                                                                              id={inputVal5[index]}
                                                                                                                                              name={index}
                                                                                                                                              class="border-2 border-[#008060] text
                                      -gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                            >

                                                                                                                                              <option value='selected' >
                                                                                                                                                - - select - -
                                                                                                                                              </option>
                                                                                                                                              {
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ pause }) => [pause, pause])).values()]
                                                                                                                                                  .map((pau, index) =>
                                                                                                                                                  (
                                                                                                                                                    pau != "" ?
                                                                                                                                                      <option value={pau}>{pau}</option> : ""))
                                                                                                                                              }
                                                                                                                                            </select> :
                                                                                                                                          <p>No Value Exist</p> : "...Loading" :
                                                                                                                                      inputVal5[index] == "installment" ?
                                                                                                                                        editedFilter != null ?
                                                                                                                                          editedFilter.length != 0 ?
                                                                                                                                            [...new Map(editedFilter
                                                                                                                                              .map(({ installment }) => [installment, installment])).values()].length == 1 && [...new Map(editedFilter
                                                                                                                                                .map(({ installment }) => [installment, installment])).values()][0] == "" ?
                                                                                                                                              <p>No Value Exist</p> :
                                                                                                                                              <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                productFilterFromDb[index]['value'] : " "
                                                                                                                                                : " "}
                                                                                                                                                id={inputVal5[index]}
                                                                                                                                                name={index}
                                                                                                                                                class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                              >

                                                                                                                                                <option value='selected' >
                                                                                                                                                  - - select - -
                                                                                                                                                </option>
                                                                                                                                                {
                                                                                                                                                  [...new Map(editedFilter
                                                                                                                                                    .map(({ installment }) => [installment, installment])).values()]
                                                                                                                                                    .map((ins, index) =>
                                                                                                                                                    (
                                                                                                                                                      ins != "" ?
                                                                                                                                                        <option value={ins}>{ins}</option> : ""))
                                                                                                                                                }
                                                                                                                                              </select> :

                                                                                                                                            <p>No Value Exist</p> : "...Loading" :
                                                                                                                                        inputVal5[index] == "transitTimeLabel" ?
                                                                                                                                          editedFilter != null ?
                                                                                                                                            editedFilter.length != 0 ?
                                                                                                                                              [...new Map(editedFilter
                                                                                                                                                .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()].length == 1 &&
                                                                                                                                                [...new Map(editedFilter
                                                                                                                                                  .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()][0] ==
                                                                                                                                                "" ?
                                                                                                                                                <p>No Value Exist</p> :
                                                                                                                                                <select onChange={handleChangeInput} value={productFilterFromDb != ''
                                                                                                                                                  && productFilterFromDb[index] ? productFilterFromDb[index]['value'] ?
                                                                                                                                                  productFilterFromDb[index]['value'] : " "
                                                                                                                                                  : " "}
                                                                                                                                                  id={inputVal5[index]}
                                                                                                                                                  name={index}
                                                                                                                                                  class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                                                                                                                                >

                                                                                                                                                  <option value='selected' >
                                                                                                                                                    - - select - -
                                                                                                                                                  </option>
                                                                                                                                                  {
                                                                                                                                                    [...new Map(editedFilter
                                                                                                                                                      .map(({ transitTimeLabel }) => [transitTimeLabel, transitTimeLabel])).values()]
                                                                                                                                                      .map((Transmit, index) =>
                                                                                                                                                      (
                                                                                                                                                        Transmit != "" ?
                                                                                                                                                          <option value={Transmit}>{Transmit}</option> : ""))
                                                                                                                                                  }
                                                                                                                                                </select> :
                                                                                                                                              <p>No Value Exist</p> : "...Loading" :
                                                                                                                                          " "}
                                      </div>
                                      <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize', }}
                                        onClick={() => deleteFilters(index)}
                                      ><RemoveCircleIcon style={{ color: '#d72c0d', marginRight: '5px' }} /></Button>
                                    </div>
                                  </>
                                ))}
                                <div className='flex justify-start items-center mt-2 mb-2 pl-4 pr-4'>
                                  <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize' }} onClick={() => { addNewFilters() }}><AddCircleIcon style={{ color: '#008060', marginRight: '5px' }} /> Add Filters </Button>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleApplyFilter()} disabled={!inputVal5 || !message} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => { handleClose2(); }} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                              {/* All Filter Model End*/}
                            </Menu>
                            <button onClick={handleClickColumn} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ViewWeekIcon style={{ color: '#5c5f62' }} />
                                Columns
                              </span>
                            </button>
                            <>
                              <Popover
                                id={id}
                                open={open}
                                anchorEl={anchorEl}
                                onClose={handleCloseColumn}
                                anchorOrigin={{
                                  vertical: 'bottom',
                                  horizontal: 'left',
                                }}
                              >
                                <div className='flex flex-col p-4'>

                                  <FormControlLabel name="id" onChange={handleDefaultColumnsChange} checked={checkedColumns.id} control={<Checkbox style={{ color: '#008060' }} />} label="Id" />

                                  <FormControlLabel name="score" onChange={handleDefaultColumnsChange} checked={checkedColumns.score} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Score" />

                                  <FormControlLabel name="googleStatus" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleStatus} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Status" />

                                  <FormControlLabel name="errorsFromMerchantCenter" onChange={handleDefaultColumnsChange} checked={checkedColumns.errorsFromMerchantCenter} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Error Form Merchant Center" />

                                  <FormControlLabel name="googleProductCategory" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleProductCategory} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Product Category" />

                                  <FormControlLabel name="ageGroup" onChange={handleDefaultColumnsChange} checked={checkedColumns.ageGroup} control={<Checkbox style={{ color: '#008060' }} />} label="Age" />

                                  <FormControlLabel name="gender" onChange={handleDefaultColumnsChange} checked={checkedColumns.gender} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Gender" />

                                  <FormControlLabel name="productCondition" onChange={handleDefaultColumnsChange} checked={checkedColumns.productCondition} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Condition" />

                                  <FormControlLabel name="brand" onChange={handleDefaultColumnsChange} checked={checkedColumns.brand} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Brand" />

                                  <FormControlLabel name="productType" onChange={handleDefaultColumnsChange} checked={checkedColumns.productType} control={<Checkbox style={{ color: '#008060' }} />} label="Product Type" />

                                  <FormControlLabel name="promotionId" onChange={handleDefaultColumnsChange} checked={checkedColumns.promotionId} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Promotion Id" />

                                  <FormControlLabel name="customLabel0" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel0} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 0" />

                                  <FormControlLabel name="customLabel1" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel1} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 1" />

                                  <FormControlLabel name="customLabel2" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel2} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 2" />

                                  <FormControlLabel name="customLabel3" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel3} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 3" />

                                  <FormControlLabel name="customLabel4" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel4} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 4" />

                                </div>
                              </Popover>
                            </>
                            <button aria-controls={open3 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open3 ? 'true' : undefined} onClick={handleClick3} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ScoreboardIcon style={{ color: '#5c5f62' }} />
                                Sort By Score
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl3}
                              open={open3}
                              onClose={handleClose3}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              <>
                                <div className='pr-4 pl-4 pt-2 pb-2'>
                                  <p className='mb-2'>Sort Your Product By Score</p>
                                  <Divider />
                                </div>
                                <div className='pr-4 pl-4 pb-2'>
                                  <div sx={{ width: 300, display: 'flex', justifyContent: 'center', margin: 'auto' }}>
                                    <Slider style={{ color: '#008060' }}
                                      getAriaLabel={() => 'Minimum distance'}
                                      value={value1}
                                      onChange={handleChange1}
                                      valueLabelDisplay="auto"
                                      getAriaValueText={valuetext}
                                      disableSwap
                                      step={7}
                                      marks
                                      min={0}
                                      max={100}
                                    />
                                  </div>
                                  <div className='flex justify-between items-center'>
                                    <div className='w-32'>
                                      <label for="exampleNumber0" class="form-label inline-block mb-2 text-gray-700" >Minimum Score</label > <input onChange={handleInputChange} onBlur={handleBlur} value={value1[0]} type="number" class=" form-control block w-full px-1 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber0" placeholder="Number input" />
                                    </div>
                                    <div className='w-32'>
                                      <label for="exampleNumber1" class="form-label inline-block mb-2 text-gray-700" >Maximum Score</label > <input onChange={handleInputChange1} onBlur={handleBlur1} value={value1[1]} type="number" class=" form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber1" placeholder="Number input" />
                                    </div>
                                  </div>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleClose3()} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => handleClose3()} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                            </Menu>
                            <button onClick={handleAddProductDrawer} className="relative sm:mt-2 z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black border border-gray-300 rounded-md sm:py-2">
                                <AddIcon style={{ color: '#5c5f62' }} />
                                Add New Products
                              </span>
                            </button>
                            <>
                              {showAddProductDrawer ? (
                                <div className=''>
                                  <div
                                    className="fixed inset-0 w-full h-full bg-black opacity-40"
                                    onClick={handleAddNewProductsDrawerCancel}
                                  ></div>
                                  <div style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                                    className={`top-0 right-0  rounded-tl-lg rounded-bl-lg w-[95%] sm:w-[85%] md:w-[90%] lg:w-[70%] xl:w-[50%] 2xl:w-[60%] bg-white transition-all  p-4 text-black fixed h-full z-40  ease-in-out duration-900 ${showAddProductDrawer ? "translate-x-0 " : "translate-x-full"
                                      }`}
                                  >
                                    <div sx={{ width: '100%', typography: 'body1' }}>
                                      <TabContext value={addProductTabsValue}>
                                        <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                                          <TabList onChange={handleAddProductTabs} aria-label="lab API tabs example">
                                            <Tab label="All Product" value="all" />
                                            <Tab label="Product From Collection" value="collection" />
                                          </TabList>
                                        </div>
                                        <TabPanel value="all">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input
                                                    type="search"
                                                    class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                                    placeholder="Search"
                                                    aria-label="Search"
                                                    aria-describedby="button-addon3"
                                                    onChange={handleAddNewProductsSearch}
                                                  />
                                                  <button onClick={handleAddNewDrawerProductSearch} class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerProducts && <div class="overflow-scroll" style={{ height: '470px' }}><ul class="divide-y divide-gray-100">
                                              <Checkbox style={{ color: '#008060' }} onChange={handleDrawerProductsSelectionAll}
                                                checked={Object.keys(selectedDrawerProducts).length == drawerProductsData.products.length} /> Select All ({Object.values(selectedDrawerProducts).reduce((acc, curr) => acc + curr.length, 0)})
                                              {drawerProductsData && drawerProductsData.products.length > 0 ? drawerProductsData.products.map((value, index) => (
                                                <li class="pb-3 sm:pb-4 ">
                                                  <div class="flex items-center space-x-4 hover:bg-gray-100 p-2">
                                                    <Checkbox name={value.id} onChange={handleDrawerProductsSelection}
                                                      checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].length == value.variants.length}
                                                      style={{ color: '#008060' }} />
                                                    <div class="flex-shrink-0">
                                                      <img class="w-10 h-10 rounded-full" src={value.image && value.image.src ? value.image.src : ''} alt="Neil image" />
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                  {value.variants.length > 0 ? value.variants.map((element) => (
                                                    <>
                                                      <Divider />
                                                      <div className="ml-5 pt-2 relative hover:bg-gray-100">
                                                        <Checkbox
                                                          style={{ color: '#008060' }}
                                                          checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].indexOf(element.id) != -1}
                                                          onChange={handleDrawerProductVariantSelection}
                                                          name={element.id}
                                                          id={value.id}
                                                        />
                                                        <label className="text-sm">{element.title}</label>
                                                      </div>
                                                    </>
                                                  )) : null
                                                  }
                                                </li>
                                              )) : <li>No Product Found</li>}
                                              {loadingMoreStoreProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "1 rem", marginLeft: "40%" }} size={30} />}
                                              {(drawerProductsData && drawerProductsData.next) && <li class="pb-3 sm:pb-4 "><Button disabled={loadingMoreStoreProducts} onClick={() => { getMoreStoreProducts() }} className='bg-[#008060]' variant="contained">Load More</Button></li>}
                                            </ul></div>}
                                          </>
                                        </TabPanel>
                                        <TabPanel value="collection">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input type="search" class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" placeholder="Search" aria-label="Search" aria-describedby="button-addon3" />
                                                  <button class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            <div className='h-[50vh] w-full overflow-y-scroll'>
                                              {loadingDrawerCollections && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                              {!loadingDrawerCollections && <ul class="divide-y divide-gray-100">
                                                {storeCollections.length > 0 ? storeCollections.map((value) => (
                                                  <li class="pb-3 sm:pb-4 pt-3 hover:bg-gray-100 h-fit">
                                                    <div class="flex items-center space-x-4">
                                                      <Checkbox
                                                        style={{ color: '#008060' }}
                                                        name={value.id}
                                                        checked={selectedDrawerCollections.indexOf(value.id) != -1}
                                                        onChange={handleDrawerCollectionSelection}
                                                      />
                                                      <div class="flex-1 min-w-0">
                                                        <p class="text-md text-black truncate">
                                                          {value.title}
                                                        </p>
                                                      </div>
                                                    </div>
                                                  </li>
                                                )) : <li>No Collection Found</li>}
                                                {/* <li class="pb-3 sm:pb-4 hover:bg-gray-100">
                                                <div class="flex items-center space-x-4 mt-3">
                                                  <Checkbox style={{ color: '#008060' }} />
                                                  <div class="flex-shrink-0">
                                                    <img class="w-12 h-12 rounded-full" src='https://cdn.shopify.com/s/files/1/0265/5043/5911/products/v--1774937877__-684744191_400x.jpg' alt="Neil image" />
                                                  </div>
                                                  <div class="flex-1 min-w-0">
                                                    <p class="text-md text-black truncate">
                                                      Test Collection
                                                    </p>
                                                  </div>
                                                </div>
                                              </li> */}
                                              </ul>}
                                            </div>
                                          </>
                                        </TabPanel>
                                      </TabContext>
                                      <div className='absolute bottom-1 w-[96%] bg-white z-99'>
                                        <Divider />
                                        <div className='flex justify-between mt-2'>
                                          <Button variant='contained' onClick={handleAddNewProducts}
                                            className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} >Apply</Button>
                                          <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                        </div>
                                      </div>
                                    </div>
                                    <div className='absolute bottom-1 w-[96%]'>
                                      <Divider />
                                      <div className='flex justify-between mt-2'>
                                        <Button onClick={handleAddNewProducts} className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} variant="contained">Apply</Button>
                                        <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                            </>
                          </div>
                        </div>
                      </div>
                      {selectedResources.length > 0 ? (
                        <>
                          <div class="rounded-md ml-2 flex items-center" role="group">
                            <button type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-gray-50 text-black">
                              {selectedResources != "all" ? selectedResources.length : totalPendingResults} Selected
                            </button>
                            <button onClick={handleBulkEditClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border hover:bg-gray-50 text-black">
                              <EditIcon style={{ fontSize: '20px', marginRight: '5px', color: '#3285fa ' }} />
                              Bulk Edit
                            </button>
                            <button onClick={() => setShowSyncFromShopifyModel(!showSyncFromShopifyModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#7cb342" d="M37.216,11.78c-0.023-0.211-0.211-0.305-0.351-0.305s-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	c-0.234-0.234-0.68-0.164-0.867-0.117c-0.023,0-0.469,0.141-1.195,0.375c-0.726-2.086-1.968-3.984-4.194-3.984h-0.211	C24.187,4.375,23.391,4,22.735,4c-5.155,0-7.639,6.444-8.412,9.725c-2.015,0.633-3.445,1.054-3.609,1.125	c-1.125,0.351-1.148,0.375-1.289,1.429c-0.117,0.797-3.046,23.456-3.046,23.456L29.179,44l12.373-2.671	C41.575,41.282,37.24,11.991,37.216,11.78z M27.937,9.483c-0.562,0.164-1.242,0.375-1.921,0.609V9.671	c0-1.265-0.164-2.296-0.469-3.117C26.718,6.695,27.445,7.984,27.937,9.483L27.937,9.483z M24.117,6.812	c0.305,0.797,0.516,1.922,0.516,3.468v0.234c-1.265,0.398-2.601,0.797-3.984,1.242C21.422,8.804,22.899,7.351,24.117,6.812	L24.117,6.812z M22.617,5.359c0.234,0,0.469,0.094,0.656,0.234c-1.664,0.773-3.421,2.718-4.148,6.655	c-1.101,0.351-2.156,0.656-3.163,0.984C16.806,10.233,18.915,5.359,22.617,5.359z"></path><path fill="#558b2f" d="M36.865,11.428c-0.141,0-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	C31.17,8.757,31.053,8.71,30.96,8.71L29.249,44l12.373-2.671c0,0-4.335-29.338-4.359-29.549	C37.169,11.569,37.005,11.475,36.865,11.428z"></path><path fill="#fff" d="M24.792,18.593l-1.475,4.449c0,0-1.337-0.715-2.927-0.715c-2.374,0-2.489,1.498-2.489,1.867	c0,2.028,5.301,2.812,5.301,7.583c0,3.757-2.374,6.177-5.578,6.177c-3.872,0-5.808-2.397-5.808-2.397l1.037-3.411	c0,0,2.028,1.752,3.734,1.752c1.129,0,1.59-0.876,1.59-1.521c0-2.651-4.333-2.766-4.333-7.145c0-3.665,2.628-7.214,7.952-7.214	C23.777,17.994,24.792,18.593,24.792,18.593z"></path></svg>
                              Sync From Shopify
                            </button>
                            <button onClick={() => setShowGoogleSyncModel(!showGoogleSyncModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                              Sync From Google
                            </button>
                            {/* <button onClick={() => setShowIncludeModel(!showIncludeModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CheckCircleIcon style={{ fontSize: '20px', marginRight: '5px', color: '#4CAF50' }} />
                              Include
                            </button> */}
                            <button onClick={handleExcludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CancelIcon style={{ fontSize: '20px', marginRight: '5px', color: '#FF3D00' }} />
                              Exclude
                            </button>
                            <button onClick={() => setShowBulkDeleteModel(!showBulkDeleteModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-gray-50 text-black">
                              <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#d72c0d' }} />
                              Delete
                            </button>
                            {totalPendingResults > pendingResultsPerPageLimit && !filterApplied && (selectedResources == "all" ? <Button onClick={clearAllSelections} style={{ marginLeft: '10px' }}>Undo</Button> : <Button onClick={handleSelectAllProducts} style={{ marginLeft: '10px' }}>Select all {totalPendingResults} products</Button>)}
                          </div>
                        </>
                      ) : null}
                      <div className="w-full inline-block align-middle overflow-x-scroll">
                        <div className="rounded-lg overflow-x w-fit">
                          <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                            <thead className="overflow-x-scroll">
                              <tr>
                                <th scope="col" className="px-4 py-3 text-xs font-bold text-start text-gray-500 capitalize ">
                                  <Checkbox
                                    type="checkbox"
                                    className="form-check-input"
                                    name="allSelect"
                                    checked={selectedResources.length > 0 ? true : false}
                                    onChange={handleProductSelectAll}
                                    style={{ color: '#008060' }}
                                  />

                                </th>
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Name
                                </th>
                                {checkedColumns.id && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Id
                                </th>}
                                {checkedColumns.score && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Score
                                </th>}
                                {checkedColumns.googleStatus && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Status
                                </th>}
                                {checkedColumns.errorsFromMerchantCenter && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Error From Merchant Center
                                </th>}
                                {checkedColumns.googleProductCategory && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Product Category
                                </th>}
                                {checkedColumns.ageGroup && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Age
                                </th>}
                                {checkedColumns.gender && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Gender
                                </th>}
                                {checkedColumns.productCondition && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Condition
                                </th>}
                                {checkedColumns.brand && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Brand
                                </th>}
                                {checkedColumns.productType && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Type
                                </th>}
                                {checkedColumns.promotionId && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Promotion Id
                                </th>}
                                {checkedColumns.customLabel0 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 0
                                </th>}
                                {checkedColumns.customLabel1 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 1
                                </th>}
                                {checkedColumns.customLabel2 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 2
                                </th>}
                                {checkedColumns.customLabel3 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 3
                                </th>}
                                {checkedColumns.customLabel4 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 4
                                </th>}
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Actions
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                              {allPendingProductRows}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      {/* Pagination */}
                      <>
                        {!filterApplied && <div className='flex justify-center items-center'>
                          <div>
                            <TablePagination
                              component="div"
                              page={pendingCurrentPage}
                              count={totalPendingResults}
                              onPageChange={handlePendCurrentPageChange}
                              rowsPerPage={pendingResultsPerPageLimit}
                              rowsPerPageOptions={resultsPerPageOptions}
                              onRowsPerPageChange={handlePendResultsPerPageChange}
                            />
                          </div>
                        </div>}
                      </>
                    </div>
                  </div>)}
                </TabPanel>
                <TabPanel value="excluded">
                  {loadingExclProducts ? (
                    <>
                      <div className="flex flex-col mt-2">
                        <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                          <div className="py-3 w-full pl-2 flex justify-between">
                            <div className="w-[35%] relative">
                              <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                            </div>
                            <div className="w-[60%] flex items-center relative">
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                              <div className="mr-2 w-[16%]">
                                <Skeleton variant="rounded" style={{ width: '100%', height: '7vh' }} />
                              </div>
                            </div>
                          </div>
                          <div className="w-full inline-block align-middle overflow-x-scroll">
                            <div className="rounded-lg overflow-x w-fit">
                              <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                                <thead className="overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '4vh' }} />
                                    </div>
                                  </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                  <tr className='w-full w-screen mb-2'>
                                    <div className="mb-2">
                                      <Skeleton variant="rounded" style={{ width: '100vw', height: '12vh' }} />
                                    </div>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (<div className="flex flex-col mt-2">
                    <div className="bg-white rounded-lg p-4" style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                      <div className="py-3 pl-2 lg:flex xl:flex 2xl:flex justify-between">
                        <div className="relative w-full lg:w-[25%] xl:w-[40%] 2xl:w-[50%]">
                          <label htmlFor="hs-table-search" className="sr-only">
                            Search
                          </label>
                          <input
                            type="text"
                            onChange={handleFiltersQueryChange}
                            name="hs-table-search"
                            id="hs-table-search"
                            className="block w-full p-2 mt-[10px] pl-10 text-sm border border-[#babfc3] rounded-md focus:border-blue-500 focus:ring-blue-500 "
                            placeholder="Search..."
                          />
                          {tags.map((tag, index) => (
                            <span id="badge-dismiss-dark" class="mt-2 inline-flex items-center py-1 px-2 mr-2 text-sm font-medium text-gray-800 bg-gray-100 rounded ">
                              {tag}
                              <button onClick={() => deleteTag(index)} type="button" class="inline-flex items-center p-0.5 ml-2 text-sm text-gray-400 bg-transparent rounded-sm hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-300 dark:hover:text-gray-900" data-dismiss-target="#badge-dismiss-dark" aria-label="Remove">
                                <svg aria-hidden="true" class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                <span class="sr-only">Remove badge</span>
                              </button>
                            </span>
                          ))}
                        </div>
                        <div style={{ alignItems: 'baseline' }} className="flex flex-wrap mt-2 lg:m-0 xl:m-0 2xl:m-0 items-center space-x-2 align-baseline">
                          <div className="relative">
                            <button onClick={handleExportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <PublishIcon style={{ color: '#5c5f62' }} />
                                Export
                              </span>
                            </button>
                            <button onClick={handleImportClick} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <GetAppIcon style={{ color: '#5c5f62' }} />
                                Import
                              </span>
                            </button>
                            <button aria-controls={open2 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open2 ? 'true' : undefined} onClick={handleClick2} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <TuneIcon style={{ color: '#5c5f62' }} />
                                Filters
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl2}
                              open={open2}
                              onClose={handleClose2}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              <>
                                <div className='pt-2 pb-2 pr-4 pl-4'>
                                  <p>Search By Filters</p>
                                  <Divider />
                                </div>
                                {persons2}
                                <div className='flex justify-start items-center mt-2 mb-2 pl-4 pr-4'>
                                  <Button style={{ display: 'flex', alignItems: 'center', textTransform: 'capitalize' }} onClick={handleAddPerson2}><AddCircleIcon style={{ color: '#008060', marginRight: '5px' }} /> Add Filters </Button>
                                </div>

                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleClick()} disabled={!inputVal5 || !message} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => { handleClose2(); }} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                            </Menu>
                            <button onClick={handleClickColumn} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ViewWeekIcon style={{ color: '#5c5f62' }} />
                                Columns
                              </span>
                            </button>
                            <>
                              <Popover
                                id={id}
                                open={open}
                                anchorEl={anchorEl}
                                onClose={handleCloseColumn}
                                anchorOrigin={{
                                  vertical: 'bottom',
                                  horizontal: 'left',
                                }}
                              >
                                <div className='flex flex-col p-4'>

                                  <FormControlLabel name="id" onChange={handleDefaultColumnsChange} checked={checkedColumns.id} control={<Checkbox style={{ color: '#008060' }} />} label="Id" />

                                  <FormControlLabel name="score" onChange={handleDefaultColumnsChange} checked={checkedColumns.score} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Score" />

                                  <FormControlLabel name="googleStatus" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleStatus} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Status" />

                                  <FormControlLabel name="errorsFromMerchantCenter" onChange={handleDefaultColumnsChange} checked={checkedColumns.errorsFromMerchantCenter} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Error Form Merchant Center" />

                                  <FormControlLabel name="googleProductCategory" onChange={handleDefaultColumnsChange} checked={checkedColumns.googleProductCategory} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Google Product Category" />

                                  <FormControlLabel name="ageGroup" onChange={handleDefaultColumnsChange} checked={checkedColumns.ageGroup} control={<Checkbox style={{ color: '#008060' }} />} label="Age" />

                                  <FormControlLabel name="gender" onChange={handleDefaultColumnsChange} checked={checkedColumns.gender} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Gender" />

                                  <FormControlLabel name="productCondition" onChange={handleDefaultColumnsChange} checked={checkedColumns.productCondition} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Condition" />

                                  <FormControlLabel name="brand" onChange={handleDefaultColumnsChange} checked={checkedColumns.brand} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Brand" />

                                  <FormControlLabel name="productType" onChange={handleDefaultColumnsChange} checked={checkedColumns.productType} control={<Checkbox style={{ color: '#008060' }} />} label="Product Type" />

                                  <FormControlLabel name="promotionId" onChange={handleDefaultColumnsChange} checked={checkedColumns.promotionId} control={<Checkbox style={{ color: '#008060' }} defaultChecked />} label="Promotion Id" />

                                  <FormControlLabel name="customLabel0" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel0} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 0" />

                                  <FormControlLabel name="customLabel1" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel1} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 1" />

                                  <FormControlLabel name="customLabel2" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel2} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 2" />

                                  <FormControlLabel name="customLabel3" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel3} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 3" />

                                  <FormControlLabel name="customLabel4" onChange={handleDefaultColumnsChange} checked={checkedColumns.customLabel4} control={<Checkbox style={{ color: '#008060' }} />} label="Custom Label 4" />

                                </div>
                              </Popover>
                            </>
                            <button aria-controls={open3 ? 'basic-menu' : undefined} aria-haspopup="true" aria-expanded={open3 ? 'true' : undefined} onClick={handleClick3} className="relative z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black mr-2 border border-gray-300 rounded-md sm:py-2">
                                <ScoreboardIcon style={{ color: '#5c5f62' }} />
                                Sort By Score
                              </span>
                            </button>
                            <Menu style={{ marginTop: '5px' }}
                              id="basic-menu"
                              anchorEl={anchorEl3}
                              open={open3}
                              onClose={handleClose3}
                              MenuListProps={{
                                'aria-labelledby': 'basic-button',
                              }}
                            >
                              <>
                                <div className='pr-4 pl-4 pt-2 pb-2'>
                                  <p className='mb-2'>Sort Your Product By Score</p>
                                  <Divider />
                                </div>
                                <div className='pr-4 pl-4 pb-2'>
                                  <div sx={{ width: 300, display: 'flex', justifyContent: 'center', margin: 'auto' }}>
                                    <Slider style={{ color: '#008060' }}
                                      getAriaLabel={() => 'Minimum distance'}
                                      value={value1}
                                      onChange={handleChange1}
                                      valueLabelDisplay="auto"
                                      getAriaValueText={valuetext}
                                      disableSwap
                                      step={7}
                                      marks
                                      min={0}
                                      max={100}
                                    />
                                  </div>
                                  <div className='flex justify-between items-center'>
                                    <div className='w-32'>
                                      <label for="exampleNumber0" class="form-label inline-block mb-2 text-gray-700" >Minimum Score</label > <input onChange={handleInputChange} onBlur={handleBlur} value={value1[0]} type="number" class=" form-control block w-full px-1 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber0" placeholder="Number input" />
                                    </div>
                                    <div className='w-32'>
                                      <label for="exampleNumber1" class="form-label inline-block mb-2 text-gray-700" >Maximum Score</label > <input onChange={handleInputChange1} onBlur={handleBlur1} value={value1[1]} type="number" class=" form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none " id="exampleNumber1" placeholder="Number input" />
                                    </div>
                                  </div>
                                </div>
                                <div className='pb-2 pr-4 pl-4 w-full'>
                                  <Divider />
                                  <div className='flex justify-between mt-2'>
                                    <Button onClick={(e) => handleClose3()} className='bg-[#008060]' variant="contained">Apply</Button>
                                    <Button onClick={(e) => handleClose3()} variant="outlined">Cancel</Button>
                                  </div>
                                </div>
                              </>
                            </Menu>
                            <button onClick={handleAddProductDrawer} className="relative sm:mt-2 z-0 inline-flex text-sm rounded-md shadow-sm hover:bg-gray-50 focus:outline-none">
                              <span className="relative inline-flex items-center px-3 py-3 space-x-2 text-sm font-medium text-black border border-gray-300 rounded-md sm:py-2">
                                <AddIcon style={{ color: '#5c5f62' }} />
                                Add New Products
                              </span>
                            </button>
                            <>
                              {showAddProductDrawer ? (
                                <div className=''>
                                  <div
                                    className="fixed inset-0 w-full h-full bg-black opacity-40"
                                    onClick={handleAddNewProductsDrawerCancel}
                                  ></div>
                                  <div style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                                    className={`top-0 right-0  rounded-tl-lg rounded-bl-lg w-[95%] sm:w-[85%] md:w-[90%] lg:w-[70%] xl:w-[50%] 2xl:w-[60%] bg-white transition-all  p-4 text-black fixed h-full z-40  ease-in-out duration-900 ${showAddProductDrawer ? "translate-x-0 " : "translate-x-full"
                                      }`}
                                  >
                                    <div sx={{ width: '100%', typography: 'body1' }}>
                                      <TabContext value={addProductTabsValue}>
                                        <div sx={{ borderBottom: 1, borderColor: 'divider' }}>
                                          <TabList onChange={handleAddProductTabs} aria-label="lab API tabs example">
                                            <Tab label="All Product" value="all" />
                                            <Tab label="Product From Collection" value="collection" />
                                          </TabList>
                                        </div>
                                        <TabPanel value="all">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input
                                                    type="search"
                                                    class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                                                    placeholder="Search"
                                                    aria-label="Search"
                                                    aria-describedby="button-addon3"
                                                    onChange={handleAddNewProductsSearch}
                                                  />
                                                  <button onClick={handleAddNewDrawerProductSearch} class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerProducts && <div class="overflow-scroll" style={{ height: '470px' }}><ul class="divide-y divide-gray-100">
                                              <Checkbox style={{ color: '#008060' }} onChange={handleDrawerProductsSelectionAll}
                                                checked={Object.keys(selectedDrawerProducts).length == drawerProductsData.products.length} /> Select All ({Object.values(selectedDrawerProducts).reduce((acc, curr) => acc + curr.length, 0)})
                                              {drawerProductsData && drawerProductsData.products.length > 0 ? drawerProductsData.products.map((value, index) => (
                                                <li class="pb-3 sm:pb-4 ">
                                                  <div class="flex items-center space-x-4 hover:bg-gray-100 p-2">
                                                    <Checkbox name={value.id} onChange={handleDrawerProductsSelection}
                                                      checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].length == value.variants.length}
                                                      style={{ color: '#008060' }} />
                                                    <div class="flex-shrink-0">
                                                      <img class="w-10 h-10 rounded-full" src={value.image && value.image.src ? value.image.src : ''} alt="Neil image" />
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                  {value.variants.length > 0 ? value.variants.map((element) => (
                                                    <>
                                                      <Divider />
                                                      <div className="ml-5 pt-2 relative hover:bg-gray-100">
                                                        <Checkbox
                                                          style={{ color: '#008060' }}
                                                          checked={value.id in selectedDrawerProducts && selectedDrawerProducts[value.id].indexOf(element.id) != -1}
                                                          onChange={handleDrawerProductVariantSelection}
                                                          name={element.id}
                                                          id={value.id}
                                                        />
                                                        <label className="text-sm">{element.title}</label>
                                                      </div>
                                                    </>
                                                  )) : null
                                                  }
                                                </li>
                                              )) : <li>No Product Found</li>}
                                              {loadingMoreStoreProducts && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "1 rem", marginLeft: "40%" }} size={30} />}
                                              {(drawerProductsData && drawerProductsData.next) && <li class="pb-3 sm:pb-4 "><Button disabled={loadingMoreStoreProducts} onClick={() => { getMoreStoreProducts() }} className='bg-[#008060]' variant="contained">Load More</Button></li>}
                                            </ul></div>}
                                          </>
                                        </TabPanel>
                                        <TabPanel value="collection">
                                          <>
                                            <div class="flex justify-center mt-2">
                                              <div class="mb-3 w-[100vw]">
                                                <div class="input-group relative flex items-stretch w-full mb-4">
                                                  <input type="search" class="form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" placeholder="Search" aria-label="Search" aria-describedby="button-addon3" />
                                                  <button class="btn ml-2 inline-block px-6 py-2 border border-gray-300 font-medium text-xs leading-tight capitalize rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out" type="button" id="button-addon3">Search</button>
                                                </div>
                                              </div>
                                            </div>
                                            {loadingDrawerCollections && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                            {!loadingDrawerCollections && <ul class="divide-y divide-gray-100">
                                              {storeCollections.length > 0 ? storeCollections.map((value) => (
                                                <li class="pb-3 sm:pb-4 pt-3 hover:bg-gray-100">
                                                  <div class="flex items-center space-x-4">
                                                    <Checkbox
                                                      style={{ color: '#008060' }}
                                                      name={value.id}
                                                      checked={selectedDrawerCollections.indexOf(value.id) != -1}
                                                      onChange={handleDrawerCollectionSelection}
                                                    />
                                                    <div class="flex-1 min-w-0">
                                                      <p class="text-md text-black truncate">
                                                        {value.title}
                                                      </p>
                                                    </div>
                                                  </div>
                                                </li>
                                              )) : <li>No Collection Found</li>}
                                            </ul>}
                                          </>
                                        </TabPanel>
                                      </TabContext>
                                    </div>
                                    <div className='absolute bottom-1 w-[96%]'>
                                      <Divider />
                                      <div className='flex justify-between mt-2'>
                                        <Button onClick={handleAddNewProducts} className='bg-[#008060]' disabled={Object.values(selectedDrawerProducts).length <= 0 && selectedDrawerCollections.length <= 0} variant="contained">Apply</Button>
                                        <Button onClick={handleAddNewProductsDrawerCancel} variant="outlined">Cancel</Button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                            </>
                          </div>
                        </div>
                      </div>
                      {selectedResources.length > 0 ? (
                        <>
                          <div class="rounded-md ml-2 flex items-center" role="group">
                            <button type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-l-lg border hover:bg-gray-50 text-black">
                              {selectedResources != "all" ? selectedResources.length : totalExcludedResults} Selected
                            </button>
                            {/* <button onClick={handleBulkEditClick} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border hover:bg-gray-50 text-black">
                              <EditIcon style={{ fontSize: '20px', marginRight: '5px', color: '#3285fa ' }} />
                              Bulk Edit
                            </button> */}
                            {/* <button onClick={() => setShowSyncFromShopifyModel(!showSyncFromShopifyModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#7cb342" d="M37.216,11.78c-0.023-0.211-0.211-0.305-0.351-0.305s-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	c-0.234-0.234-0.68-0.164-0.867-0.117c-0.023,0-0.469,0.141-1.195,0.375c-0.726-2.086-1.968-3.984-4.194-3.984h-0.211	C24.187,4.375,23.391,4,22.735,4c-5.155,0-7.639,6.444-8.412,9.725c-2.015,0.633-3.445,1.054-3.609,1.125	c-1.125,0.351-1.148,0.375-1.289,1.429c-0.117,0.797-3.046,23.456-3.046,23.456L29.179,44l12.373-2.671	C41.575,41.282,37.24,11.991,37.216,11.78z M27.937,9.483c-0.562,0.164-1.242,0.375-1.921,0.609V9.671	c0-1.265-0.164-2.296-0.469-3.117C26.718,6.695,27.445,7.984,27.937,9.483L27.937,9.483z M24.117,6.812	c0.305,0.797,0.516,1.922,0.516,3.468v0.234c-1.265,0.398-2.601,0.797-3.984,1.242C21.422,8.804,22.899,7.351,24.117,6.812	L24.117,6.812z M22.617,5.359c0.234,0,0.469,0.094,0.656,0.234c-1.664,0.773-3.421,2.718-4.148,6.655	c-1.101,0.351-2.156,0.656-3.163,0.984C16.806,10.233,18.915,5.359,22.617,5.359z"></path><path fill="#558b2f" d="M36.865,11.428c-0.141,0-3.21-0.234-3.21-0.234s-2.132-2.132-2.39-2.343	C31.17,8.757,31.053,8.71,30.96,8.71L29.249,44l12.373-2.671c0,0-4.335-29.338-4.359-29.549	C37.169,11.569,37.005,11.475,36.865,11.428z"></path><path fill="#fff" d="M24.792,18.593l-1.475,4.449c0,0-1.337-0.715-2.927-0.715c-2.374,0-2.489,1.498-2.489,1.867	c0,2.028,5.301,2.812,5.301,7.583c0,3.757-2.374,6.177-5.578,6.177c-3.872,0-5.808-2.397-5.808-2.397l1.037-3.411	c0,0,2.028,1.752,3.734,1.752c1.129,0,1.59-0.876,1.59-1.521c0-2.651-4.333-2.766-4.333-7.145c0-3.665,2.628-7.214,7.952-7.214	C23.777,17.994,24.792,18.593,24.792,18.593z"></path></svg>
                              Sync From Shopify
                            </button> */}
                            {/* <button onClick={() => setShowGoogleSyncModel(!showGoogleSyncModel)} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <svg className="mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                              Sync From Google
                            </button> */}
                            <button onClick={handleIncludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CheckCircleIcon style={{ fontSize: '20px', marginRight: '5px', color: '#4CAF50' }} />
                              Include
                            </button>
                            {/* <button onClick={handleExcludeClick} type="button" class="inline-flex items-center py-2 px-2 border-l text-sm font-medium bg-transparent border-t border-b hover:bg-gray-50 text-black">
                              <CancelIcon style={{ fontSize: '20px', marginRight: '5px', color: '#FF3D00' }} />
                              Exclude
                            </button> */}
                            <button onClick={() => setShowBulkDeleteModel(!showBulkDeleteModel)} type="button" class="inline-flex items-center py-2 px-2 text-sm font-medium bg-transparent rounded-r-md border hover:bg-gray-50 text-black">
                              <DeleteIcon style={{ fontSize: '20px', marginRight: '5px', color: '#d72c0d' }} />
                              Delete
                            </button>
                            {totalExcludedResults > excludedResultsPerPageLimit && (selectedResources == "all" ? <Button onClick={clearAllSelections} style={{ marginLeft: '10px' }}>Undo</Button> : <Button onClick={handleSelectAllProducts} style={{ marginLeft: '10px' }}>Select all {totalExcludedResults} products</Button>)}
                          </div>
                        </>
                      ) : null}
                      <div className="w-full inline-block align-middle overflow-x-scroll">
                        <div className="rounded-lg overflow-x w-fit">
                          <table className="divide-y divide-gray-200 table-auto overflow-scroll w-max">
                            <thead className="overflow-x-scroll">
                              <tr>
                                <th scope="col" className="px-4 py-3 text-xs font-bold text-start text-gray-500 capitalize ">
                                  <Checkbox
                                    type="checkbox"
                                    className="form-check-input"
                                    name="allSelect"
                                    checked={selectedResources.length > 0 ? true : false}
                                    onChange={handleProductSelectAll}
                                    style={{ color: '#008060' }}
                                  />

                                </th>
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Name
                                </th>
                                {checkedColumns.id && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Id
                                </th>}
                                {/* {checkedColumns.score && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Score
                                </th>} */}
                                {/* {checkedColumns.googleStatus && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Status
                                </th>} */}
                                {/* {checkedColumns.errorsFromMerchantCenter && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Error From Merchant Center
                                </th>}
                                {checkedColumns.googleProductCategory && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Google Product Category
                                </th>}
                                {checkedColumns.ageGroup && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Age
                                </th>}
                                {checkedColumns.gender && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Gender
                                </th>}
                                {checkedColumns.productCondition && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Condition
                                </th>}
                                {checkedColumns.brand && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Brand
                                </th>}
                                {checkedColumns.productType && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Product Type
                                </th>}
                                {checkedColumns.promotionId && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Promotion Id
                                </th>}
                                {checkedColumns.customLabel0 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 0
                                </th>}
                                {checkedColumns.customLabel1 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 1
                                </th>}
                                {checkedColumns.customLabel2 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 2
                                </th>}
                                {checkedColumns.customLabel3 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 3
                                </th>}
                                {checkedColumns.customLabel4 && <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Custom Label 4
                                </th>} */}
                                <th
                                  scope="col"
                                  className="px-6 py-3 text-xs font-bold text-start text-black capitalize "
                                >
                                  Actions
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 overflow-x-scroll">
                              {allExcludedProductRows}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      {/* Pagination */}
                      <>
                        <div className='flex justify-center items-center'>
                          <div>
                            <TablePagination
                              component="div"
                              page={excludedCurrentPage}
                              count={totalExcludedResults}
                              onPageChange={handleExclCurrentPageChange}
                              rowsPerPage={excludedResultsPerPageLimit}
                              rowsPerPageOptions={resultsPerPageOptions}
                              onRowsPerPageChange={handleExclResultsPerPageChange}
                            />
                          </div>
                        </div>
                      </>
                    </div>
                  </div>)}
                </TabPanel>
              </TabContext>
              {/* )} */}
            </>
          </>
        </div>

        {/* ------------Export Modal-------------- */}
        <>
          {showExportProductsModel ? (
            <>
              <div className="fixed inset-0 z-10 w-[100%]">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={() => { setShowExportProductsModel(false); setChecked(defalutValue); setStoreEmailNew(storeEmail); setStoreEmailError(false); setShowEmailInput(true); }}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full sm:w-full md:w-[90%] lg:w-[85%] xl:w-[80%] 2xl:w-[80%] p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Export Products</p>
                        <VideoModal margin='0 0 0 10px' title='Tutorial For Export Products' videoSrc='https://www.youtube.com/embed/HkNCX2qr6kc' />
                        <CloseIcon onClick={() => { setShowExportProductsModel(false); setChecked(defalutValue); setStoreEmailNew(storeEmail); setStoreEmailError(false); setShowEmailInput(true); }} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className="flex items-center">
                        <label htmlFor="storeEmail" className="text-sm">Your Products Would Be Sent To this Email:</label>
                        <input
                          type="text"
                          disabled={showEmailInput === true}
                          defaultValue={storeEmailNew}
                          id="storeEmail"
                          name="storeEmail"
                          onChange={handleEmailChange}
                          className={showEmailInput ? 'bg-gray-100 text-gray-400 cursor-not-allowed ml-2 input-focus-none px-4 py-2 w-1/2 focus:border-none focus:ring-none border border-[#babfc3] rounded-md' : 'ml-2  input-focus-none px-4 py-2 w-1/2 focus:border-none focus:ring-none border border-[#babfc3] rounded-md'}
                        />
                        <div className="ml-2 cursor-pointer">
                          <EditIcon style={{ color: "#1d79f2" }}
                            onClick={() => setShowEmailInput(!showEmailInput)} />
                        </div>

                      </div>
                      {storeEmailError && (
                        <span className="font-semibold text-sm text-red-500 flex justify-center mt-[5px] mr-[35px]">Please Enter Valid Email Address</span>
                      )}

                      <div style={{ marginTop: '10px' }}>
                        <span class="mt-4 text-green-600 font-bold ">
                          Your {
                            tabsValue == "approved" ? (selectedResources == "all" || selectedResources.length <= 0 ? totalAppResults : selectedResources.length) : tabsValue == "disapproved" ? (selectedResources == "all" || selectedResources.length <= 0 ? totalDisappResults : selectedResources.length) : tabsValue == "pending" ? (selectedResources == "all" || selectedResources.length <= 0 ? totalPendResults : selectedResources.length) : (selectedResources == "all" || selectedResources.length <= 0 ? totalAllResults : selectedResources.length)
                          } Prodcuts Will Be Exported
                        </span>
                      </div>

                      <div className='p-4'>
                        <RadioGroup
                          row
                          defaultValue="Customize Fields"
                          style={{ display: "flex", justifyContent: "space-between" }}
                        >
                          <FormControlLabel
                            value="Customize Fields"
                            checked={status === 2}
                            control={
                              <Radio
                                style={{ color: "#008060" }}
                                onClick={(e) => radioHandler(e)}
                                value="Custom Fields"

                              />
                            }
                            label="Customize Fields"
                          />
                          <FormControlLabel
                            value="All Fields"
                            checked={status === 1}
                            control={
                              <Radio
                                style={{ color: "#008060" }}
                                onClick={(e) => radioHandler(e)}
                                value='All Fields'
                              />
                            }
                            label="All Fields"
                          />
                        </RadioGroup>

                        {status === 1 && <></>}
                        {status === 2 &&
                          <>
                            <Divider />
                            <div className="flex h-[30vh] overflow-y-scroll">
                              <div>
                                {defalutValue.map((item, index) => (
                                  <div key={index}>
                                    <label htmlFor={`${item}`} className="flex items-center hover:cursor-pointer">
                                      <Checkbox checked style={{ color: 'gray' }} value={defalutValue} id={`${item}`} type="checkbox" />
                                      <span className="ml-2.5 text-sm">{item}</span>
                                    </label>
                                  </div>
                                ))}

                              </div>
                              <ul className="mapCheckbox">
                                {checkList.map((item, index) => (
                                  <li className="grid-item-device-type-1" key={index}>
                                    <label htmlFor={`${index}`} className="flex items-center hover:cursor-pointer">
                                      <Checkbox value={item} style={{ color: '#008060' }} id={`${index}`} type="checkbox" onChange={handleCheck} />
                                      <span className={isChecked(item)}>{item}</span>
                                    </label>
                                  </li>
                                ))}

                              </ul>
                            </div>
                          </>
                        }
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={() => { setShowExportProductsModel(false); setChecked(defalutValue); setStoreEmailNew(storeEmail); setStoreEmailError(false); setShowEmailInput(true); }} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={handleExports} className='bg-[#008060]' variant="contained">Export As CSV</Button>
                        {/* <Button onClick={exportZip} className='bg-[#008060]' variant="contained">Export As CSV</Button> */}
                        {/* <Button onClick={() => { setshowExportModal(false); setShowToast(true) }} className='bg-[#008060]' variant="contained">Export As CSV</Button> */}
                      </div>
                      {/* </div> */}
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------ExCluded Modal For Export Import-------------- */}
        <>
          {showExcludedProductsModel ? (
            <>
              <div className="fixed inset-0 z-10 w-[100%]">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={() => setShowExcludedProductsModel(false)}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full sm:w-full md:w-[90%] lg:w-[85%] xl:w-[80%] 2xl:w-[80%] p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <CloseIcon onClick={() => setShowExcludedProductsModel(false)} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div style={{ marginTop: '10px' }}>
                        <p className="flex justify-center">
                          <svg xmlns="http://www.w3.org/2000/svg" version="1.0" width="70" height="70" viewBox="0 0 512.000000 512.000000" preserveAspectRatio="xMidYMid meet">
                            <g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)" fill="red" stroke="none">
                              <path d="M2459 4797 c-42 -16 -85 -45 -115 -79 -12 -12 -435 -738 -939 -1613 -505 -874 -1023 -1772 -1151 -1994 -256 -443 -267 -469 -246 -568 22 -105 102 -195 197 -222 30 -9 636 -11 2375 -9 2299 3 2336 3 2375 23 126 63 193 216 148 345 -20 58 -2274 3970 -2322 4030 -15 19 -49 48 -75 64 -40 25 -59 30 -129 33 -52 2 -95 -2 -118 -10z m223 -1553 c88 -31 171 -115 204 -206 8 -24 15 -70 16 -103 0 -33 -39 -366 -87 -740 -96 -754 -95 -750 -170 -793 -85 -49 -200 -13 -238 75 -18 42 -190 1357 -189 1455 0 87 26 150 88 218 58 62 113 95 185 110 52 10 136 4 191 -16z m-45 -1979 c60 -18 135 -80 166 -139 28 -54 31 -184 4 -233 -54 -100 -140 -153 -247 -153 -107 0 -193 53 -247 153 -27 49 -25 179 4 232 32 61 95 115 155 136 65 23 100 23 165 4z" />
                              <path d="M2463 3075 c-48 -29 -83 -92 -83 -148 0 -42 170 -1380 176 -1386 2 -2 6 -2 8 0 6 6 176 1344 176 1386 0 136 -157 220 -277 148z" />
                              <path d="M2491 1089 c-106 -99 33 -257 141 -160 28 25 33 36 33 75 0 36 -6 51 -29 75 -25 26 -37 31 -76 31 -33 0 -53 -6 -69 -21z" />
                            </g>
                          </svg>
                        </p>
                        <p class="mt-4 font-bold text-center">
                          {showExcludedTextAlert}
                        </p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={() => setShowExcludedProductsModel(false)} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Import Modal-------------- */}
        <>
          {showImportProductsModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={() => setShowImportProductsModel(false)}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Import Products</p>
                        <VideoModal margin='0 0 0 10px' title='Tutorial For Import Products' videoSrc='https://www.youtube.com/embed/t2u6ATxg2wc' />
                        <CloseIcon onClick={handleCancelButton} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <p>Download a <a href="/sampleCsv" target="_blank" className="text-blue-500">sample CSV template</a> to see an example of the format required.</p>
                      <div className='p-4'>
                        {!bgLoader &&
                          <>
                            {showCsvAlert ? (
                              <div className="text-black flex items-center px-6 w-[100%] py-4 rounded relative mb-4 border border-[#e0b3b2] bg-[#fff4f4]">
                                <table>
                                  <thead>
                                    <tr>
                                      <th className="text-left">
                                        <span className="text-xl inline-block mr-2 align-middle">
                                          <GppMaybeIcon style={{ color: '#d72c0d' }} />
                                        </span>
                                        <span className="inline-block font-medium text-sm align-middle mr-8">
                                          {shortErrorMessage}
                                        </span>
                                      </th>
                                      <th>
                                        <button>
                                          <span onClick={() => setshowCsvAlert(false)} className='text-3xl font-medium hover:text-red-700 ml-8'>Ã</span>
                                        </button>
                                      </th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    {invalidFieldsName !== null &&
                                      invalidFieldsName.map((item, index) => (
                                        <span className="inline-block font-medium text-xs align-middle mr-4"><td><li key={index}>{item}</li></td></span>
                                      ))}
                                  </tbody>
                                </table>
                              </div>) : null}
                            <div class="flex items-center justify-center w-full">
                              <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer hover:bg-gray-50 d">
                                {showFile ? (
                                  <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                    <span class="bg-blue-100 mt-2 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">Add Files</span>
                                    <p class="text-xs text-gray-900 mt-2">Accepts .CSV</p>
                                  </div>
                                ) : null}
                                {fileOutput ? (
                                  <div className="flex items-center"><TextSnippetIcon style={{ color: '#5c5f62' }} />{file && `${file.name} - ${file.type}`}
                                    <p class="inline-flex items-center py-1.5 px-2 text-sm font-medium bg-transparent rounded-md border hover:bg-gray-100 text-black ml-4">Replace</p>
                                  </div>
                                ) : null}



                                <input id="dropzone-file" accept="text/csv" onChange={handleFileChange} type="file" class="hidden" />
                              </label>
                            </div>
                            <FormControlLabel control={<Checkbox value={!inputVal4} checked={inputVal4} onChange={e => setInputVal4(!inputVal4)} style={{ color: '#008060' }} />} label="Overwrite any current products that have the same product id. Existing values will be used for any missing columns" />
                          </>
                        }
                        {(!importNow && bgLoader) &&
                          <div className="flex justify-center m-auto"><CircularProgress style={{ color: '#008060' }} size={70} /></div>
                        }
                        {(importNow && bgLoader) &&
                          <div className="flex justify-center m-auto"><CheckCircleOutlineIcon style={{ color: '#008060', fontSize: '150px' }} /></div>
                        }
                      </div>

                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleCancelButton} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        {validateFile &&
                          <Button disabled={inputVal4 === false || buttonDisabled === true || file === null || csvJobDispached === true} onClick={handleUploadClick} className='bg-[#008060]' variant="contained">{loadingButton ? <CircularProgress color="inherit" size={20} /> : "Upload and continue"}</Button>
                        }
                        {!validateFile &&
                          <Button disabled={inputVal4 === false || buttonDisabled === true || file === null || Uuid == null} onClick={handleUploadFile} className='bg-[#008060]' variant="contained">{loadingButton ? <CircularProgress color="inherit" size={20} /> : "Import Products"}</Button>
                        }
                        {/* <LoadingButton
                            disabled={!inputVal4}
                            onClick={handleUploadClick}
                            loading={loadingButton}
                            loadingPosition="end"
                            variant="contained"
                            style={{ background: "#008060" ,color:"white"}}
                            >
                            <span>{buttonText}</span>
                        </LoadingButton> */}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>
        {/* ------------Edit Product Modal-------------- */}
        <>
          {showEditProductModal ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleBulkEditCancel}>
                </div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-4xl p-4 mx-auto bg-white rounded-lg"
                    style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                  >
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Do Edits In Bulk</p>
                        <VideoModal margin='0 0 0 10px' title='Tutorial For Bulk Editing' videoSrc='https://www.youtube.com/embed/yvzRlNab9A8' />
                        <CloseIcon onClick={handleBulkEditCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <>
                          <div>
                            {duplicateBulkOptions.map((value, index) => (<div className="flex items-baseline mb-2">
                              <select
                                onChange={handleBulkEditOptionsChange}
                                name={value}
                                value={selectedBulkEditOptions[value]}
                                id="countries"
                                class="w-[37%] mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                <option disabled selected value> - - select - - </option>
                                {bulkEditOptionsArray.map((value, index) => (
                                  <option value={value.value}>{value.label}</option>
                                ))}
                              </select>
                              <>
                                {selectedBulkEditOptions[value] === 'adsGrouping' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.adsGrouping ? editedBulkValues.adsGrouping : null}
                                      name="adsGrouping"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                    />
                                  </div>}
                                {selectedBulkEditOptions[value] === 'adsLabels' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.adsLabels ? editedBulkValues.adsLabels : null} name="adsLabels"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                    />
                                  </div>}
                                {selectedBulkEditOptions[value] === 'adult' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      value={editedBulkValues.adult ? editedBulkValues.adult : null}
                                      name="adult"
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='yes'> Yes </option>
                                      <option value='no'> No </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324508?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'ageGroup' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      value={editedBulkValues.ageGroup ? editedBulkValues.ageGroup : null} name="ageGroup"
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='adult'> Adult </option>
                                      <option value='newborn'> Newborn </option>
                                      <option value='kids'> Kids </option>
                                      <option value='infant'> Infant </option>
                                      <option value='toddler'> Toddler </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324463?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'condition' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      value={editedBulkValues.condition ? editedBulkValues.condition : null} name="condition"
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='used'> Used </option>
                                      <option value='new'> New </option>
                                      <option value='refurbished'> Refurbished </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324469?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'color' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.color ? editedBulkValues.color : null}
                                      name="color"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324487?hl=en'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'costOfGoodsSold' &&
                                  <div class="w-[60%]">
                                    <input
                                      type="number"
                                      value={editedBulkValues.costOfGoodsSold ? editedBulkValues.costOfGoodsSold.value : null}
                                      name="costOfGoodsSold"
                                      onChange={(e) => {
                                        setEditedBulkValues(values => ({ ...values, ['costOfGoodsSold']: { value: e.target.value, currency: feed.currency } }))
                                      }}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/9017895?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'customLabel0' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.customLabel0 ? editedBulkValues.customLabel0 : null} name="customLabel0"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324473?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'customLabel1' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.customLabel1 ? editedBulkValues.customLabel1 : null} name="customLabel1"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324473?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'customLabel2' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.customLabel2 ? editedBulkValues.customLabel2 : null} name="customLabel2"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324473?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'customLabel3' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.customLabel3 ? editedBulkValues.customLabel3 : null} name="customLabel3"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324473?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'customLabel4' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      value={editedBulkValues.customLabel4 ? editedBulkValues.customLabel4 : null} name="customLabel4"
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324473?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'gender' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      value={editedBulkValues.gender ? editedBulkValues.gender : null} name="gender"
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='male'> Male </option>
                                      <option value='female'> Female </option>
                                      <option value='unisex'> Unisex </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324479?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'product_category_id' &&
                                  <div class="w-[60%]">
                                    {/* <select
                                    id="countries"
                                    name="product_category_id"
                                    value={editedBulkValues && editedBulkValues.product_category_id ? productCategories[editedBulkValues.product_category_id] : null}
                                    onChange={handleBulkEditValueChange}
                                    class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                    <option disabled selected value> - - select - - </option>
                                    {productCategories.map((value, index) => (
                                      <option value={value.id}>{value.name}</option>
                                    ))}
                                  </select> */}
                                    <Autocomplete
                                      className="Product_Category_SelectDropdoen_1"
                                      disablePortal
                                      id="combo-box-demo"
                                      size="small"
                                      options={productCategories}
                                      value={
                                        editedBulkValues && editedBulkValues.product_category_id
                                          ? productCategories.find(
                                            (category) => category.id === editedBulkValues.product_category_id
                                          )
                                          : null
                                      }
                                      getOptionLabel={(option) => option.name}
                                      onChange={(event, value) => { value != null ? setEditedBulkValues(values => ({ ...values, ['product_category_id']: value.id })) : setEditedBulkValues(values => ({ ...values, ['product_category_id']: value })) }}
                                      renderInput={(params) => (
                                        <TextField {...params} label="Select Product Category" />
                                      )}
                                    />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324436?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'material' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="material"
                                      value={editedBulkValues.material ? editedBulkValues.material : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324410?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'pattern' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="pattern"
                                      value={editedBulkValues.pattern ? editedBulkValues.pattern : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324483?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'identifierExists' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="identifierExists"
                                      value={editedBulkValues.identifierExists ? editedBulkValues.identifierExists : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='yes'> Yes </option>
                                      <option value='no'> No </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324478?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'productTypes' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="productTypes"
                                      value={editedBulkValues.productTypes ? editedBulkValues.productTypes : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324406?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'promotionIds' &&
                                  <div class="w-[60%]">
                                    {promotionIdsArr.map((value, index) => (
                                      <div style={{ marginTop: '5px' }}>
                                        <input
                                          maxLength='50'
                                          type="text"
                                          name={index}
                                          value={editedBulkValues.promotionIds ? editedBulkValues.promotionIds[index] : null}
                                          onChange={handlePromotionIdsChange}
                                          class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        {/* {promotionIdsArr.length > 1 && <button
                                        onClick={() => {
                                          setPromotionIdsArr((current) => current.filter((val, ind) => val != value));
                                          delete editedBulkValues.promotionIds[index]
                                        }}>
                                        <RemoveCircleOutlineIcon style={{ color: '#d72c0d', marginLeft: '5px' }} />
                                      </button>} */}
                                      </div>
                                    ))}
                                    <div style={{ marginTop: '10px' }}>
                                      <Button disabled={promotionIdsArr.length >= 10} onClick={() => { setPromotionIdsArr(values => ([...values, (+values[values.length - 1] + 1)])) }}>Add More</Button>
                                      {promotionIdsArr.length > 1 && <button
                                        onClick={() => {
                                          setPromotionIdsArr((current) => current.filter((val, ind) => val != current[current.length - 1]));
                                          delete editedBulkValues.promotionIds[promotionIdsArr.length - 1]
                                        }}>
                                        <RemoveCircleOutlineIcon style={{ color: '#d72c0d', marginLeft: '5px' }} />
                                        Remove
                                      </button>}
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7050148?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'return_policy_label' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      name="return_policy_label"
                                      value={editedBulkValues.return_policy_label ? editedBulkValues.return_policy_label : null}
                                      onChange={handleBulkEditValueChange}
                                      type="text"
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shippingLabel' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="shippingLabel"
                                      value={editedBulkValues.shippingLabel ? editedBulkValues.shippingLabel : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324504?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'sizes' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="sizes"
                                      value={editedBulkValues.sizes ? editedBulkValues.sizes : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324492?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'sizeSystem' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="sizeSystem"
                                      value={editedBulkValues.sizeSystem ? editedBulkValues.sizeSystem : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='AU'> AU </option>
                                      <option value='BR'> BR </option>
                                      <option value='CN'> CN </option>
                                      <option value='DE'> DE </option>
                                      <option value='EU'> EU </option>
                                      <option value='FR'> FR </option>
                                      <option value='IT'> IT </option>
                                      <option value='JP'> JP </option>
                                      <option value='MEX'> MEX </option>
                                      <option value='UK'> UK </option>
                                      <option value='US'> US </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324502?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'sizeType' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="sizeType"
                                      value={editedBulkValues.sizeType ? editedBulkValues.sizeType : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='regular'> Regular </option>
                                      <option value='petite'> Petite </option>
                                      <option value='plus'> Plus </option>
                                      <option value='tall'> Tall </option>
                                      <option value='big'> Big </option>
                                      <option value='maternity'> Maternity </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324497?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'taxCategory' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='100'
                                      type="text"
                                      name="taxCategory"
                                      value={editedBulkValues.taxCategory ? editedBulkValues.taxCategory : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7569847?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'unitPricingMeasure' &&
                                  <div class="w-[60%]">
                                    <div className='flex items-center justify-between'>
                                      <input
                                        type="number"
                                        name="unitPricingMeasure"
                                        value={editedBulkValues.unitPricingMeasure && editedBulkValues.unitPricingMeasure.value ? editedBulkValues.unitPricingMeasure.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['unitPricingMeasure']: { ...values.unitPricingMeasure, 'value': e.target.value } }))
                                        }}
                                        class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="unitPricingMeasure"
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['unitPricingMeasure']: { ...values.unitPricingMeasure, 'unit': e.target.value } }))
                                        }}
                                        value={editedBulkValues.unitPricingMeasure && editedBulkValues.unitPricingMeasure.unit ? editedBulkValues.unitPricingMeasure.unit : null}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='oz'> oz </option>
                                        <option value='lb'> lb </option>
                                        <option value='mg'> mg </option>
                                        <option value='g'> g </option>
                                        <option value='kg'> kg </option>
                                        <option value='floz'> floz </option>
                                        <option value='pt'> pt </option>
                                        <option value='gal'> gal </option>
                                        <option value='ml'> ml </option>
                                        <option value='cl'> cl </option>
                                        <option value='l'> l </option>
                                        <option value='cbm'> cbm </option>
                                        <option value='in'> in </option>
                                        <option value='ft'> ft </option>
                                        <option value='yd'> yd </option>
                                        <option value='cm'> cm </option>
                                        <option value='m'> m </option>
                                        <option value='sqft'> sqft </option>
                                        <option value='sqm'> sqm </option>
                                        <option value='ct'> ct </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324455?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'unitPricingBaseMeasure' &&
                                  <div class="w-[60%]">
                                    <div className='flex items-center justify-between'>
                                      <input
                                        type="number"
                                        name="unitPricingBaseMeasure"
                                        value={editedBulkValues.unitPricingBaseMeasure && editedBulkValues.unitPricingBaseMeasure.value ? editedBulkValues.unitPricingBaseMeasure.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['unitPricingBaseMeasure']: { ...values.unitPricingBaseMeasure, 'value': e.target.value } }))
                                        }}
                                        class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="unitPricingBaseMeasure"
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['unitPricingBaseMeasure']: { ...values.unitPricingBaseMeasure, 'unit': e.target.value } }))
                                        }}
                                        value={editedBulkValues.unitPricingBaseMeasure && editedBulkValues.unitPricingBaseMeasure.unit ? editedBulkValues.unitPricingBaseMeasure.unit : null}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='oz'> oz </option>
                                        <option value='lb'> lb </option>
                                        <option value='mg'> mg </option>
                                        <option value='g'> g </option>
                                        <option value='kg'> kg </option>
                                        <option value='floz'> floz </option>
                                        <option value='pt'> pt </option>
                                        <option value='gal'> gal </option>
                                        <option value='ml'> ml </option>
                                        <option value='cl'> cl </option>
                                        <option value='l'> l </option>
                                        <option value='cbm'> cbm </option>
                                        <option value='in'> in </option>
                                        <option value='ft'> ft </option>
                                        <option value='yd'> yd </option>
                                        <option value='cm'> cm </option>
                                        <option value='m'> m </option>
                                        <option value='sqft'> sqft </option>
                                        <option value='sqm'> sqm </option>
                                        <option value='ct'> ct </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324490?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'brand' &&
                                  <div class="w-[60%]">
                                    <input
                                      maxLength='70'
                                      type="text"
                                      name="brand"
                                      value={editedBulkValues.brand ? editedBulkValues.brand : null}
                                      onChange={handleBulkEditValueChange}
                                      class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324351?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'availabilityDate' &&
                                  <div class="w-[60%]">
                                    <input
                                      className="w-full"
                                      name="availabilityDate"
                                      value={editedBulkValues.availabilityDate ? editedBulkValues.availabilityDate : null}
                                      onChange={handleBulkEditValueChange}
                                      type='date' />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324470?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'availability' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="availability"
                                      value={editedBulkValues.availability ? editedBulkValues.availability : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='in_stock'> In stock </option>
                                      <option value='out_of_stock'> Out of stock </option>
                                      <option value='preorder'> Preorder </option>
                                      <option value='backorder'> Backorder </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324448?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'energyEfficiencyClass' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="energyEfficiencyClass"
                                      value={editedBulkValues.energyEfficiencyClass ? editedBulkValues.energyEfficiencyClass : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='A+++'> A+++ </option>
                                      <option value='A++'> A++ </option>
                                      <option value='A+'> A+ </option>
                                      <option value='A'> A </option>
                                      <option value='B'> B </option>
                                      <option value='C'> C </option>
                                      <option value='D'> D </option>
                                      <option value='E'> E </option>
                                      <option value='F'> F </option>
                                      <option value='G'> G </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7562785?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'expirationDate' &&
                                  <div class="w-[60%]">
                                    <input
                                      className="w-full"
                                      name="expirationDate"
                                      value={editedBulkValues.expirationDate ? editedBulkValues.expirationDate : null}
                                      onChange={handleBulkEditValueChange}
                                      type='date' />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324351?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'installment' &&
                                  <div class="w-[60%]">
                                    <div className='flex items-center justify-between'>
                                      <input
                                        placeholder=' - - Months - - '
                                        type="number"
                                        name="installment"
                                        value={editedBulkValues.installment && editedBulkValues.installment.months ? editedBulkValues.installment.months : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['installment']: { ...values.installment, 'months': e.target.value } }))
                                        }}
                                        class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <input
                                        placeholder=' - - Amount - - '
                                        type="number"
                                        name="installment"
                                        value={editedBulkValues.installment && editedBulkValues.installment.amount ? editedBulkValues.installment.amount.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['installment']: { ...values.installment, 'amount': { value: e.target.value, currency: feed.currency } } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324474?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'isBundle' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="isBundle"
                                      value={editedBulkValues.isBundle ? editedBulkValues.isBundle : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='yes'> Yes </option>
                                      <option value='no'> No </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324449?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'loyaltyPoints' &&
                                  <div class="w-[60%]">
                                    <div className='flex items-center justify-between'>
                                      <input
                                        placeholder=' - - Name - - '
                                        type="text"
                                        name="loyaltyPoints"
                                        value={editedBulkValues.loyaltyPoints && editedBulkValues.loyaltyPoints.name ? editedBulkValues.loyaltyPoints.name : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['loyaltyPoints']: { ...values.loyaltyPoints, 'name': e.target.value } }))
                                        }}
                                        maxLength='24'
                                        class="mr-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <input
                                        placeholder=' - - Value - - '
                                        name="loyaltyPoints"
                                        value={editedBulkValues.loyaltyPoints && editedBulkValues.loyaltyPoints.pointsValue ? editedBulkValues.loyaltyPoints.pointsValue : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['loyaltyPoints']: { ...values.loyaltyPoints, 'pointsValue': e.target.value } }))
                                        }}
                                        type="number"
                                        class="input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <input
                                        placeholder=' - - Ratio - - '
                                        name="loyaltyPoints"
                                        value={editedBulkValues.loyaltyPoints && editedBulkValues.loyaltyPoints.ratio ? editedBulkValues.loyaltyPoints.ratio : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['loyaltyPoints']: { ...values.loyaltyPoints, 'ratio': e.target.value } }))
                                        }}
                                        type="number"
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324456?hl=en&ref_topic=6324338#zippy=%2Ctext-feed'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'maxEnergyEfficiencyClass' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="maxEnergyEfficiencyClass"
                                      value={editedBulkValues.maxEnergyEfficiencyClass ? editedBulkValues.maxEnergyEfficiencyClass : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='A+++'> A+++ </option>
                                      <option value='A++'> A++ </option>
                                      <option value='A+'> A+ </option>
                                      <option value='A'> A </option>
                                      <option value='B'> B </option>
                                      <option value='C'> C </option>
                                      <option value='D'> D </option>
                                      <option value='E'> E </option>
                                      <option value='F'> F </option>
                                      <option value='G'> G </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7562785?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'maxHandlingTime' &&
                                  <div class="w-[60%]">
                                    <input
                                      type="number"
                                      name="maxHandlingTime"
                                      value={editedBulkValues.maxHandlingTime ? editedBulkValues.maxHandlingTime : null}
                                      onChange={handleBulkEditValueChange}
                                      class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7388496?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'minEnergyEfficiencyClass' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="minEnergyEfficiencyClass"
                                      value={editedBulkValues.minEnergyEfficiencyClass ? editedBulkValues.minEnergyEfficiencyClass : null}
                                      onChange={handleBulkEditValueChange}
                                      class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='A+++'> A+++ </option>
                                      <option value='A++'> A++ </option>
                                      <option value='A+'> A+ </option>
                                      <option value='A'> A </option>
                                      <option value='B'> B </option>
                                      <option value='C'> C </option>
                                      <option value='D'> D </option>
                                      <option value='E'> E </option>
                                      <option value='F'> F </option>
                                      <option value='G'> G </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7562785?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'minHandlingTime' &&
                                  <div class="w-[60%]">
                                    <input
                                      type="number"
                                      name="minHandlingTime"
                                      value={editedBulkValues.minHandlingTime ? editedBulkValues.minHandlingTime : null}
                                      onChange={handleBulkEditValueChange}
                                      class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7388496?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'multipack' &&
                                  <div class="w-[60%]">
                                    <input
                                      type="number"
                                      name="multipack"
                                      value={editedBulkValues.multipack ? editedBulkValues.multipack : null}
                                      onChange={handleBulkEditValueChange}
                                      class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324488?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shippingHeight' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="shippingHeight"
                                        value={editedBulkValues.shippingHeight && editedBulkValues.shippingHeight.value ? editedBulkValues.shippingHeight.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingHeight']: { ...values.shippingHeight, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="shippingHeight"
                                        value={editedBulkValues.shippingHeight && editedBulkValues.shippingHeight.unit ? editedBulkValues.shippingHeight.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingHeight']: { ...values.shippingHeight, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324498?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shippingLength' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="shippingLength"
                                        value={editedBulkValues.shippingLength && editedBulkValues.shippingLength.value ? editedBulkValues.shippingLength.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingLength']: { ...values.shippingLength, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="shippingLength"
                                        value={editedBulkValues.shippingLength && editedBulkValues.shippingLength.unit ? editedBulkValues.shippingLength.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingLength']: { ...values.shippingLength, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324498?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shippingWeight' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="shippingWeight"
                                        value={editedBulkValues.shippingWeight && editedBulkValues.shippingWeight.value ? editedBulkValues.shippingWeight.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingWeight']: { ...values.shippingWeight, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="shippingWeight"
                                        value={editedBulkValues.shippingWeight && editedBulkValues.shippingWeight.unit ? editedBulkValues.shippingWeight.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingWeight']: { ...values.shippingWeight, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='lb'> lb </option>
                                        <option value='oz'> oz </option>
                                        <option value='kg'> kg </option>
                                        <option value='g'> g </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324498?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shippingWidth' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="shippingWidth"
                                        value={editedBulkValues.shippingWidth && editedBulkValues.shippingWidth.value ? editedBulkValues.shippingWidth.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingWidth']: { ...values.shippingWidth, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="shippingWidth"
                                        value={editedBulkValues.shippingWidth && editedBulkValues.shippingWidth.unit ? editedBulkValues.shippingWidth.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['shippingWidth']: { ...values.shippingWidth, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324498?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'productHeight' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="productHeight"
                                        value={editedBulkValues.productHeight && editedBulkValues.productHeight.value ? editedBulkValues.productHeight.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productHeight']: { ...values.productHeight, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="productHeight"
                                        value={editedBulkValues.productHeight && editedBulkValues.productHeight.unit ? editedBulkValues.productHeight.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productHeight']: { ...values.productHeight, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/11018531?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'productLength' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="productLength"
                                        value={editedBulkValues.productLength && editedBulkValues.productLength.value ? editedBulkValues.productLength.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productLength']: { ...values.productLength, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="productLength"
                                        value={editedBulkValues.productLength && editedBulkValues.productLength.unit ? editedBulkValues.productLength.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productLength']: { ...values.productLength, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/11018531?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'productWeight' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="productWeight"
                                        value={editedBulkValues.productWeight && editedBulkValues.productWeight.value ? editedBulkValues.productWeight.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productWeight']: { ...values.productWeight, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="productWeight"
                                        value={editedBulkValues.productWeight && editedBulkValues.productWeight.unit ? editedBulkValues.productWeight.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productWeight']: { ...values.productWeight, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='lb'> lb </option>
                                        <option value='oz'> oz </option>
                                        <option value='kg'> kg </option>
                                        <option value='g'> g </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/11018531?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'productWidth' &&
                                  <div class="w-[60%]">
                                    <div className="flex items-center justify-between">
                                      <input
                                        type="number"
                                        name="productWidth"
                                        value={editedBulkValues.productWidth && editedBulkValues.productWidth.value ? editedBulkValues.productWidth.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productWidth']: { ...values.productWidth, 'value': e.target.value } }))
                                        }}
                                        class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <select
                                        id="countries"
                                        name="productWidth"
                                        value={editedBulkValues.productWidth && editedBulkValues.productWidth.unit ? editedBulkValues.productWidth.unit : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['productWidth']: { ...values.productWidth, 'unit': e.target.value } }))
                                        }}
                                        class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - select - - </option>
                                        <option value='in'> inch </option>
                                        <option value='cm'> cm </option>
                                      </select>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/11018531?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'transitTimeLabel' &&
                                  <div class="w-[60%]">
                                    <input
                                      type="text"
                                      name="transitTimeLabel"
                                      value={editedBulkValues.transitTimeLabel ? editedBulkValues.transitTimeLabel : null}
                                      onChange={handleBulkEditValueChange}
                                      class="ml-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/9298965?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'pause' &&
                                  <div class="w-[60%]">
                                    <select
                                      id="countries"
                                      name="pause"
                                      value={editedBulkValues.pause ? editedBulkValues.pause : null}
                                      onChange={handleBulkEditValueChange}
                                      class="ml-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                      <option disabled selected value> - - select - - </option>
                                      <option value='ads'> ads </option>
                                      <option value='all'> all </option>
                                    </select>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/11909930?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'salePriceEffectiveDate' &&
                                  <div class="w-[60%]">
                                    <div className='mb-6 flex items-center justify-between'>
                                      <div className='mr-2'>
                                        <p>Start Date</p>
                                        <input
                                          name="salePriceEffectiveDate"
                                          value={editedBulkValues.salePriceEffectiveDate && editedBulkValues.salePriceEffectiveDate.start ? editedBulkValues.salePriceEffectiveDate.start : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['salePriceEffectiveDate']: { ...values.salePriceEffectiveDate, 'start': e.target.value } }))
                                          }}
                                          type='date' />
                                      </div>
                                      <div>
                                        <p>End Date</p>
                                        <input
                                          className='mr-2'
                                          name="salePriceEffectiveDate"
                                          value={editedBulkValues.salePriceEffectiveDate && editedBulkValues.salePriceEffectiveDate.end ? editedBulkValues.salePriceEffectiveDate.end : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['salePriceEffectiveDate']: { ...values.salePriceEffectiveDate, 'end': e.target.value } }))
                                          }}
                                          type='date' />
                                      </div>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324460?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'subscriptionCost' &&
                                  <div class="w-[60%]">
                                    <div className='flex items-center justify-between'>
                                      <select
                                        id="countries"
                                        name="subscriptionCost"
                                        value={editedBulkValues.subscriptionCost && editedBulkValues.subscriptionCost.period ? editedBulkValues.subscriptionCost.period : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['subscriptionCost']: { ...values.subscriptionCost, 'period': e.target.value } }))
                                        }}
                                        class="mr-2 border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800">
                                        <option disabled selected value> - - Period - - </option>
                                        <option value='month'> Month </option>
                                        <option value='year'> Year </option>
                                      </select>
                                      <input
                                        placeholder=' - - Length - - '
                                        name="subscriptionCost"
                                        value={editedBulkValues.subscriptionCost && editedBulkValues.subscriptionCost.periodLength ? editedBulkValues.subscriptionCost.periodLength : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['subscriptionCost']: { ...values.subscriptionCost, 'periodLength': e.target.value } }))
                                        }}
                                        type="number"
                                        class="mr-2 input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                      <input
                                        placeholder=' - - Amount - - '
                                        type="number"
                                        name="subscriptionCost"
                                        value={editedBulkValues.subscriptionCost && editedBulkValues.subscriptionCost.amount ? editedBulkValues.subscriptionCost.amount.value : null}
                                        onChange={(e) => {
                                          setEditedBulkValues(values => ({ ...values, ['subscriptionCost']: { ...values.subscriptionCost, 'amount': { value: e.target.value, currency: feed.currency } } }))
                                        }}
                                        class=" input-focus-none px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md" />
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/7437904?hl=en&ref_topic=6324338'><p className="text-black font-medium">See </p>: Defination</a>
                                  </div>}
                                {selectedBulkEditOptions[value] === 'shipping' &&
                                  <div class="w-[60%]">
                                    <div className='items-center justify-between'>
                                      <div className="flex items-center">
                                        <input
                                          placeholder=' - - Price - - '
                                          name="shippingPrice"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.price ? editedBulkValues.shipping.price.value : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'price': { value: e.target.value, currency: feed.currency } } }))
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'country': feed.country } }))
                                          }}
                                          type="number"
                                          class="mr-2 input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        <input
                                          placeholder=' - - Region - - '
                                          name="shippingRegion"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.region ? editedBulkValues.shipping.region : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'region': e.target.value } }))
                                          }}
                                          type="text"
                                          class="input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                      </div>
                                      <div className="flex items-center">
                                        <input
                                          placeholder=' - - Service - - '
                                          name="shippingService"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.service ? editedBulkValues.shipping.service : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'service': e.target.value } }))
                                          }}
                                          type="text"
                                          class="mr-2 input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        <input
                                          placeholder=' - - Location ID - - '
                                          name="shippingLocationId"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.locationId ? editedBulkValues.shipping.locationId : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'locationId': e.target.value } }))
                                          }}
                                          type="text"
                                          class="input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                      </div>
                                      <div className="flex items-center">
                                        <input
                                          placeholder=' - - Location Group Name - - '
                                          name="shippingLocationGroup"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.locationGroupName ? editedBulkValues.shipping.locationGroupName : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'locationGroupName': e.target.value } }))
                                          }}
                                          type="text"
                                          class="mr-2 input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        <input
                                          placeholder=' - - Postal Code - - '
                                          name="shippingPostalCode"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.postalCode ? editedBulkValues.shipping.postalCode : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'postalCode': e.target.value } }))
                                          }}
                                          type="text"
                                          class="input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                      </div>
                                      <div className="flex items-center">
                                        <input
                                          placeholder=' - - Min Handling Time - - '
                                          name="shippingMinHandlingTime"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.minHandlingTime ? editedBulkValues.shipping.minHandlingTime : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'minHandlingTime': e.target.value } }))
                                          }}
                                          type="number"
                                          class="mr-2 input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        <input
                                          placeholder=' - - Max Handling Time - - '
                                          name="shippingMaxHandlingTime"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.maxHandlingTime ? editedBulkValues.shipping.maxHandlingTime : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'maxHandlingTime': e.target.value } }))
                                          }}
                                          type="number"
                                          class="input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                      </div>
                                      <div className="flex items-center">
                                        <input
                                          placeholder=' - - Min Transit Time - - '
                                          name="shippingMinTransitTime"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.minTransitTime ? editedBulkValues.shipping.minTransitTime : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'minTransitTime': e.target.value } }))
                                          }}
                                          type="number"
                                          class="mr-2 input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                        <input
                                          placeholder=' - - Max Transit Time - - '
                                          name="shippingMaxTransitTime"
                                          value={editedBulkValues.shipping && editedBulkValues.shipping.maxTransitTime ? editedBulkValues.shipping.maxTransitTime : null}
                                          onChange={(e) => {
                                            setEditedBulkValues(values => ({ ...values, ['shipping']: { ...values.shipping, 'maxTransitTime': e.target.value } }))
                                          }}
                                          type="number"
                                          class="input-focus-none mb-2 px-4 py-2 w-[100%] focus:border-none focus:ring-none border border-[#babfc3] rounded-md"
                                        />
                                      </div>
                                    </div>
                                    <a className="text-blue-600 flex font-bold" target='_blank' href='https://support.google.com/merchants/answer/6324484?hl=en&ref_topic=6324338&sjid=1831948374862338023-EU'><p className="text-black font-medium">See </p>: Defination</a>
                                    {shippingValuePriceError && <div className="flex">
                                      <span>
                                        <svg
                                          fill="rgba(215, 44, 13, 1)"
                                          width="20px"
                                          viewBox="0 0 20 20"
                                          class="Polaris-Icon__Svg"
                                          focusable="false"
                                          aria-hidden="true"
                                        >
                                          <path d="M10 18a8 8 0 1 1 0-16 8 8 0 0 1 0 16zm-1-9a1 1 0 0 0 2 0v-2a1 1 0 1 0-2 0v2zm0 4a1 1 0 1 0 2 0 1 1 0 0 0-2 0z"></path>
                                        </svg>
                                      </span>
                                      <span style={{ color: "rgba(215, 44, 13, 1)" }} class="ml-2 block sm:inline text-base">
                                        Price is required for Shipping
                                      </span>
                                    </div>}
                                  </div>}
                              </>
                              {duplicateBulkOptions.length > 1 && <button
                                onClick={() => {
                                  setDuplicateBulkOptions((current) => current.filter((val, ind) => val != value));
                                  delete selectedBulkEditOptions[value]
                                }}>
                                <RemoveCircleOutlineIcon style={{ color: '#d72c0d', marginLeft: '5px' }} />
                              </button>}
                            </div>))}
                            <Button onClick={() => {
                              setDuplicateBulkOptions(values => ([...values, (+values[values.length - 1] + 1)]));
                            }} style={{ background: "#008060", color: "#FFFFFF" }}><AddCircleOutlineIcon /> Add Field</Button>
                          </div>
                        </>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end mt-2'>
                        <Button style={{ marginRight: '10px' }} onClick={handleBulkEditCancel} variant="outlined">Cancel</Button>
                        <Button onClick={handleBulkEditApply} disabled={Object.values(editedBulkValues).length <= 0 || editRequestProcessing} className='bg-[#008060]' variant="contained">{editRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Apply"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------sync from shopify Modal-------------- */}

        <>
          {showSyncFromShopifyModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleSyncShopifyCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-[66%] p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Sync From Shopify</p>
                        <VideoModal margin='0 0 0 10px' title='Tutorial For Shopify Sync' videoSrc='https://www.youtube.com/embed/sWALzgmmkYM' />
                        <CloseIcon onClick={handleSyncShopifyCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <div className='p-2 rounded-md'
                          style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                        >
                          <div className='flex justify-between items-center'>
                            <FormControlLabel name="title" onChange={handleShopifySyncInputs} control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.title ? syncFromShopifyInputs.title : false} style={{ color: '#008060' }} />} label="Title" />
                            <FormControlLabel name="description" onChange={handleShopifySyncInputs} labelPlacement="start" control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.description ? syncFromShopifyInputs.description : false} style={{ color: '#008060' }} />} label="Description" />
                          </div>
                          <div className='flex justify-between items-center'>
                            {/* <FormControlLabel name="seoTitle" onChange={handleShopifySyncInputs} labelPlacement="start" control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.seoTitle ? syncFromShopifyInputs.seoTitle : false} style={{ color: '#008060' }} />} label="Seo Title" /> */}
                            {/* <FormControlLabel name="seoDescription" onChange={handleShopifySyncInputs} labelPlacement="start" control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.seoDescription ? syncFromShopifyInputs.seoDescription : false} style={{ color: '#008060' }} />} label="Seo Description" /> */}
                          </div>
                          <div className='flex justify-between items-center'>
                            <FormControlLabel name="productImages" onChange={handleShopifySyncInputs} control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.productImages ? syncFromShopifyInputs.productImages : false} style={{ color: '#008060' }} />} label="Product Images" />
                            <FormControlLabel name="productPrice" onChange={handleShopifySyncInputs} labelPlacement="start" control={<Checkbox checked={syncFromShopifyInputs && syncFromShopifyInputs.productPrice ? syncFromShopifyInputs.productPrice : false} style={{ color: '#008060' }} />} label="Product Price" />
                          </div>
                        </div>
                        <div className='p-4 rounded-md mt-4'
                          style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                        >
                          <div className="flex justify-between items-center">
                            <p>Metafields settings are {metafieldsActive ? 'activated' : 'deactivated'}.</p>
                            <Button onClick={handleMetafieldsClick} style={{ background: "#008060", textTransform: 'capitalize' }} variant="contained">{metafieldsActive ? 'Deactivate' : 'Activate'}</Button>
                          </div>
                        </div>
                        {metafieldsActive ? (
                          <div className='p-4 rounded-md mt-4'
                            style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}
                          >

                            <>
                              <p>Please choose which metafields you would like to sync from your store along with product information.</p>
                              <RadioGroup
                                defaultValue="none"
                                value={metafieldsResourceValue}
                                onChange={handleMetafieldsResourceChange}
                                row
                                style={{ justifyContent: 'space-between' }}
                              >
                                <FormControlLabel value="product" control={<Radio style={{ color: '#008060' }} />} label="Product" />
                                <FormControlLabel value="variant" control={<Radio style={{ color: '#008060' }} />} label="Variant" />
                                <FormControlLabel value="none" control={<Radio style={{ color: '#008060' }} />} label="None" />
                              </RadioGroup>
                              {metafieldsResourceValue != 'none' &&
                                <>
                                  {loadingMetafields && <CircularProgress style={{ color: "#008060", marginRight: "10px", marginTop: "10%", marginLeft: "40%" }} size={30} />}
                                  {!loadingMetafields && <div>
                                    {metafieldsValues.map((value, index) => (
                                      <div key={0} className="flex mt-2 justify-between items-center">
                                        <div className='mr-2 w-[40%]'>
                                          <select
                                            id="metafields"
                                            name={index}
                                            onChange={handleMetafieldsInput}
                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                          >
                                            <option disabled selected value>
                                              - - select - -
                                            </option>
                                            {selectedResourceMetafields.map((value, index) => (
                                              <option value={value.value}>{value.label}</option>
                                            ))}
                                          </select>
                                        </div>
                                        <div className='w-[40%]'>
                                          <select
                                            id="googleFields"
                                            name={index}
                                            onChange={handleMetafieldsInput}
                                            class="border-2 border-[#008060] text-gray-900 text-sm rounded-md focus:ring-green-800 focus:border-green-800 block w-full p-2.5  dark:border-green-800 dark:placeholder-gray-400 active:ring-green-800  dark:focus:ring-green-800 dark:focus:border-green-800"
                                          >
                                            <option disabled selected value> - - select - - </option>
                                            {bulkEditOptionsArray.map((value, index) => (
                                              <option value={value.value}>{value.label}</option>
                                            ))}
                                          </select>
                                        </div>
                                      </div>
                                    ))}
                                    <div className='flex justify-between items-center mt-2'>
                                      <Button style={{ display: 'flex', alignItems: 'center' }} onClick={() => { setMetafieldsValues(values => ([...values, ''])) }}><AddCircleOutlineIcon style={{ color: '#008060', marginRight: '5px' }} /> ADD </Button>
                                      <Button style={{ display: 'flex', alignItems: 'center' }} disabled={metafieldsValues.length <= 1} onClick={() => {
                                        setMetafieldsValues(metafieldsValues.filter((value, index) => index != metafieldsValues.length - 1));
                                        setSyncFromShopifyInputs(values => ({ ...values, ['metafields']: values.metafields.filter((value, index) => index != values.metafields.length - 1) }));
                                      }}><RemoveCircleOutlineIcon style={{ color: '#d72c0d', marginRight: '5px' }} /> Remove</Button>
                                    </div>
                                  </div>}
                                </>
                              }
                            </>
                          </div>
                        ) : null}
                        {showMetafieldUpgradeMessage &&
                          <div className='p-4 rounded-md mt-4'
                            style={{ boxShadow: "0 0 0.3125rem rgba(23,24,24,.05),0 0.0625rem 0.125rem rgba(0,0,0,.15)" }}>
                            <p>Your Current Plan does not have this feature. Please Upgrade to use this feature.</p>
                            <Button onClick={handleUpgradeNow}>Upgrade</Button>
                          </div>}
                      </div>
                      {syncFromShopifyErrors.length > 0 &&
                        <>
                          {syncFromShopifyErrors.map((value, index) => (
                            <div className="flex">
                              <span>
                                <svg
                                  fill="rgba(215, 44, 13, 1)"
                                  width="20px"
                                  viewBox="0 0 20 20"
                                  class="Polaris-Icon__Svg"
                                  focusable="false"
                                  aria-hidden="true"
                                >
                                  <path d="M10 18a8 8 0 1 1 0-16 8 8 0 0 1 0 16zm-1-9a1 1 0 0 0 2 0v-2a1 1 0 1 0-2 0v2zm0 4a1 1 0 1 0 2 0 1 1 0 0 0-2 0z"></path>
                                </svg>
                              </span>
                              <span style={{ color: "rgba(215, 44, 13, 1)" }} class="ml-2 block sm:inline text-base">
                                {value}
                              </span>
                            </div>
                          ))}
                        </>
                      }
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleSyncShopifyCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={syncDataFromShopify} disabled={syncFromShopifyInputs.title || syncFromShopifyInputs.description || syncFromShopifyInputs.productImages || syncFromShopifyInputs.productPrice || syncFromShopifyInputs.seoTitle || syncFromShopifyInputs.seoDescription || syncFromShopifyInputs.variantImage || syncFromShopifyInputs.pAdditionalImages || syncFromShopifyInputs.metafields.length > 0 || syncRequestProcessing ? false : true} className='bg-[#008060]' variant="contained">{syncRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Apply"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------sync from google Modal-------------- */}

        <>
          {showGoogleSyncModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleGoogleSyncCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Sync From Google</p>
                        <VideoModal margin='0 0 0 10px' title='Tutorial Google Sync' videoSrc='https://www.youtube.com/embed/xu1O3lTBaYE' />
                        <CloseIcon onClick={handleGoogleSyncCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <p>Our App will itself sync the data from Shopify to Google seamlessly when ever changes are applied. But if you want to do it yourself then click Apply</p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleGoogleSyncCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={dispatchSyncStatusJob} disabled={googleSyncRequestProcessing} className='bg-[#008060]' variant="contained">{googleSyncRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Apply"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Include Product Modal-------------- */}
        <>
          {showIncludeModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleIncludeCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Include Product</p>
                        <VideoModal margin='0 0 0 10px' title='How To Include Product' videoSrc='https://www.youtube.com/embed/xu1O3lTBaYE' />
                        <CloseIcon onClick={handleIncludeCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <p>Do you want to add your product in current feed ?</p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleIncludeCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={includeProducts} disabled={includeRequestProcessing} className='bg-[#008060]' variant="contained">{includeRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Apply"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Exclude Product Modal-------------- */}

        <>
          {showExcludeModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleExcludeCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Exclude Product</p>
                        <VideoModal margin='0 0 0 10px' title='How To Exclude Product' videoSrc='https://www.youtube.com/embed/xu1O3lTBaYE' />
                        <CloseIcon onClick={handleExcludeCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <p>Do you want to remove your product from current feed ?</p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleExcludeCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={excludeProducts} disabled={excludeRequestProcessing} className='bg-[#008060]' variant="contained">{excludeRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Apply"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Exclude Product Modal-------------- */}
        <>
          {showBulkDeleteModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleDeleteCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <p className='text-lg font-medium ml-2'>Delete Product</p>
                        <CloseIcon onClick={handleDeleteCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <p>Are you sure to delete this product ?</p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleDeleteCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={DeleteBulkProducts} disabled={deleteRequestProcessing} style={{ background: "#d82c0d", color: "white" }}>{deleteRequestProcessing ? <CircularProgress color="inherit" size={25} /> : "Delete"}</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Delete Product Modal-------------- */}
        <>
          {showSingleDeleteModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleSingleDeleteCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <ReportProblemIcon style={{ color: '#d82c0d' }} />
                        <p className='text-lg font-medium ml-2'>Are You Sure ?</p>
                        <CloseIcon onClick={handleSingleDeleteCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='p-4'>
                        <p className='text-sm font-normal' >Do you want delete This Product</p>
                      </div>
                      <Divider style={{ margin: '10px 0 10px 0' }} />
                      <div className='flex justify-end'>
                        <Button onClick={handleSingleDeleteCancel} style={{ marginRight: '10px' }} variant="outlined">Cancel</Button>
                        <Button onClick={DeleteSingleProduct} style={{ background: "#d82c0d", color: "white" }}>Delete</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>

        {/* ------------Toast-------------- */}
        <>
          {showToast ? (
            <>
              <div id="toast-default" class="flex items-center p-4 fixed bottom-5 right-[42%] transition-opacity ease-in-out delay-150 w-full max-w-xs rounded-lg text-white bg-[#202123]" role="alert">
                <div class="ml-3 text-sm font-normal">{toastMessage}</div>
                <button onClick={() => setShowToast(false)} type="button" class="ml-auto -mx-1.5 -my-1.5 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 " data-dismiss-target="#toast-default" aria-label="Close">
                  <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                </button>
              </div>
            </>
          ) : null}
        </>

        {/* ------------  upgrade modal  -------------- */}

        <>
          {showUpgradeModel ? (
            <>
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div
                  className="fixed inset-0 w-full h-full bg-black opacity-40"
                  onClick={handleUpgradeModelCancel}
                ></div>
                <div className="flex items-center min-h-screen px-4 py-8">
                  <div className="relative w-full max-w-2xl p-4 mx-auto bg-white rounded-lg shadow-lg">
                    <div className="">
                      <div className='flex items-center p-2'>
                        <CloseIcon onClick={handleUpgradeModelCancel} className='absolute right-3 hover:bg-gray-100 hover:transition-all transition ease-in-out delay-250 hover:rotate-180  cursor-pointer' />
                      </div>
                      <div className='p-4'>
                        <p className='text-2xl text-center font-medium' >Itâs Time for Your Upgrade!</p>
                        <p className='text-md text-center font-normal' >You have reached the limit of your current plan.<br />To add extra features,you need to choose a higher plan.</p>
                        <div className="flex justify-center">
                          <img className="w-[70%]" src={upgradeImg} />
                        </div>
                        <p className='text-md text-center font-normal'>By using this coupon <b><i>Tokyo%20</i></b>&nbsp; you will get 20% Off only on Unlimited Plan</p>
                      </div>
                      <div className='flex justify-center'>
                        <Button onClick={handleUpgradeNow} style={{ marginRight: '10px', background: '#fa6102' }} variant="contained">Upgrade Now</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </>
      </ThemeProvider >
    </>
  )
}

export default Products